<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/module.c">




















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"slowlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"monotonic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"call_reply.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>







<typedef>typedef <type><struct>struct <name>RedisModuleInfoCtx</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>requested_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_dict_field</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleInfoCtx</name>;</typedef>





<struct>struct <name>RedisModuleSharedAPI</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleSharedAPI</name></name></type> <name>RedisModuleSharedAPI</name>;</typedef>

<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>modules</name></decl>;</decl_stmt>



<struct>struct <name>AutoMemEntry</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AM_KEY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AM_STRING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AM_REPLY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AM_FREED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AM_DICT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AM_INFO</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_POOL_ALLOC_MIN_SIZE</name></cpp:macro> <cpp:value>(1024*8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_POOL_ALLOC_ALIGN</name></cpp:macro> <cpp:value>(sizeof(void*))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>RedisModulePoolAllocBlock</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModulePoolAllocBlock</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>memory</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModulePoolAllocBlock</name>;</typedef>









<struct_decl>struct <name>RedisModuleBlockedClient</name>;</struct_decl>

<struct>struct <name>RedisModuleCtx</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>getapifuncptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModuleBlockedClient</name></name> <modifier>*</modifier></type><name>blocked_client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AutoMemEntry</name></name> <modifier>*</modifier></type><name>amqueue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>amqueue_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>amqueue_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>postponed_arrays</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>postponed_arrays_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>blocked_privdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>blocked_ready_key</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>keys_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>RedisModulePoolAllocBlock</name></name> <modifier>*</modifier></type><name>pa_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>next_yield_time</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleCtx</name></name></type> <name>RedisModuleCtx</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_NONE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_AUTO_MEMORY</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_KEYS_POS_REQUEST</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_BLOCKED_REPLY</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_BLOCKED_TIMEOUT</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_THREAD_SAFE</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_BLOCKED_DISCONNECTED</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_TEMP_CLIENT</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_NEW_CLIENT</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>



<struct>struct <name>RedisModuleKey</name> <block>{
<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<union>union <block>{
<struct>struct <block>{

<decl_stmt><decl><type><name>listTypeEntry</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
}</block> <decl><name>list</name></decl>;</struct>
<struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zrangespec</name></type> <name>rs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zlexrangespec</name></type> <name>lrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>er</name></decl>;</decl_stmt>

}</block> <decl><name>zset</name></decl>;</struct>
<struct>struct <block>{

<decl_stmt><decl><type><name>streamID</name></type> <name>currentid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>numfieldsleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>signalready</name></decl>;</decl_stmt>
}</block> <decl><name>stream</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleKey</name></name></type> <name>RedisModuleKey</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZSET_RANGE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZSET_RANGE_LEX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZSET_RANGE_SCORE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZSET_RANGE_POS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>



<struct_decl>struct <name>RedisModuleBlockedClient</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RedisModuleCmdFunc</name>) <parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleDisconnectFunc</name>) <parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>RedisModuleBlockedClient</name></name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<struct>struct <name>RedisModuleCommand</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCmdFunc</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>rediscmd</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleCommand</name></name></type> <name>RedisModuleCommand</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLYFLAG_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLYFLAG_TOPARSE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLYFLAG_NESTED</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>





<typedef>typedef <type><name><name>struct</name> <name>CallReply</name></name></type> <name>RedisModuleCallReply</name>;</typedef>



<typedef>typedef <type><struct>struct <name>RedisModuleBlockedClient</name> <block>{
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCmdFunc</name></type> <name>reply_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCmdFunc</name></type> <name>timeout_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleDisconnectFunc</name></type> <name>disconnect_callback</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_privdata</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>thread_safe_ctx_client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>reply_client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dbid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocked_on_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unblocked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>background_timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>background_duration</name></decl>;</decl_stmt>

}</block></struct></type> <name>RedisModuleBlockedClient</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>moduleUnblockedClientsMutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>list</name> <modifier>*</modifier></type><name>moduleUnblockedClients</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>client</name> <modifier>*</modifier><modifier>*</modifier></type><name>moduleTempClients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>moduleTempClientCap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>moduleTempClientCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>moduleTempClientMinCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>moduleGIL</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>



<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RedisModuleNotificationFunc</name>) <parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



<typedef>typedef <type><struct>struct <name>RedisModuleKeyspaceSubscriber</name> <block>{

<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RedisModuleNotificationFunc</name></type> <name>notify_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>event_mask</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleKeyspaceSubscriber</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>list</name> <modifier>*</modifier></type><name>moduleKeyspaceSubscribers</name></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <name>RedisModuleDict</name> <block>{
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleDict</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RedisModuleDictIter</name> <block>{
<decl_stmt><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleDictIter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RedisModuleCommandFilterCtx</name> <block>{
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleCommandFilterCtx</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleCommandFilterFunc</name>) <parameter_list>(<parameter><decl><type><name>RedisModuleCommandFilterCtx</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>RedisModuleCommandFilter</name> <block>{

<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RedisModuleCommandFilterFunc</name></type> <name>callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleCommandFilter</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>list</name> <modifier>*</modifier></type><name>moduleCommandFilters</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleForkDoneHandler</name>) <parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct><specifier>static</specifier> struct <name>RedisModuleForkInfo</name> <block>{
<decl_stmt><decl><type><name>RedisModuleForkDoneHandler</name></type> <name>done_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>done_handler_user_data</name></decl>;</decl_stmt>
}</block> <decl><name>moduleForkInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>

<typedef>typedef <type><struct>struct <name>RedisModuleServerInfoData</name> <block>{
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleServerInfoData</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ARGV_REPLICATE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ARGV_NO_AOF</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ARGV_NO_REPLICAS</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ARGV_RESP_3</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ARGV_RESP_AUTO</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ARGV_CHECK_ACL</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOULD_SIGNAL_MODIFIED_KEYS</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ctx-&gt;module? !(ctx-&gt;module-&gt;options &amp; REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED) : 1</cpp:value></cpp:define>







<typedef>typedef <type><struct>struct <name>RedisModuleEventListener</name> <block>{
<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleEvent</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleEventCallback</name></type> <name>callback</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleEventListener</name>;</typedef>

<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>RedisModule_EventListeners</name></decl>;</decl_stmt>






<typedef>typedef <type><struct>struct <name>RedisModuleUser</name> <block>{
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>free_user</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleUser</name>;</typedef>


<typedef>typedef <type><struct>struct <name>RedisModuleKeyOptCtx</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>from_key</name></decl>, <modifier>*</modifier><name>to_key</name>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>from_dbid</name></decl>, <name>to_dbid</name>;</decl_stmt>


}</block></struct></type> <name>RedisModuleKeyOptCtx</name>;</typedef>




<function_decl><type><name>void</name></type> <name>RM_FreeCallReply</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RM_CloseKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>autoMemoryCollect</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>moduleCreateArgvFromUserFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argcp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argvlenp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RM_ZsetRangeStop</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>kp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zsetKeyReset</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>moduleInitKeyTypeSpecific</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RM_FreeDict</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RM_FreeServerInfo</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>












<function><type><name>void</name> <modifier>*</modifier></type><name>RM_Alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type><name>RM_Calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zcalloc</name><argument_list>(<argument><expr><name>nmemb</name><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name><modifier>*</modifier></type> <name>RM_Realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zrealloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>RM_Strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>poolAllocRelease</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModulePoolAllocBlock</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pa_head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>head</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pa_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><name>void</name> <modifier>*</modifier></type><name>RM_PoolAlloc</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModulePoolAllocBlock</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pa_head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>used</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alignment</name> <init>= <expr><name>REDISMODULE_POOL_ALLOC_ALIGN</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <name>alignment</name> <operator>&amp;&amp;</operator> <name>alignment</name><operator>/</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name>bytes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alignment</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>used</name></name> <operator>%</operator> <name>alignment</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>used</name></name> <operator>+=</operator> <name>alignment</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>used</name></name> <operator>%</operator> <name>alignment</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>used</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>blocksize</name> <init>= <expr><name>REDISMODULE_POOL_ALLOC_MIN_SIZE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>&lt;</operator> <name>bytes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>blocksize</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>blocksize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pa_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pa_head</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>used</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>client</name> <modifier>*</modifier></type><name>moduleAllocTempClient</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>moduleTempClientCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>moduleTempClients</name><index>[<expr><operator>--</operator><name>moduleTempClientCount</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>moduleTempClientCount</name> <operator>&lt;</operator> <name>moduleTempClientMinCount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>moduleTempClientMinCount</name> <operator>=</operator> <name>moduleTempClientCount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>createClient</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_MODULE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleReleaseTempClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>moduleTempClientCount</name> <operator>==</operator> <name>moduleTempClientCap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>moduleTempClientCap</name> <operator>=</operator> <ternary><condition><expr><name>moduleTempClientCap</name></expr> ?</condition><then> <expr><name>moduleTempClientCap</name><operator>*</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>moduleTempClients</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>moduleTempClients</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>moduleTempClientCap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clearClientConnectionState</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>reply_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>CLIENT_MODULE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>moduleTempClients</name><index>[<expr><name>moduleTempClientCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>moduleCreateEmptyKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDISMODULE_KEYTYPE_LIST</name></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>createQuicklistObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quicklistSetOptions</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>list_max_listpack_size</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REDISMODULE_KEYTYPE_ZSET</name></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>createZsetListpackObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REDISMODULE_KEYTYPE_HASH</name></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>createHashObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REDISMODULE_KEYTYPE_STREAM</name></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>createStreamObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleInitKeyTypeSpecific</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>moduleFreeKeyIterator</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_LIST</name></expr>:</case> <expr_stmt><expr><call><name>listTypeReleaseIterator</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>moduleDelKeyIfEmpty</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isempty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_LIST</name></expr>:</case> <expr_stmt><expr><name>isempty</name> <operator>=</operator> <call><name>listTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_SET</name></expr>:</case> <expr_stmt><expr><name>isempty</name> <operator>=</operator> <call><name>setTypeSize</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_ZSET</name></expr>:</case> <expr_stmt><expr><name>isempty</name> <operator>=</operator> <call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_HASH</name></expr>:</case> <expr_stmt><expr><name>isempty</name> <operator>=</operator> <call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case> <expr_stmt><expr><name>isempty</name> <operator>=</operator> <call><name>streamLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>isempty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>isempty</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleFreeKeyIterator</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dbDelete</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>RM_GetApi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>targetPtrPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>






<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>moduleapi</name></name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>he</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>targetPtrPtr</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>moduleFreeContext</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_THREAD_SAFE</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>server</name><operator>.</operator><name>module_ctx_nesting</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>core_propagates</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>propagatePendingCommands</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blockingOperationEnds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>=</operator> <name>BUSY_MODULE_YIELD_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unblockPostponedClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>autoMemoryCollect</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poolAllocRelease</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"API misuse detected in module %s: "</literal>
<literal type="string">"RedisModule_ReplyWith*(REDISMODULE_POSTPONED_LEN) "</literal>
<literal type="string">"not matched by the same number of RedisModule_SetReply*Len() "</literal>
<literal type="string">"calls."</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_TEMP_CLIENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>moduleReleaseTempClient</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_NEW_CLIENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>moduleCreateContext</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>out_ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctx_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> ,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RedisModuleCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>getapifuncptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>&amp;</operator><name>RM_GetApi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name>module</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ctx_flags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx_flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_TEMP_CLIENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>moduleAllocTempClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ctx_flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_NEW_CLIENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>createClient</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>next_yield_time</name></name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000000</literal> <operator>/</operator> <name><name>server</name><operator>.</operator><name>hz</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>next_yield_time</name></name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>server</name><operator>.</operator><name>busy_reply_threshold</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ctx_flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_THREAD_SAFE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>module_ctx_nesting</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>RedisModuleCommandDispatcher</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cp</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>refcount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>trimStringObjectIfNeeded</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>moduleGetCommandKeysViaAPI</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_KEYS_POS_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>MAX_KEYS_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>keys_result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cp</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>RM_IsKeysPositionRequest</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_KEYS_POS_REQUEST</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>















<function><type><name>void</name></type> <name>RM_KeyAtPos</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_KEYS_POS_REQUEST</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>keys_result</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>keys_result</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>==</operator> <name><name>res</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><name><name>res</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>res</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">8192</literal></expr> ?</condition><then> <expr><literal type="number">8192</literal></expr> </then><else>: <expr><name><name>res</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name><name>res</name><operator>-&gt;</operator><name>numkeys</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int64_t</name></type> <name>commandFlagsFromString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_WRITE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"readonly"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_READONLY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"admin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_ADMIN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"deny-oom"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_DENYOOM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"deny-script"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_NOSCRIPT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"allow-loading"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_LOADING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"pubsub"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_PUBSUB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"blocking"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_BLOCKING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"allow-stale"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_STALE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"no-monitor"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_SKIP_MONITOR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"no-slowlog"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_SKIP_SLOWLOG</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"fast"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_FAST</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"no-auth"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_NO_AUTH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"may-replicate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_MAY_REPLICATE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"getkeys-api"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_MODULE_GETKEYS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"no-cluster"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_MODULE_NO_CLUSTER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"no-mandatory-keys"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_NO_MANDATORY_KEYS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"allow-busy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_ALLOW_BUSY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>,<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int64_t</name></type> <name>commandKeySpecsFlagsFromString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"RO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_RO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"RW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_RW</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"OW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_OW</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"RM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_RM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"access"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_ACCESS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"insert"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_INSERT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"update"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_UPDATE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"delete"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_DELETE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"channel"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_CHANNEL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="string">"incomplete"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CMD_KEY_INCOMPLETE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>,<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>moduleCreateCommandProxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>declared_name</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>fullname</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>cmdfunc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keystep</name></decl></parameter>)</parameter_list>;</function_decl>


























































































<function><type><name>int</name></type> <name>RM_CreateCommand</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>cmdfunc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strflags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keystep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>strflags</name></expr> ?</condition><then> <expr><call><name>commandFlagsFromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>strflags</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CMD_MODULE_NO_CLUSTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lookupCommandByCString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sds</name></type> <name>declared_name</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>moduleCreateCommandProxy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>declared_name</name></expr></argument>, <argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>declared_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmdfunc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>firstkey</name></expr></argument>, <argument><expr><name>lastkey</name></expr></argument>, <argument><expr><name>keystep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>=</operator> <ternary><condition><expr><name>cmdfunc</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>declared_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>, <argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>declared_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>ACLGetCommandID</name><argument_list>(<argument><expr><name>declared_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>moduleCreateCommandProxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>declared_name</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>fullname</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>cmdfunc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keystep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>rediscmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>








<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name>module</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>cmdfunc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name></name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rediscmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>declared_name</name></name> <operator>=</operator> <name>declared_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>fullname</name></name> <operator>=</operator> <name>fullname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>COMMAND_GROUP_MODULE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>RedisModuleCommandDispatcher</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name>CMD_MODULE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name> <operator>=</operator> <operator>(</operator><name>redisGetKeysProc</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs_max</name></name> <operator>=</operator> <name>STATIC_KEY_SPECS_NUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs_static</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>firstkey</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>begin_search_type</name> <operator>=</operator> <name>KSPEC_BS_INDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>firstkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>find_keys_type</name> <operator>=</operator> <name>KSPEC_FK_RANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name> <operator>=</operator> <ternary><condition><expr><name>lastkey</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>lastkey</name></expr> </then><else>: <expr><operator>(</operator><name>lastkey</name><operator>-</operator><name>firstkey</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>keystep</name></name> <operator>=</operator> <name>keystep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>key_specs_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>begin_search_type</name></name> <operator>=</operator> <name>KSPEC_BS_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>find_keys_type</name></name> <operator>=</operator> <name>KSPEC_FK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>populateCommandMovableKeys</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>microseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>rejected_calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>failed_calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>RM_GetCommand</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>lookupCommandByCString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>



























<function><type><name>int</name></type> <name>RM_CreateSubcommand</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>cmdfunc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strflags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keystep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>strflags</name></expr> ?</condition><then> <expr><call><name>commandFlagsFromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>strflags</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CMD_MODULE_NO_CLUSTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>parent_cmd</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>rediscmd</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent_cmd</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>parent_cp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>parent_cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parent_cp</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>sds</name></type> <name>declared_name</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parent_cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name> <operator>&amp;&amp;</operator> <call><name>lookupSubcommand</name><argument_list>(<argument><expr><name>parent_cmd</name></expr></argument>, <argument><expr><name>declared_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>declared_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>sds</name></type> <name>fullname</name> <init>= <expr><call><name>catSubCommandFullname</name><argument_list>(<argument><expr><name><name>parent_cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>moduleCreateCommandProxy</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>declared_name</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>cmdfunc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>firstkey</name></expr></argument>, <argument><expr><name>lastkey</name></expr></argument>, <argument><expr><name>keystep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>commandAddSubcommand</name><argument_list>(<argument><expr><name>parent_cmd</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>rediscmd</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>moduleGetHandleByName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>modulename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name>modules</name></expr></argument>,<argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>moduleIsModuleCommand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>module_handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>RedisModuleCommandDispatcher</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>module_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>cp</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>module_handle</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>extendKeySpecsIfNeeded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs_max</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name> <operator>==</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_static</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keySpec</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs_static</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keySpec</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keySpec</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>moduleAddCommandKeySpec</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>specflags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>specflags</name></expr> ?</condition><then> <expr><call><name>commandKeySpecsFlagsFromString</name><argument_list>(<argument><expr><name>specflags</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>rediscmd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>extendKeySpecsIfNeeded</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>]</index></name><operator>.</operator><name>begin_search_type</name> <operator>=</operator> <name>KSPEC_BS_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>]</index></name><operator>.</operator><name>find_keys_type</name> <operator>=</operator> <name>KSPEC_FK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>moduleSetCommandKeySpecBeginSearch</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>keySpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>rediscmd</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>begin_search_type</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>begin_search_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>bs</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>bs</name></name></expr>;</expr_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>moduleSetCommandKeySpecFindKeys</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>keySpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>rediscmd</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>find_keys_type</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>find_keys_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>fk</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>fk</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>populateCommandLegacyRangeSpec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>populateCommandMovableKeys</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



























































<function><type><name>int</name></type> <name>RM_AddCommandKeySpec</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>specflags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>spec_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>moduleAddCommandKeySpec</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>specflags</name></expr></argument>, <argument><expr><name>spec_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>RM_SetCommandKeySpecBeginSearchIndex</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>keySpec</name></type> <name>spec</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>begin_search_type</name></name> <operator>=</operator> <name>KSPEC_BS_INDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<return>return <expr><call><name>moduleSetCommandKeySpecBeginSearch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>spec_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>RM_SetCommandKeySpecBeginSearchKeyword</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spec_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startfrom</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>keySpec</name></type> <name>spec</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>begin_search_type</name></name> <operator>=</operator> <name>KSPEC_BS_KEYWORD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>keyword</name></name> <operator>=</operator> <name>keyword</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>startfrom</name></name> <operator>=</operator> <name>startfrom</name></expr>;</expr_stmt>

<return>return <expr><call><name>moduleSetCommandKeySpecBeginSearch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>spec_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>RM_SetCommandKeySpecFindKeysRange</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keystep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>keySpec</name></type> <name>spec</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>find_keys_type</name></name> <operator>=</operator> <name>KSPEC_FK_RANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name> <operator>=</operator> <name>lastkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>keystep</name></name> <operator>=</operator> <name>keystep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<return>return <expr><call><name>moduleSetCommandKeySpecFindKeys</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>spec_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>RM_SetCommandKeySpecFindKeysKeynum</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keynumidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keystep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>keySpec</name></type> <name>spec</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>find_keys_type</name></name> <operator>=</operator> <name>KSPEC_FK_KEYNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>keynumidx</name></name> <operator>=</operator> <name>keynumidx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>firstkey</name></name> <operator>=</operator> <name>firstkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>keystep</name></name> <operator>=</operator> <name>keystep</name></expr>;</expr_stmt>

<return>return <expr><call><name>moduleSetCommandKeySpecFindKeys</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>spec_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>RM_SetModuleAttribs</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>apiver</name></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>apiver</name></name> <operator>=</operator> <name>apiver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>types</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>usedby</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>using</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>in_call</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>in_hook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>info_cb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>defrag_cb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>loadmod</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name>module</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_IsModuleNameBusy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>modulename</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name>modules</name></expr></argument>,<argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>long</name> <name>long</name></type> <name>RM_Milliseconds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>RM_MonotonicMicroseconds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>RM_BlockedClientMeasureTimeStart</name><parameter_list>(<parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>elapsedStart</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bc</name><operator>-&gt;</operator><name>background_timer</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_BlockedClientMeasureTimeEnd</name><parameter_list>(<parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bc</name><operator>-&gt;</operator><name>background_timer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>background_duration</name></name> <operator>+=</operator> <call><name>elapsedUs</name><argument_list>(<argument><expr><name><name>bc</name><operator>-&gt;</operator><name>background_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






















<function><type><name>void</name></type> <name>RM_Yield</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>busy_reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_yield_time</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>processEventsWhileBlocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prev_busy_module_yield_reply</name> <init>= <expr><name><name>server</name><operator>.</operator><name>busy_module_yield_reply</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_reply</name></name> <operator>=</operator> <name>busy_reply</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_YIELD_FLAG_CLIENTS</name></expr> ?</condition><then>
<expr><name>BUSY_MODULE_YIELD_CLIENTS</name></expr> </then><else>: <expr><name>BUSY_MODULE_YIELD_EVENTS</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blockingOperationStarts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>processEventsWhileBlocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_reply</name></name> <operator>=</operator> <name>prev_busy_module_yield_reply</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BUSY_MODULE_YIELD_CLIENTS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_yield_time</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <literal type="number">1000000</literal> <operator>/</operator> <name><name>server</name><operator>.</operator><name>hz</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


















<function><type><name>void</name></type> <name>RM_SetModuleOptions</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>RM_SignalModifiedKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




















<function><type><name>void</name></type> <name>RM_AutoMemory</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDISMODULE_CTX_AUTO_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>autoMemoryAdd</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_AUTO_MEMORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>amqueue_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_len</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_len</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_len</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AutoMemEntry</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>autoMemoryFreed</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_AUTO_MEMORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>side</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>side</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>side</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>side</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name><operator>)</operator></expr> </then><else>: <expr><name>j</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>==</operator> <name>ptr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>REDISMODULE_AM_FREED</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>autoMemoryCollect</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_AUTO_MEMORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDISMODULE_CTX_AUTO_MEMORY</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDISMODULE_AM_STRING</name></expr>:</case> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_AM_REPLY</name></expr>:</case> <expr_stmt><expr><call><name>RM_FreeCallReply</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_AM_KEY</name></expr>:</case> <expr_stmt><expr><call><name>RM_CloseKey</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_AM_DICT</name></expr>:</case> <expr_stmt><expr><call><name>RM_FreeDict</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_AM_INFO</name></expr>:</case> <expr_stmt><expr><call><name>RM_FreeServerInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDISMODULE_CTX_AUTO_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amqueue_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CreateString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>createStringObject</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CreateStringPrintf</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatvprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CreateStringFromLongLong</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>RM_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CreateStringFromDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>d2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>RM_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CreateStringFromLongDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>humanfriendly</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LONG_DOUBLE_CHARS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>ld2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>ld</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>humanfriendly</name></expr> ?</condition><then> <expr><name>LD_STR_HUMAN</name></expr> </then><else>: <expr><name>LD_STR_AUTO</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>RM_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CreateStringFromString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>dupStringObject</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CreateStringFromStreamID</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RedisModuleStreamID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>streamID</name></type> <name>streamid</name> <init>= <expr><block>{<expr><name><name>id</name><operator>-&gt;</operator><name>ms</name></name></expr>, <expr><name><name>id</name><operator>-&gt;</operator><name>seq</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>createObjectFromStreamID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>streamid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>RM_FreeString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryFreed</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

































<function><type><name>void</name></type> <name>RM_RetainString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>autoMemoryFreed</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




























<function><type><name>RedisModuleString</name><modifier>*</modifier></type> <name>RM_HoldString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <name>OBJ_STATIC_REFCOUNT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>RM_CreateStringFromString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



























<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RM_StringPtrLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><literal type="string">"(NULL string reply referenced in module)"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>errmsg</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>RM_StringToLongLong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>ll</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>string2ll</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>:
<expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_StringToDouble</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>getDoubleFromObject</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>: <expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_StringToLongDouble</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name> <modifier>*</modifier></type><name>ld</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>string2ld</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ld</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>retval</name></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>: <expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_StringToStreamID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>RedisModuleStreamID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>streamID</name></type> <name>streamid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>streamParseID</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>streamid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>ms</name></name> <operator>=</operator> <name><name>streamid</name><operator>.</operator><name>ms</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name><name>streamid</name><operator>.</operator><name>seq</name></name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_StringCompare</name><parameter_list>(<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>compareStringObjects</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>moduleAssertUnsharedString</name><parameter_list>(<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Module attempted to use an in-place string modify operation "</literal>
<literal type="string">"with a string referenced multiple times. Please check the code "</literal>
<literal type="string">"for API usage correctness."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_EMBSTR</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_RAW</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdsfromlonglong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_RAW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_StringAppendBuffer</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>moduleAssertUnsharedString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
























<function><type><name>void</name></type> <name>RM_TrimStringAllocation</name><parameter_list>(<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>trimStringObjectIfNeeded</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
































<function><type><name>int</name></type> <name>RM_WrongArity</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
<argument><expr><literal type="string">"wrong number of arguments for '%s' command"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>client</name> <modifier>*</modifier></type><name>moduleGetReplyClient</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_THREAD_SAFE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>blocked_client</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>blocked_client</name><operator>-&gt;</operator><name>reply_client</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_ReplyWithLongLong</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>int</name></type> <name>RM_ReplyWithError</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-%s"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_ReplyWithSimpleString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyProto</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"+"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyProto</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyProto</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLLECTION_REPLY_ARRAY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLLECTION_REPLY_MAP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLLECTION_REPLY_SET</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLLECTION_REPLY_ATTRIBUTE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>moduleReplyWithCollection</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>REDISMODULE_POSTPONED_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name></expr>]</index></name> <operator>=</operator>
<call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLLECTION_REPLY_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>emptyarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_MAP</name></expr>:</case>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>emptymap</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>resp</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_SET</name></expr>:</case>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>emptyset</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>resp</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_ATTRIBUTE</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyAttributeLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Invalid module empty reply type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLLECTION_REPLY_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_MAP</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_SET</name></expr>:</case>
<expr_stmt><expr><call><name>addReplySetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_ATTRIBUTE</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyAttributeLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Invalid module reply type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>RM_ReplyWithArray</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>moduleReplyWithCollection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>COLLECTION_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>RM_ReplyWithMap</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>moduleReplyWithCollection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>COLLECTION_REPLY_MAP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>RM_ReplyWithSet</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>moduleReplyWithCollection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>COLLECTION_REPLY_SET</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>RM_ReplyWithAttribute</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>resp</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>moduleReplyWithCollection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>COLLECTION_REPLY_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>RM_ReplyWithNullArray</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyNullArray</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_ReplyWithEmptyArray</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>emptyarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleReplySetCollectionLength</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"API misuse detected in module %s: "</literal>
<literal type="string">"RedisModule_ReplySet*Length() called without previous "</literal>
<literal type="string">"RedisModule_ReplyWith*(ctx,REDISMODULE_POSTPONED_LEN) "</literal>
<literal type="string">"call."</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name><operator>--</operator></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLLECTION_REPLY_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name></expr>]</index></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_MAP</name></expr>:</case>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name></expr>]</index></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_SET</name></expr>:</case>
<expr_stmt><expr><call><name>setDeferredSetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name></expr>]</index></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLLECTION_REPLY_ATTRIBUTE</name></expr>:</case>
<expr_stmt><expr><call><name>setDeferredAttributeLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name></expr>]</index></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Invalid module reply type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>postponed_arrays</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



























<function><type><name>void</name></type> <name>RM_ReplySetArrayLength</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>moduleReplySetCollectionLength</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>COLLECTION_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>RM_ReplySetMapLength</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>moduleReplySetCollectionLength</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>COLLECTION_REPLY_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>RM_ReplySetSetLength</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>moduleReplySetCollectionLength</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>COLLECTION_REPLY_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>RM_ReplySetAttributeLength</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>moduleReplySetCollectionLength</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>COLLECTION_REPLY_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_ReplyWithStringBuffer</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_ReplyWithCString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_ReplyWithString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_ReplyWithEmptyString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>emptybulk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_ReplyWithVerbatimStringType</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyVerbatim</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_ReplyWithVerbatimString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_ReplyWithVerbatimStringType</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"txt"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_ReplyWithNull</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>RM_ReplyWithBool</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBool</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>RM_ReplyWithCallReply</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>resp</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>callReplyIsResp3</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>proto_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><call><name>callReplyGetProto</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyProto</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>RM_ReplyWithDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyDouble</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>RM_ReplyWithBigNumber</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bignum</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBigNum</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bignum</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>RM_ReplyWithLongDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>moduleGetReplyClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyHumanLongDouble</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>










































<function><type><name>int</name></type> <name>RM_Replicate</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>moduleCreateArgvFromUserFormat</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ARGV_NO_AOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>target</name> <operator>|=</operator> <name>PROPAGATE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ARGV_NO_REPLICAS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>target</name> <operator>|=</operator> <name>PROPAGATE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>alsoPropagate</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>RM_ReplicateVerbatim</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>alsoPropagate</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,
<argument><expr><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
























<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>RM_GetClientId</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetClientUserNameById</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>lookupClientByID</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>user</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>modulePopulateClientInfoStructure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>structver</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>structver</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleClientInfoV1</name> <modifier>*</modifier></type><name>ci1</name> <init>= <expr><name>ci</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ci1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ci1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>structver</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDISMODULE_CLIENTINFO_FLAG_MULTI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PUBSUB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDISMODULE_CLIENTINFO_FLAG_PUBSUB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_UNIX_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_TRACKING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDISMODULE_CLIENTINFO_FLAG_TRACKING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_BLOCKED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDISMODULE_CLIENTINFO_FLAG_BLOCKED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connGetType</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONN_TYPE_TLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDISMODULE_CLIENTINFO_FLAG_SSL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>connPeerToString</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name><name>ci1</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ci1</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ci1</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>modulePopulateReplicationInfoStructure</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>structver</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>structver</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleReplicationInfoV1</name> <modifier>*</modifier></type><name>ri1</name> <init>= <expr><name>ri</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ri1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ri1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri1</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>structver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri1</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name><operator>==</operator><name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri1</name><operator>-&gt;</operator><name>masterhost</name></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>?</condition><then> <expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri1</name><operator>-&gt;</operator><name>masterport</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>masterport</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri1</name><operator>-&gt;</operator><name>replid1</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>replid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri1</name><operator>-&gt;</operator><name>replid2</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>replid2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri1</name><operator>-&gt;</operator><name>repl1_offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri1</name><operator>-&gt;</operator><name>repl2_offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>second_replid_offset</name></name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>











































<function><type><name>int</name></type> <name>RM_GetClientInfoById</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>lookupClientByID</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ci</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>structver</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>ci</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>modulePopulateClientInfoStructure</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><name>client</name></expr></argument>,<argument><expr><name>structver</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_PublishMessage</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>receivers</name> <init>= <expr><call><name>pubsubPublishMessage</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterPropagatePublish</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>receivers</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_GetSelectedDb</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>





































































<function><type><name>int</name></type> <name>RM_GetContextFlags</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_DENY_BLOCKING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_DENY_BLOCKING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_REPLICATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>resp</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_RESP3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocked_client</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>blocked_client</name><operator>-&gt;</operator><name>client</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLIENT_DIRTY_CAS</name><operator>|</operator><name>CLIENT_DIRTY_EXEC</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_MULTI_DIRTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>in_script</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_LUA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>in_exec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_MULTI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_CLUSTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>async_loading</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_ASYNC_LOADING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_LOADING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>||</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>repl_slave_ignore_maxmemory</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_MAXMEMORY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>!=</operator> <name>MAXMEMORY_NO_EVICTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_EVICT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_RDB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_MASTER</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_SLAVE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_READONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECT</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>!=</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>getMaxmemoryState</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_OOM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0.75</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_OOM_WARNING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_ACTIVE_CHILD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>in_fork_child</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_FLAGS_IS_CHILD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>





















<function><type><name>int</name></type> <name>RM_AvoidReplicaTraffic</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>checkClientPauseTimeoutAndReturnIfPaused</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>RM_SelectDb</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name>newid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>: <expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>RM_KeyExists</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>LOOKUP_NOTOUCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>value</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>moduleInitKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>kp</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>keyname</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleInitKeyTypeSpecific</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>moduleInitKeyTypeSpecific</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_ZSET</name></expr>:</case> <expr_stmt><expr><call><name>zsetKeyReset</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case> <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>signalready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>















<function><type><name>void</name> <modifier>*</modifier></type><name>RM_OpenKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>&amp;</operator> <name>REDISMODULE_OPEN_KEY_NOTOUCH</name></expr>?</condition><then> <expr><name>LOOKUP_NOTOUCH</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>lookupKeyWriteWithFlags</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleInitKey</name><argument_list>(<argument><expr><name>kp</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_KEY</name></expr></argument>,<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>kp</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>moduleCloseKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>signal</name> <init>= <expr><call><name>SHOULD_SIGNAL_MODIFIED_KEYS</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>signal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleFreeKeyIterator</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_ZSET</name></expr>:</case>
<expr_stmt><expr><call><name>RM_ZsetRangeStop</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>signalready</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>signalKeyAsReady</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>OBJ_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_CloseKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>moduleCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>autoMemoryFreed</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,<argument><expr><name>REDISMODULE_AM_KEY</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_KeyType</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_KEYTYPE_EMPTY</name></expr>;</return></block_content></block></if></if_stmt>


<switch>switch<condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_STRING</name></expr>:</case> <return>return <expr><name>REDISMODULE_KEYTYPE_STRING</name></expr>;</return>
<case>case <expr><name>OBJ_LIST</name></expr>:</case> <return>return <expr><name>REDISMODULE_KEYTYPE_LIST</name></expr>;</return>
<case>case <expr><name>OBJ_SET</name></expr>:</case> <return>return <expr><name>REDISMODULE_KEYTYPE_SET</name></expr>;</return>
<case>case <expr><name>OBJ_ZSET</name></expr>:</case> <return>return <expr><name>REDISMODULE_KEYTYPE_ZSET</name></expr>;</return>
<case>case <expr><name>OBJ_HASH</name></expr>:</case> <return>return <expr><name>REDISMODULE_KEYTYPE_HASH</name></expr>;</return>
<case>case <expr><name>OBJ_MODULE</name></expr>:</case> <return>return <expr><name>REDISMODULE_KEYTYPE_MODULE</name></expr>;</return>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case> <return>return <expr><name>REDISMODULE_KEYTYPE_STREAM</name></expr>;</return>
<default>default:</default> <return>return <expr><name>REDISMODULE_KEYTYPE_EMPTY</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><name>size_t</name></type> <name>RM_ValueLength</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch<condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_STRING</name></expr>:</case> <return>return <expr><call><name>stringObjectLen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBJ_LIST</name></expr>:</case> <return>return <expr><call><name>listTypeLength</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBJ_SET</name></expr>:</case> <return>return <expr><call><name>setTypeSize</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBJ_ZSET</name></expr>:</case> <return>return <expr><call><name>zsetLength</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBJ_HASH</name></expr>:</case> <return>return <expr><call><name>hashTypeLength</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case> <return>return <expr><call><name>streamLength</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_DeleteKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dbDelete</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_UnlinkKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dbAsyncDelete</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>mstime_t</name></type> <name>RM_GetExpire</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>expire</name> <init>= <expr><call><name>getExpire</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_NO_EXPIRE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>expire</name> <operator>-=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>expire</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>expire</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>RM_SetExpire</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>expire</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>expire</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>expire</name> <operator>!=</operator> <name>REDISMODULE_NO_EXPIRE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>!=</operator> <name>REDISMODULE_NO_EXPIRE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expire</name> <operator>+=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>removeExpire</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>mstime_t</name></type> <name>RM_GetAbsExpire</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>expire</name> <init>= <expr><call><name>getExpire</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_NO_EXPIRE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>expire</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>RM_SetAbsExpire</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>expire</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>expire</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>expire</name> <operator>!=</operator> <name>REDISMODULE_NO_EXPIRE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>!=</operator> <name>REDISMODULE_NO_EXPIRE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>removeExpire</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>RM_ResetDataset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>restart_aof</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>restart_aof</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stopAppendOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flushAllDataAndResetRDB</name><argument_list>(<argument><expr><ternary><condition><expr><name>async</name></expr>?</condition><then> <expr><name>EMPTYDB_ASYNC</name></expr></then><else>: <expr><name>EMPTYDB_NO_FLAGS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_enabled</name></name> <operator>&amp;&amp;</operator> <name>restart_aof</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>restartAOFAfterSYNC</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>RM_DbSize</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_RandomKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>dbRandomKey</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetKeyNameFromOptCtx</name><parameter_list>(<parameter><decl><type><name>RedisModuleKeyOptCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>from_key</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetToKeyNameFromOptCtx</name><parameter_list>(<parameter><decl><type><name>RedisModuleKeyOptCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>to_key</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_GetDbIdFromOptCtx</name><parameter_list>(<parameter><decl><type><name>RedisModuleKeyOptCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>from_dbid</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_GetToDbIdFromOptCtx</name><parameter_list>(<parameter><decl><type><name>RedisModuleKeyOptCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>to_dbid</name></name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>RM_StringSet</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RM_DeleteKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setKey</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>SETKEY_NO_SIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






























<function><type><name>char</name> <modifier>*</modifier></type><name>RM_StringDMA</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>emptystring</name> <init>= <expr><literal type="string">"&lt;dma-empty-string&gt;"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>emptystring</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STRING</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>OBJ_ENCODING_RAW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>dbUnshareStringValue</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>RM_StringTruncate</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STRING</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&gt;</operator> <literal type="number">512</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>newlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setKey</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>SETKEY_NO_SIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>dbUnshareStringValue</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&gt;</operator> <name>curlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdsgrowzero</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>newlen</name> <operator>&lt;</operator> <name>curlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdssubstr</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdsRemoveFreeSpace</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

































<function><type><name>int</name></type> <name>moduleListIteratorSeek</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><call><name>listTypeLength</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <operator>-</operator><name>length</name> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EDOM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <call><name>listTypeInitIterator</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>LIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listTypeNext</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>index</name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>dir</name> <init>= <expr><ternary><condition><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name>index</name></expr> ?</condition><then> <expr><name>LIST_TAIL</name></expr> </then><else>: <expr><name>LIST_HEAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listTypeSetIteratorDirection</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>index</name></name> <operator>!=</operator> <name>index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listTypeNext</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>index</name></name> <operator>+=</operator> <ternary><condition><expr><name>dir</name> <operator>==</operator> <name>LIST_HEAD</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>RM_ListPush</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>ele</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>ele</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_LIST</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listTypeReleaseIterator</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleCreateEmptyKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>REDISMODULE_KEYTYPE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listTypePush</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>ele</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>where</name> <operator>==</operator> <name>REDISMODULE_LIST_HEAD</name><operator>)</operator></expr> ?</condition><then> <expr><name>LIST_HEAD</name></expr> </then><else>: <expr><name>LIST_TAIL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_ListPop</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listTypeReleaseIterator</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ele</name> <init>= <expr><call><name>listTypePop</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>where</name> <operator>==</operator> <name>REDISMODULE_LIST_HEAD</name><operator>)</operator></expr> ?</condition><then> <expr><name>LIST_HEAD</name></expr> </then><else>: <expr><name>LIST_TAIL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>decoded</name> <init>= <expr><call><name>getDecodedObject</name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleDelKeyIfEmpty</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>decoded</name></expr>;</return>
</block_content>}</block></function>


















<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_ListGet</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>moduleListIteratorSeek</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>REDISMODULE_READ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><call><name>listTypeGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>decoded</name> <init>= <expr><call><name>getDecodedObject</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>decoded</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>RM_ListSet</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>moduleListIteratorSeek</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>REDISMODULE_WRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listTypeReplace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>entry</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>listTypeReleaseIterator</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>RM_ListInsert</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>RM_ListPush</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>REDISMODULE_LIST_TAIL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>index</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>listTypeLength</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>RM_ListPush</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>REDISMODULE_LIST_TAIL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><call><name>listTypeLength</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>RM_ListPush</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>REDISMODULE_LIST_HEAD</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>moduleListIteratorSeek</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>REDISMODULE_WRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>where</name> <init>= <expr><ternary><condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>LIST_TAIL</name></expr> </then><else>: <expr><name>LIST_HEAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listTypeInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>entry</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>listTypeReleaseIterator</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>RM_ListDelete</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>moduleListIteratorSeek</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>REDISMODULE_WRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listTypeDelete</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleDelKeyIfEmpty</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>moduleZsetAddFlagsToCoreFlags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ZADD_XX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retflags</name> <operator>|=</operator> <name>ZADD_IN_XX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ZADD_NX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retflags</name> <operator>|=</operator> <name>ZADD_IN_NX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ZADD_GT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retflags</name> <operator>|=</operator> <name>ZADD_IN_GT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ZADD_LT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retflags</name> <operator>|=</operator> <name>ZADD_IN_LT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>retflags</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>moduleZsetAddFlagsFromCoreFlags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ZADD_OUT_ADDED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retflags</name> <operator>|=</operator> <name>REDISMODULE_ZADD_ADDED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ZADD_OUT_UPDATED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retflags</name> <operator>|=</operator> <name>REDISMODULE_ZADD_UPDATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ZADD_OUT_NOP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retflags</name> <operator>|=</operator> <name>REDISMODULE_ZADD_NOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>retflags</name></expr>;</return>
</block_content>}</block></function>

































<function><type><name>int</name></type> <name>RM_ZsetAdd</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>ele</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagsptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>out_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleCreateEmptyKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>REDISMODULE_KEYTYPE_ZSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flagsptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>in_flags</name> <operator>=</operator> <call><name>moduleZsetAddFlagsToCoreFlags</name><argument_list>(<argument><expr><operator>*</operator><name>flagsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zsetAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><name>score</name></expr></argument>,<argument><expr><name><name>ele</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>in_flags</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>out_flags</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flagsptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flagsptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flagsptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flagsptr</name> <operator>=</operator> <call><name>moduleZsetAddFlagsFromCoreFlags</name><argument_list>(<argument><expr><name>out_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>RM_ZsetIncrby</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>ele</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagsptr</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>newscore</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>out_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleCreateEmptyKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>REDISMODULE_KEYTYPE_ZSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flagsptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>in_flags</name> <operator>=</operator> <call><name>moduleZsetAddFlagsToCoreFlags</name><argument_list>(<argument><expr><operator>*</operator><name>flagsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>in_flags</name> <operator>|=</operator> <name>ZADD_IN_INCR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zsetAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><name>score</name></expr></argument>,<argument><expr><name><name>ele</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>in_flags</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>out_flags</name></expr></argument>,<argument><expr><name>newscore</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flagsptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flagsptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flagsptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flagsptr</name> <operator>=</operator> <call><name>moduleZsetAddFlagsFromCoreFlags</name><argument_list>(<argument><expr><name>out_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type> <name>RM_ZsetRem</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>ele</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>deleted</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>zsetDel</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><name><name>ele</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deleted</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>deleted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>moduleDelKeyIfEmpty</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deleted</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>deleted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>RM_ZsetScore</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>ele</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>score</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zsetScore</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><name><name>ele</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>score</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>zsetKeyReset</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REDISMODULE_ZSET_RANGE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_ZsetRangeStop</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_LEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zslFreeLexRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>lrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>zsetKeyReset</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_ZsetRangeEndReached</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>zsetInitScoreRange</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RM_ZsetRangeStop</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REDISMODULE_ZSET_RANGE_SCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>zrangespec</name> <modifier>*</modifier></type><name>zrs</name> <init>= <expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>zrs</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zrs</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zrs</name><operator>-&gt;</operator><name>minex</name></name> <operator>=</operator> <name>minex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zrs</name><operator>-&gt;</operator><name>maxex</name></name> <operator>=</operator> <name>maxex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><call><name>zzlFirstInRange</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>zrs</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>zzlLastInRange</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>zrs</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name> <init>= <expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><call><name>zslFirstInRange</name><argument_list>(<argument><expr><name>zsl</name></expr></argument>,<argument><expr><name>zrs</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>zslLastInRange</name><argument_list>(<argument><expr><name>zsl</name></expr></argument>,<argument><expr><name>zrs</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unsupported zset encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>RM_ZsetFirstInScoreRange</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zsetInitScoreRange</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>min</name></expr></argument>,<argument><expr><name>max</name></expr></argument>,<argument><expr><name>minex</name></expr></argument>,<argument><expr><name>maxex</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_ZsetLastInScoreRange</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zsetInitScoreRange</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>min</name></expr></argument>,<argument><expr><name>max</name></expr></argument>,<argument><expr><name>minex</name></expr></argument>,<argument><expr><name>maxex</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>zsetInitLexRange</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RM_ZsetRangeStop</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>zlrs</name> <init>= <expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>lrs</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zslParseLexRange</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>zlrs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REDISMODULE_ZSET_RANGE_LEX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><call><name>zzlFirstInLexRange</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>zlrs</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>zzlLastInLexRange</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>zlrs</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name> <init>= <expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><call><name>zslFirstInLexRange</name><argument_list>(<argument><expr><name>zsl</name></expr></argument>,<argument><expr><name>zlrs</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>zslLastInLexRange</name><argument_list>(<argument><expr><name>zsl</name></expr></argument>,<argument><expr><name>zlrs</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unsupported zset encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>RM_ZsetFirstInLexRange</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zsetInitLexRange</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>min</name></expr></argument>,<argument><expr><name>max</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_ZsetLastInLexRange</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zsetInitLexRange</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>min</name></expr></argument>,<argument><expr><name>max</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_ZsetRangeCurrentElement</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>score</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>eptr</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>ele</name> <init>= <expr><call><name>lpGetObject</name><argument_list>(<argument><expr><name>eptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sptr</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>score</name> <operator>=</operator> <call><name>zzlGetScore</name><argument_list>(<argument><expr><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>score</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>score</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>score</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unsupported zset encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_ZsetRangeNext</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>||</operator> <operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>eptr</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_SCORE</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>saved_next</name> <init>= <expr><name>next</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>score</name> <init>= <expr><call><name>zzlGetScore</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zslValueLteMax</name><argument_list>(<argument><expr><name>score</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>rs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name>saved_next</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_LEX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zzlLexValueLteMax</name><argument_list>(<argument><expr><name>next</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>lrs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>forward</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_SCORE</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>zslValueLteMax</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>score</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>rs</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_LEX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zslLexValueLteMax</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>lrs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unsupported zset encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_ZsetRangePrev</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>||</operator> <operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>eptr</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>lpPrev</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>lpPrev</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_SCORE</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>saved_prev</name> <init>= <expr><name>prev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>score</name> <init>= <expr><call><name>zzlGetScore</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zslValueGteMin</name><argument_list>(<argument><expr><name>score</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>rs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>saved_prev</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_LEX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zzlLexValueGteMin</name><argument_list>(<argument><expr><name>prev</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>lrs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>backward</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_SCORE</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>zslValueGteMin</name><argument_list>(<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>score</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>rs</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_ZSET_RANGE_LEX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zslLexValueGteMin</name><argument_list>(<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>lrs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>er</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zset</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unsupported zset encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>










































































<function><type><name>int</name></type> <name>RM_HashSet</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>REDISMODULE_HASH_NX</name> <operator>|</operator>
<name>REDISMODULE_HASH_XX</name> <operator>|</operator>
<name>REDISMODULE_HASH_CFIELDS</name> <operator>|</operator>
<name>REDISMODULE_HASH_COUNT_ALL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleCreateEmptyKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>REDISMODULE_KEYTYPE_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>field</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_CFIELDS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cfield</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cfield</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>createRawStringObject</name><argument_list>(<argument><expr><name>cfield</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cfield</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>RedisModuleString</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>RedisModuleString</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REDISMODULE_HASH_XX</name><operator>|</operator><name>REDISMODULE_HASH_NX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exists</name> <init>= <expr><call><name>hashTypeExists</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_XX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>exists</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_NX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>exists</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_CFIELDS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>REDISMODULE_HASH_DELETE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>hashTypeDelete</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_CFIELDS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>low_flags</name> <init>= <expr><name>HASH_SET_COPY</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_CFIELDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>low_flags</name> <operator>|=</operator> <name>HASH_SET_TAKE_FIELD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>field</name></expr>,<expr><name>value</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hashTypeTryConversion</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>updated</name> <init>= <expr><call><name>hashTypeSet</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>low_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_COUNT_ALL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>updated</name></expr></else></ternary></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_CFIELDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleDelKeyIfEmpty</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>










































<function><type><name>int</name></type> <name>RM_HashGet</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_HASH</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>field</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>valueptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>existsptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_CFIELDS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cfield</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cfield</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>createRawStringObject</name><argument_list>(<argument><expr><name>cfield</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cfield</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>RedisModuleString</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_EXISTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>existsptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>existsptr</name> <operator>=</operator> <call><name>hashTypeExists</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><name><name>field</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>existsptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>valueptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>RedisModuleString</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>valueptr</name> <operator>=</operator> <call><name>hashTypeGetValueObject</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><name><name>field</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>valueptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>decoded</name> <init>= <expr><call><name>getDecodedObject</name><argument_list>(<argument><expr><operator>*</operator><name>valueptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><operator>*</operator><name>valueptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>valueptr</name> <operator>=</operator> <name>decoded</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>valueptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><operator>*</operator><name>valueptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>valueptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_HASH_CFIELDS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>










































<function><type><name>int</name></type> <name>RM_StreamAdd</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>RedisModuleStreamID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>numfields</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>(</operator><name>numfields</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>argv</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>REDISMODULE_STREAM_ADD_AUTOID</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_STREAM_ADD_AUTOID</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>id</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_STREAM_ADD_AUTOID</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>id</name><operator>-&gt;</operator><name>ms</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>id</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EDOM</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>created</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleCreateEmptyKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>REDISMODULE_KEYTYPE_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>created</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>ms</name></name> <operator>==</operator> <name>UINT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>seq</name></name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFBIG</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>streamID</name></type> <name>added_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamID</name></type> <name>use_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamID</name> <modifier>*</modifier></type><name>use_id_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_STREAM_ADD_AUTOID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>use_id</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>ms</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>use_id</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_id_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>use_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streamAppendItem</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>numfields</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>added_id</name></expr></argument>,<argument><expr><name>use_id_ptr</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>



<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>created</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>signalready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>ms</name></name> <operator>=</operator> <name><name>added_id</name><operator>.</operator><name>ms</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name><name>added_id</name><operator>.</operator><name>seq</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type> <name>RM_StreamDelete</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleStreamID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator>
<name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamID</name></type> <name>streamid</name> <init>= <expr><block>{<expr><name><name>id</name><operator>-&gt;</operator><name>ms</name></name></expr>, <expr><name><name>id</name><operator>-&gt;</operator><name>seq</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>streamDeleteItem</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>streamid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


















































<function><type><name>int</name></type> <name>RM_StreamIteratorStart</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>RedisModuleStreamID</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>RedisModuleStreamID</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>REDISMODULE_STREAM_ITERATOR_EXCLUSIVE</name> <operator>|</operator>
<name>REDISMODULE_STREAM_ITERATOR_REVERSE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>streamID</name></type> <name>lower</name></decl>, <decl><type ref="prev"/><name>upper</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lower</name> <operator>=</operator> <operator>(</operator><name>streamID</name><operator>)</operator><block>{<expr><name><name>start</name><operator>-&gt;</operator><name>ms</name></name></expr>, <expr><name><name>start</name><operator>-&gt;</operator><name>seq</name></name></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>upper</name> <operator>=</operator> <operator>(</operator><name>streamID</name><operator>)</operator><block>{<expr><name><name>end</name><operator>-&gt;</operator><name>ms</name></name></expr>, <expr><name><name>end</name><operator>-&gt;</operator><name>seq</name></name></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_STREAM_ITERATOR_EXCLUSIVE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>&amp;&amp;</operator> <call><name>streamIncrID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lower</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>end</name> <operator>&amp;&amp;</operator> <call><name>streamDecrID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>upper</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EDOM</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rev</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_STREAM_ITERATOR_REVERSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamIterator</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>streamIteratorStart</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>start</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>lower</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>end</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>upper</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>si</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>numfieldsleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>RM_StreamIteratorStop</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


























<function><type><name>int</name></type> <name>RM_StreamIteratorNextID</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleStreamID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>numfields</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>streamIterator</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>num_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>numfieldsleft</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamID</name> <modifier>*</modifier></type><name>streamid_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>streamIteratorGetID</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>streamid_ptr</name></expr></argument>, <argument><expr><name>num_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>ms</name></name> <operator>=</operator> <name><name>streamid_ptr</name><operator>-&gt;</operator><name>ms</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name><name>streamid_ptr</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numfields</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>numfields</name> <operator>=</operator> <operator>*</operator><name>num_ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>numfieldsleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


























<function><type><name>int</name></type> <name>RM_StreamIteratorNextField</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>field_ptr</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>value_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>numfieldsleft</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>streamIterator</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>field</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>field_len</name></decl>, <decl><type ref="prev"/><name>value_len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>streamIteratorGetField</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>field_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>field_ptr</name> <operator>=</operator> <call><name>createRawStringObject</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>field</name></expr></argument>, <argument><expr><name>field_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>, <argument><expr><operator>*</operator><name>field_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value_ptr</name> <operator>=</operator> <call><name>createRawStringObject</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>, <argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>numfieldsleft</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>RM_StreamIteratorDelete</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name><operator>.</operator><name>ms</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name><operator>.</operator><name>seq</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>streamIterator</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>streamIteratorRemoveEntry</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>currentid</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>stream</name><operator>.</operator><name>numfieldsleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>long</name> <name>long</name></type> <name>RM_StreamTrimByLength</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>REDISMODULE_STREAM_TRIM_APPROX</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>approx</name> <init>= <expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_STREAM_TRIM_APPROX</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>streamTrimByLength</name><argument_list>(<argument><expr><operator>(</operator><name>stream</name> <operator>*</operator><operator>)</operator><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>approx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><name>long</name> <name>long</name></type> <name>RM_StreamTrimByID</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>RedisModuleStreamID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>REDISMODULE_STREAM_TRIM_APPROX</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name>id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>approx</name> <init>= <expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_STREAM_TRIM_APPROX</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamID</name></type> <name>minid</name> <init>= <expr><operator>(</operator><name>streamID</name><operator>)</operator><block>{<expr><name><name>id</name><operator>-&gt;</operator><name>ms</name></name></expr>, <expr><name><name>id</name><operator>-&gt;</operator><name>seq</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>streamTrimByID</name><argument_list>(<argument><expr><operator>(</operator><name>stream</name> <operator>*</operator><operator>)</operator><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>minid</name></expr></argument>, <argument><expr><name>approx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function_decl><type><name>void</name></type> <name>moduleParseCallReply_Int</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleParseCallReply_BulkString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleParseCallReply_SimpleString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleParseCallReply_Array</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type> <name>RM_FreeCallReply</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>callReplyGetPrivateData</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>freeCallReply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>autoMemoryFreed</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_REPLY</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>RM_CallReplyType</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyType</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>RM_CallReplyLength</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetLen</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>RM_CallReplyArrayElement</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetArrayElement</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>long</name> <name>long</name></type> <name>RM_CallReplyInteger</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetLongLong</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>double</name></type> <name>RM_CallReplyDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetDouble</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RM_CallReplyBigNumber</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetBigNumber</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RM_CallReplyVerbatim</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetVerbatim</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_CallReplyBool</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetBool</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>RM_CallReplySetElement</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetSetElement</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>RM_CallReplyMapElement</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>callReplyGetMapElement</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>RM_CallReplyAttribute</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetAttribute</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>RM_CallReplyAttributeElement</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>callReplyGetAttributeElement</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RM_CallReplyStringPtr</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>private_len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>&amp;</operator><name>private_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>callReplyGetString</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CreateStringFromCallReply</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><call><name>callReplyGetPrivateData</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><call><name>callReplyType</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDISMODULE_REPLY_STRING</name></expr>:</case>
<case>case <expr><name>REDISMODULE_REPLY_ERROR</name></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>callReplyGetString</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>RM_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>REDISMODULE_REPLY_INTEGER</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><call><name>callReplyGetLongLong</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>RM_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument> ,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

















<function><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>moduleCreateArgvFromUserFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argcp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argvlenp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>argv_size</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>argv_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cstr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <name>OBJ_STATIC_REFCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name> <init>= <macro><name>va_arg</name><argument_list>(<argument>ap</argument>,<argument>long long</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>vlen</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>argv_size</name> <operator>+=</operator> <name>vlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>flags</name><operator>)</operator> <operator>|=</operator> <name>REDISMODULE_ARGV_REPLICATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>flags</name><operator>)</operator> <operator>|=</operator> <name>REDISMODULE_ARGV_NO_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>flags</name><operator>)</operator> <operator>|=</operator> <name>REDISMODULE_ARGV_NO_REPLICAS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'3'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>flags</name><operator>)</operator> <operator>|=</operator> <name>REDISMODULE_ARGV_RESP_3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>flags</name><operator>)</operator> <operator>|=</operator> <name>REDISMODULE_ARGV_RESP_AUTO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>flags</name><operator>)</operator> <operator>|=</operator> <name>REDISMODULE_ARGV_CHECK_ACL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>fmterr</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>argcp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>argcp</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argvlenp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>argvlenp</name> <operator>=</operator> <name>argv_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>argv</name></expr>;</return>

<label><name>fmterr</name>:</label>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

















































<function><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>RM_Call</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>argv_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>replicate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>moduleCreateArgvFromUserFormat</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argv_len</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>replicate</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ARGV_REPLICATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>moduleAllocTempClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_DENY_BLOCKING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argv_len</name></name> <operator>=</operator> <name>argv_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ARGV_RESP_3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ARGV_RESP_AUTO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>resp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>in_call</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>moduleCallCommandFilters</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>lookupCommand</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>lastcmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>!=</operator> <name>argc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>&lt;</operator> <operator>-</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ARGV_CHECK_ACL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>acl_errpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acl_retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>user</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>acl_retval</name> <operator>=</operator> <call><name>ACLCheckAllUserCommandPerm</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>acl_errpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_retval</name> <operator>!=</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>object</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>acl_retval</name> <operator>==</operator> <name>ACL_DENIED_CMD</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>acl_errpos</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addACLLogEntry</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>acl_retval</name></expr></argument>, <argument><expr><name>ACL_LOG_CTX_MODULE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error_code</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_READONLY</name><operator>|</operator><name>CLIENT_ASKING</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLIENT_READONLY</name><operator>|</operator><name>CLIENT_ASKING</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getNodeByQuery</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error_code</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_DOWN_RO_STATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EROFS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_DOWN_STATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENETDOWN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>prev_replication_allowed</name> <init>= <expr><name><name>server</name><operator>.</operator><name>replication_allowed</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>replication_allowed</name></name> <operator>=</operator> <name>replicate</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>replication_allowed</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>call_flags</name> <init>= <expr><name>CMD_CALL_SLOWLOG</name> <operator>|</operator> <name>CMD_CALL_STATS</name> <operator>|</operator> <name>CMD_CALL_FROM_MODULE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>replicate</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ARGV_NO_AOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>call_flags</name> <operator>|=</operator> <name>CMD_CALL_PROPAGATE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_ARGV_NO_REPLICAS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>call_flags</name> <operator>|=</operator> <name>CMD_CALL_PROPAGATE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>old_client</name> <init>= <expr><name><name>server</name><operator>.</operator><name>current_client</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>call_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>=</operator> <name>old_client</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>replication_allowed</name></name> <operator>=</operator> <name>prev_replication_allowed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_BLOCKED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>sds</name></type> <name>proto</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clientReplyBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>,<argument><expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>callReplyCreate</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_REPLY</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>in_call</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>moduleReleaseTempClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RM_CallReplyProto</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetProto</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


































<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ModuleTypeNameCharSet</name> <init>=
<expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal>
<literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal>
<literal type="string">"0123456789-_"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>uint64_t</name></type> <name>moduleTypeEncodeId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encver</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cset</name> <init>= <expr><name>ModuleTypeNameCharSet</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>encver</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>encver</name></expr></argument> &gt;</argument_list></name> <literal type="number">1023</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>cset</name></expr></argument>,<argument><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pos</name> <init>= <expr><name>p</name><operator>-</operator><name>cset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>id</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>id</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <name>encver</name></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>moduleType</name> <modifier>*</modifier></type><name>moduleTypeLookupModuleByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>types</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mt</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_LOOKUP_CACHE_SIZE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><name>moduleType</name> <modifier>*</modifier></type><name>moduleTypeLookupModuleByID</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
}</block> <decl><name><name>cache</name><index>[<expr><name>MODULE_LOOKUP_CACHE_SIZE</name></expr>]</index></name></decl>;</struct>


<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MODULE_LOOKUP_CACHE_SIZE</name> <operator>&amp;&amp;</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mt</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mt</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>


<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>mt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>types</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>this_mt</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>this_mt</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>==</operator> <name>id</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mt</name> <operator>=</operator> <name>this_mt</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mt</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>MODULE_LOOKUP_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mt</name> <operator>=</operator> <name>mt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>mt</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>moduleTypeNameByID</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>moduleid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cset</name> <init>= <expr><name>ModuleTypeNameCharSet</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>name</name><operator>+</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>moduleid</name> <operator>&gt;&gt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>--</operator> <operator>=</operator> <name><name>cset</name><index>[<expr><name>moduleid</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>moduleid</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>moduleTypeModuleName</name><parameter_list>(<parameter><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mt</name> <operator>||</operator> <operator>!</operator><name><name>mt</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>mt</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>robj</name> <modifier>*</modifier></type><name>moduleTypeDupOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>fromkey</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>tokey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>todb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mt</name><operator>-&gt;</operator><name>copy</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mt</name><operator>-&gt;</operator><name>copy2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"not supported for this module key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>copy2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleKeyOptCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><name>fromkey</name></expr>, <expr><name>tokey</name></expr>, <expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>, <expr><name>todb</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name><name>mt</name><operator>-&gt;</operator><name>copy2</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name><name>mt</name><operator>-&gt;</operator><name>copy</name></name><argument_list>(<argument><expr><name>fromkey</name></expr></argument>, <argument><expr><name>tokey</name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"module key failed to copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>createModuleObject</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















































































































<function><type><name>moduleType</name> <modifier>*</modifier></type><name>RM_CreateDataType</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encver</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>typemethods_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><call><name>moduleTypeEncodeId</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>encver</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>moduleTypeLookupModuleByName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>typemethods_version</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name><operator>*</operator><operator>)</operator><name>typemethods_ptr</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>typemethods_version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<struct>struct <name>typemethods</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeLoadFunc</name></type> <name>rdb_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeSaveFunc</name></type> <name>rdb_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeRewriteFunc</name></type> <name>aof_rewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeMemUsageFunc</name></type> <name>mem_usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeDigestFunc</name></type> <name>digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeFreeFunc</name></type> <name>free</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>moduleTypeAuxLoadFunc</name></type> <name>aux_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeAuxSaveFunc</name></type> <name>aux_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aux_save_triggers</name></decl>;</decl_stmt>
}</block> <decl><name>v2</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>moduleTypeFreeEffortFunc</name></type> <name>free_effort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeUnlinkFunc</name></type> <name>unlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeCopyFunc</name></type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeDefragFunc</name></type> <name>defrag</name></decl>;</decl_stmt>
}</block> <decl><name>v3</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>moduleTypeMemUsageFunc2</name></type> <name>mem_usage2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeFreeEffortFunc2</name></type> <name>free_effort2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeUnlinkFunc2</name></type> <name>unlink2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeCopyFunc2</name></type> <name>copy2</name></decl>;</decl_stmt>
}</block> <decl><name>v4</name></decl>;</struct>
}</block> <decl><modifier>*</modifier><name>tms</name> <init>= <expr><operator>(</operator>struct <name>typemethods</name><operator>*</operator><operator>)</operator> <name>typemethods_ptr</name></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>rdb_load</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>rdb_load</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>rdb_save</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>rdb_save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>aof_rewrite</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>aof_rewrite</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>mem_usage</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>mem_usage</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>digest</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>free</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tms</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>aux_load</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v2</name><operator>.</operator><name>aux_load</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>aux_save</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v2</name><operator>.</operator><name>aux_save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>aux_save_triggers</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v2</name><operator>.</operator><name>aux_save_triggers</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tms</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>free_effort</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v3</name><operator>.</operator><name>free_effort</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>unlink</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v3</name><operator>.</operator><name>unlink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>copy</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v3</name><operator>.</operator><name>copy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>defrag</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v3</name><operator>.</operator><name>defrag</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tms</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>mem_usage2</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v4</name><operator>.</operator><name>mem_usage2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>unlink2</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v4</name><operator>.</operator><name>unlink2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>free_effort2</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v4</name><operator>.</operator><name>free_effort2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>copy2</name></name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>v4</name><operator>.</operator><name>copy2</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>types</name></name></expr></argument>,<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mt</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_ModuleTypeSetValue</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RM_DeleteKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>createModuleObject</name><argument_list>(<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setKey</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>SETKEY_NO_SIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>moduleType</name> <modifier>*</modifier></type><name>RM_ModuleTypeGetType</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>RM_KeyType</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_KEYTYPE_MODULE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name> <modifier>*</modifier></type><name>RM_ModuleTypeGetValue</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>RM_KeyType</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_KEYTYPE_MODULE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>moduleRDBLoadError</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>REDISMODULE_OPTIONS_HANDLE_IO_ERRORS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(
<argument><expr><literal type="string">"Error loading data from RDB (short read or EOF). "</literal>
<literal type="string">"Read performed by module '%s' about type '%s' "</literal>
<literal type="string">"after reading '%llu' bytes of a value "</literal>
<literal type="string">"for key named: '%s'."</literal></expr></argument>,
<argument><expr><name><name>io</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>io</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>io</name><operator>-&gt;</operator><name>key</name></name></expr>?</condition><then> <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>io</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>moduleAllDatatypesHandleErrors</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>module</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>REDISMODULE_OPTIONS_HANDLE_IO_ERRORS</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>moduleAllModulesHandleReplAsyncLoad</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>module</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>REDISMODULE_OPTIONS_HANDLE_REPL_ASYNC_LOAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_IsIOError</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_SaveUnsigned</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>RDB_MODULE_OPCODE_UINT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<return>return;</return>

<label><name>saveerr</name>:</label>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>uint64_t</name></type> <name>RM_LoadUnsigned</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ver</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>opcode</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_UINT</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbLoadLenByRef</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>

<label><name>loaderr</name>:</label>
<expr_stmt><expr><call><name>moduleRDBLoadError</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_SaveSigned</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<union>union <block>{<decl_stmt><decl><type><name>uint64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>;</decl_stmt>}</block> <decl><name>conv</name></decl>;</union>
<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RM_SaveUnsigned</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name><name>conv</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int64_t</name></type> <name>RM_LoadSigned</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<union>union <block>{<decl_stmt><decl><type><name>uint64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>;</decl_stmt>}</block> <decl><name>conv</name></decl>;</union>
<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>RM_LoadUnsigned</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conv</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>RM_SaveString</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>RDB_MODULE_OPCODE_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveStringObject</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<return>return;</return>

<label><name>saveerr</name>:</label>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>RM_SaveStringBuffer</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>RDB_MODULE_OPCODE_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<return>return;</return>

<label><name>saveerr</name>:</label>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>moduleLoadString</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plain</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ver</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>opcode</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_STRING</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>plain</name></expr> ?</condition><then> <expr><name>RDB_LOAD_PLAIN</name></expr> </then><else>: <expr><name>RDB_LOAD_NONE</name></expr></else></ternary></expr></argument>, <argument><expr><name>lenptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>

<label><name>loaderr</name>:</label>
<expr_stmt><expr><call><name>moduleRDBLoadError</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_LoadString</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>moduleLoadString</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>char</name> <modifier>*</modifier></type><name>RM_LoadStringBuffer</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>moduleLoadString</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>lenptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_SaveDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>RDB_MODULE_OPCODE_DOUBLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveBinaryDoubleValue</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<return>return;</return>

<label><name>saveerr</name>:</label>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>double</name></type> <name>RM_LoadDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ver</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>opcode</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_DOUBLE</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbLoadBinaryDoubleValue</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>

<label><name>loaderr</name>:</label>
<expr_stmt><expr><call><name>moduleRDBLoadError</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_SaveFloat</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>RDB_MODULE_OPCODE_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveBinaryFloatValue</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>saveerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<return>return;</return>

<label><name>saveerr</name>:</label>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>float</name></type> <name>RM_LoadFloat</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ver</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>opcode</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_FLOAT</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbLoadBinaryFloatValue</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>

<label><name>loaderr</name>:</label>
<expr_stmt><expr><call><name>moduleRDBLoadError</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_SaveLongDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LONG_DOUBLE_CHARS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>ld2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><name>LD_STR_HEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RM_SaveStringBuffer</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>long</name> <name>double</name></type> <name>RM_LoadLongDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>RM_LoadStringBuffer</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>string2ld</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RM_Free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ssize_t</name></type> <name>rdbSaveModulesAux</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>types</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mt</name><operator>-&gt;</operator><name>aux_save</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>aux_save_triggers</name></name> <operator>&amp;</operator> <name>when</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><call><name>rdbSaveSingleModuleAux</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>when</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>total_written</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>total_written</name></expr>;</return>
</block_content>}</block></function>











































<function><type><name>void</name></type> <name>RM_DigestAddStringBuffer</name><parameter_list>(<parameter><decl><type><name>RedisModuleDigest</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ele</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>o</name></name></expr></argument>,<argument><expr><name>ele</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>RM_DigestAddLongLong</name><parameter_list>(<parameter><decl><type><name>RedisModuleDigest</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>o</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_DigestEndSequence</name><parameter_list>(<parameter><decl><type><name>RedisModuleDigest</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>x</name></name></expr></argument>,<argument><expr><name><name>md</name><operator>-&gt;</operator><name>o</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>o</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>o</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>o</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><name>void</name> <modifier>*</modifier></type><name>RM_LoadDataTypeFromStringEncver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encver</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rio</name></type> <name>payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rioInitWithBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><operator>(</operator><name>moduleType</name> <operator>*</operator><operator>)</operator><name>mt</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>io</name><operator>.</operator><name>ver</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>mt</name><operator>-&gt;</operator><name>rdb_load</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name>encver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type><name>RM_LoadDataTypeFromString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_LoadDataTypeFromStringEncver</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_SaveDataTypeToString</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rio</name></type> <name>payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rioInitWithBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>,<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><operator>(</operator><name>moduleType</name> <operator>*</operator><operator>)</operator><name>mt</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>rdb_save</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>error</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetKeyNameFromDigest</name><parameter_list>(<parameter><decl><type><name>RedisModuleDigest</name> <modifier>*</modifier></type><name>dig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>dig</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_GetDbIdFromDigest</name><parameter_list>(<parameter><decl><type><name>RedisModuleDigest</name> <modifier>*</modifier></type><name>dig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>dig</name><operator>-&gt;</operator><name>dbid</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>RM_EmitAOF</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Fatal: AOF method for module data type '%s' tried to "</literal>
<literal type="string">"emit unknown command '%s'"</literal></expr></argument>,
<argument><expr><name><name>io</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>moduleCreateArgvFromUserFormat</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Fatal: AOF method for module data type '%s' tried to "</literal>
<literal type="string">"call RedisModule_EmitAOF() with wrong format specifiers '%s'"</literal></expr></argument>,
<argument><expr><name><name>io</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>&amp;&amp;</operator> <call><name>rioWriteBulkCount</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>,<argument><expr><literal type="char">'*'</literal></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>&amp;&amp;</operator> <call><name>rioWriteBulkObject</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>rio</name></name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>





<function><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>RM_GetContextFromIO</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>io</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RedisModuleCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetKeyNameFromIO</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetKeyNameFromModuleKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>key</name></expr> ?</condition><then> <expr><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_GetDbIdFromModuleKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>key</name></expr> ?</condition><then> <expr><name><name>key</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_GetDbIdFromIO</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>dbid</name></name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>moduleLogRaw</name><parameter_list>(<parameter><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>levelstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>LOG_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>levelstr</name></expr></argument>,<argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LL_DEBUG</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>levelstr</name></expr></argument>,<argument><expr><literal type="string">"verbose"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LL_VERBOSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>levelstr</name></expr></argument>,<argument><expr><literal type="string">"notice"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LL_NOTICE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>levelstr</name></expr></argument>,<argument><expr><literal type="string">"warning"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LL_WARNING</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LL_VERBOSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>verbosity</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"&lt;%s&gt; "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>module</name></expr>?</condition><then> <expr><name><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><literal type="string">"module"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name> <operator>+</operator> <name>name_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>name_len</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>level</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><name>void</name></type> <name>RM_Log</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>levelstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleLogRaw</name><argument_list>(<argument><expr><ternary><condition><expr><name>ctx</name></expr>?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,<argument><expr><name>levelstr</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>RM_LogIOError</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>levelstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleLogRaw</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>module</name></name></expr></argument>,<argument><expr><name>levelstr</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>RM__Assert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>estr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_serverAssert</name><argument_list>(<argument><expr><name>estr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_LatencyAddSample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>latency</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>latency</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>latency_monitor_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>latencyAddSample</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




















<function><type><name>void</name></type> <name>unblockClientFromModule</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>disconnect_callback</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_privdata</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bc</name><operator>-&gt;</operator><name>disconnect_callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
















<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>blocked_on_keys</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bc</name><operator>-&gt;</operator><name>unblocked</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>moduleUnblockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





















<function><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>moduleBlockClient</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>reply_callback</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>timeout_callback</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_privdata</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout_ms</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numkeys</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>islua</name> <init>= <expr><name><name>server</name><operator>.</operator><name>in_script</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ismulti</name> <init>= <expr><name><name>server</name><operator>.</operator><name>in_exec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RedisModuleBlockedClient</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>blocked_clients</name></name><operator>++</operator></expr>;</expr_stmt>





<decl_stmt><decl><type><name>mstime_t</name></type> <name>timeout</name> <init>= <expr><ternary><condition><expr><name>timeout_ms</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call><operator>+</operator><name>timeout_ms</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>islua</name> <operator>||</operator> <name>ismulti</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>reply_callback</name></name> <operator>=</operator> <name>reply_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>timeout_callback</name></name> <operator>=</operator> <name>timeout_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>disconnect_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>free_privdata</name></name> <operator>=</operator> <name>free_privdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name> <operator>=</operator> <name>privdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>reply_client</name></name> <operator>=</operator> <call><name>moduleAllocTempClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>thread_safe_ctx_client</name></name> <operator>=</operator> <call><name>moduleAllocTempClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>reply_client</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>resp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>blocked_on_keys</name></name> <operator>=</operator> <name>keys</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>unblocked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>background_timer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>background_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>islua</name> <operator>||</operator> <name>ismulti</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>islua</name></expr> ?</condition><then>
<expr><literal type="string">"Blocking module command called from Lua script"</literal></expr> </then><else>:
<expr><literal type="string">"Blocking module command called from transaction"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>keys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blockForKeys</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>BLOCKED_MODULE</name></expr></argument>,<argument><expr><name>keys</name></expr></argument>,<argument><expr><name>numkeys</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>timeout</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>BLOCKED_MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>bc</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>moduleTryServeClientBlockedOnKey</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>served</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>unblocked</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_BLOCKED_REPLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_ready_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_privdata</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_client</name></name> <operator>=</operator> <name>bc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>bc</name><operator>-&gt;</operator><name>reply_callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>served</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>served</name></expr>;</return>
</block_content>}</block></function>








































<function><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>RM_BlockClient</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>reply_callback</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>timeout_callback</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_privdata</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>moduleBlockClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply_callback</name></expr></argument>,<argument><expr><name>timeout_callback</name></expr></argument>,<argument><expr><name>free_privdata</name></expr></argument>,<argument><expr><name>timeout_ms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



























































<function><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>RM_BlockClientOnKeys</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>reply_callback</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCmdFunc</name></type> <name>timeout_callback</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_privdata</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout_ms</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numkeys</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>moduleBlockClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply_callback</name></expr></argument>,<argument><expr><name>timeout_callback</name></expr></argument>,<argument><expr><name>free_privdata</name></expr></argument>,<argument><expr><name>timeout_ms</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>,<argument><expr><name>numkeys</name></expr></argument>,<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>RM_SignalKeyAsReady</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>signalKeyAsReady</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>OBJ_MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>moduleUnblockClientByHandle</name><parameter_list>(<parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleUnblockedClientsMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bc</name><operator>-&gt;</operator><name>blocked_on_keys</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name> <operator>=</operator> <name>privdata</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>unblocked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>moduleUnblockedClients</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>module_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"A"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>moduleUnblockedClients</name></expr></argument>,<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleUnblockedClientsMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>moduleUnblockClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleUnblockClientByHandle</name><argument_list>(<argument><expr><name>bc</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>moduleClientIsBlockedOnKeys</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>bc</name><operator>-&gt;</operator><name>blocked_on_keys</name></name></expr>;</return>
</block_content>}</block></function>




















<function><type><name>int</name></type> <name>RM_UnblockClient</name><parameter_list>(<parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>blocked_on_keys</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>timeout_callback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>unblocked</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleBlockedClientTimedOut</name><argument_list>(<argument><expr><name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>moduleUnblockClientByHandle</name><argument_list>(<argument><expr><name>bc</name></expr></argument>,<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_AbortBlock</name><parameter_list>(<parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>reply_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>disconnect_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>RM_UnblockClient</name><argument_list>(<argument><expr><name>bc</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><name>void</name></type> <name>RM_SetDisconnectCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>RedisModuleDisconnectFunc</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>disconnect_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>moduleHandleBlockedClients</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleUnblockedClientsMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>moduleUnblockedClients</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name>moduleUnblockedClients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bc</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>moduleUnblockedClients</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleUnblockedClientsMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<decl_stmt><decl><type><name>uint64_t</name></type> <name>reply_us</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bc</name><operator>-&gt;</operator><name>blocked_on_keys</name></name> <operator>&amp;&amp;</operator> <name><name>bc</name><operator>-&gt;</operator><name>reply_callback</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_BLOCKED_REPLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_privdata</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_ready_key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_client</name></name> <operator>=</operator> <name>bc</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>replyTimer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>elapsedStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replyTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bc</name><operator>-&gt;</operator><name>reply_callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply_us</name> <operator>=</operator> <call><name>elapsedUs</name><argument_list>(<argument><expr><name>replyTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bc</name><operator>-&gt;</operator><name>blocked_on_keys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>updateStatsOnUnblock</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>background_duration</name></name></expr></argument>, <argument><expr><name>reply_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name> <operator>&amp;&amp;</operator> <name><name>bc</name><operator>-&gt;</operator><name>free_privdata</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctx_flags</name> <init>= <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>REDISMODULE_CTX_BLOCKED_DISCONNECTED</name></expr> </then><else>: <expr><name>REDISMODULE_CTX_NONE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>ctx_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_privdata</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bc</name><operator>-&gt;</operator><name>free_privdata</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AddReplyFromClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>reply_client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>moduleReleaseTempClient</name><argument_list>(<argument><expr><name><name>bc</name><operator>-&gt;</operator><name>reply_client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleReleaseTempClient</name><argument_list>(<argument><expr><name><name>bc</name><operator>-&gt;</operator><name>thread_safe_ctx_client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>disconnect_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unblockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>clientHasPendingReplies</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PENDING_WRITE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PENDING_WRITE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeHead</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients_pending_write</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>blocked_clients</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleUnblockedClientsMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleUnblockedClientsMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>moduleBlockedClientMayTimeout</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>btype</name></name> <operator>!=</operator> <name>BLOCKED_MODULE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>bc</name> <operator>&amp;&amp;</operator> <name><name>bc</name><operator>-&gt;</operator><name>timeout_callback</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>moduleBlockedClientTimedOut</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>module_blocked_handle</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>unblocked</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_BLOCKED_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_client</name></name> <operator>=</operator> <name>bc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>blocked_privdata</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>privdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bc</name><operator>-&gt;</operator><name>timeout_callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bc</name><operator>-&gt;</operator><name>blocked_on_keys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>updateStatsOnUnblock</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>background_duration</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>disconnect_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_IsBlockedReplyRequest</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_BLOCKED_REPLY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_IsBlockedTimeoutRequest</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_BLOCKED_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>RM_GetBlockedClientPrivateData</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>blocked_privdata</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetBlockedClientReadyKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>blocked_ready_key</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>RM_GetBlockedClientHandle</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>blocked_client</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_BlockedClientDisconnected</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CTX_BLOCKED_DISCONNECTED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

























<function><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>RM_GetThreadSafeContext</name><parameter_list>(<parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><ternary><condition><expr><name>bc</name></expr> ?</condition><then> <expr><name><name>bc</name><operator>-&gt;</operator><name>module</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>REDISMODULE_CTX_THREAD_SAFE</name></expr></init></decl>;</decl_stmt>











<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDISMODULE_CTX_NEW_CLIENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>bc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocked_client</name></name> <operator>=</operator> <name>bc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>thread_safe_ctx_client</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><name><name>bc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bc</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <name><name>bc</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>resp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>RM_GetDetachedThreadSafeContext</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>new_ctx</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><name>new_ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr></argument>,
<argument><expr><name>REDISMODULE_CTX_THREAD_SAFE</name><operator>|</operator><name>REDISMODULE_CTX_NEW_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_ctx</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_FreeThreadSafeContext</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleGILAfterLock</name><parameter_list>()</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>module_ctx_nesting</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>module_ctx_nesting</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_ThreadSafeContextLock</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleAcquireGIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleGILAfterLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>RM_ThreadSafeContextTryLock</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>moduleTryAcquireGIL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>moduleGILAfterLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleGILBeforeUnlock</name><parameter_list>()</parameter_list> <block>{<block_content>



<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>module_ctx_nesting</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>module_ctx_nesting</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>propagatePendingCommands</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blockingOperationEnds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>=</operator> <name>BUSY_MODULE_YIELD_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unblockPostponedClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_ThreadSafeContextUnlock</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleGILBeforeUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleReleaseGIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleAcquireGIL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleGIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>moduleTryAcquireGIL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleGIL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleReleaseGIL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleGIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






























































<function><type><name>int</name></type> <name>RM_SubscribeToKeyspaceEvents</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name>RedisModuleNotificationFunc</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleKeyspaceSubscriber</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>event_mask</name></name> <operator>=</operator> <name>types</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>notify_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>moduleKeyspaceSubscribers</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_GetNotifyKeyspaceEvents</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_NotifyKeyspaceEvent</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>event</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>moduleNotifyKeyspaceEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>moduleKeyspaceSubscribers</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>moduleKeyspaceSubscribers</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>NOTIFY_KEYEVENT</name> <operator>|</operator> <name>NOTIFY_KEYSPACE</name><operator>)</operator></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleKeyspaceSubscriber</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sub</name><operator>-&gt;</operator><name>event_mask</name></name> <operator>&amp;</operator> <name>type</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>sub</name><operator>-&gt;</operator><name>active</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_TEMP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>client</name></name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>sub</name><operator>-&gt;</operator><name>notify_callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>moduleUnsubscribeNotifications</name><parameter_list>(<parameter><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>moduleKeyspaceSubscribers</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleKeyspaceSubscriber</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>module</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>moduleKeyspaceSubscribers</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleClusterMessageReceiver</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sender_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




<typedef>typedef <type><struct>struct <name>moduleClusterReceiver</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>module_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleClusterMessageReceiver</name></type> <name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>moduleClusterReceiver</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>moduleClusterReceiver</name>;</typedef>

<typedef>typedef <type><struct>struct <name>moduleClusterNodeInfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>master_id</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mdouleClusterNodeInfo</name>;</typedef>



<decl_stmt><decl><type><specifier>static</specifier> <name>moduleClusterReceiver</name> <modifier>*</modifier></type><name><name>clusterReceivers</name><index>[<expr><name>UINT8_MAX</name></expr>]</index></name></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>moduleCallClusterReceivers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sender_id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>module_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>moduleClusterReceiver</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>clusterReceivers</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>module_id</name></name> <operator>==</operator> <name>module_id</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_TEMP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name>sender_id</name></expr></argument>,<argument><expr><name>type</name></expr></argument>,<argument><expr><name>payload</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>RM_RegisterClusterMessageReceiver</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>RedisModuleClusterMessageReceiver</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>module_id</name> <init>= <expr><call><name>moduleTypeEncodeId</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleClusterReceiver</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>clusterReceivers</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>module_id</name></name> <operator>==</operator> <name>module_id</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clusterReceivers</name><index>[<expr><name>type</name></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>module_id</name></name> <operator>=</operator> <name>module_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>clusterReceivers</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clusterReceivers</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>RM_SendClusterMessage</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>module_id</name> <init>= <expr><call><name>moduleTypeEncodeId</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>clusterSendModuleMessageToTarget</name><argument_list>(<argument><expr><name>target_id</name></expr></argument>,<argument><expr><name>module_id</name></expr></argument>,<argument><expr><name>type</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>























<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>RM_GetClusterNodesList</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>numnodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>count</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>REDISMODULE_NODE_ID_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_NOADDR</name><operator>|</operator><name>CLUSTER_NODE_HANDSHAKE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ids</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>REDISMODULE_NODE_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>REDISMODULE_NODE_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>numnodes</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ids</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ids</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_FreeClusterNodesList</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ids</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ids</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RM_GetMyClusterID</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>size_t</name></type> <name>RM_GetClusterSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><name>int</name></type> <name>RM_GetClusterNodeInfo</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>master_id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_NOADDR</name><operator>|</operator><name>CLUSTER_NODE_HANDSHAKE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>master_id</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_SLAVE</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>master_id</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>REDISMODULE_NODE_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>master_id</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>REDISMODULE_NODE_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_MYSELF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>REDISMODULE_NODE_MYSELF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_MASTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>REDISMODULE_NODE_MASTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>REDISMODULE_NODE_SLAVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_PFAIL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>REDISMODULE_NODE_PFAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_FAIL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>REDISMODULE_NODE_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_NOFAILOVER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>REDISMODULE_NODE_NOFAILOVER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



















<function><type><name>void</name></type> <name>RM_SetClusterFlags</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CLUSTER_FLAG_NO_FAILOVER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>|=</operator> <name>CLUSTER_MODULE_FLAG_NO_FAILOVER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>|=</operator> <name>CLUSTER_MODULE_FLAG_NO_REDIRECTION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




















<decl_stmt><decl><type><specifier>static</specifier> <name>rax</name> <modifier>*</modifier></type><name>Timers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>aeTimer</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTimerProc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <type><struct>struct <name>RedisModuleTimer</name> <block>{
<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTimerProc</name></type> <name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbid</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleTimer</name>;</typedef>



<function><type><name>int</name></type> <name>moduleTimerHandler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>Timers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>now</name> <init>= <expr><call><name>ustime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>next_period</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>expiretime</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>expiretime</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expiretime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expiretime</name> <operator>=</operator> <call><name>ntohu64</name><argument_list>(<argument><expr><name>expiretime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name>expiretime</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleTimer</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>module</name></name></expr></argument>,<argument><expr><name>REDISMODULE_CTX_TEMP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>timer</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>Timers</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><name>next_period</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>expiretime</name><operator>-</operator><call><name>ustime</name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>next_period</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next_period</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>raxSize</name><argument_list>(<argument><expr><name>Timers</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>next_period</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>aeTimer</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>AE_NOMORE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><name>RedisModuleTimerID</name></type> <name>RM_CreateTimer</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>RedisModuleTimerProc</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleTimer</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>timer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>expiretime</name> <init>= <expr><call><name>ustime</name><argument_list>()</argument_list></call><operator>+</operator><name>period</name><operator>*</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>key</name></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>htonu64</name><argument_list>(<argument><expr><name>expiretime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>Timers</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>Timers</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>timer</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>expiretime</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name>aeTimer</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>Timers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>aeDeleteTimeEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name>aeTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aeTimer</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>aeTimer</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aeTimer</name> <operator>=</operator> <call><name>aeCreateTimeEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name>period</name></expr></argument>,<argument><expr><name>moduleTimerHandler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_StopTimer</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleTimerID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleTimer</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>Timers</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>id</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>raxNotFound</name> <operator>||</operator> <name><name>timer</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>Timers</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>id</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>RM_GetTimerInfo</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleTimerID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>remaining</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleTimer</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>Timers</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>id</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>raxNotFound</name> <operator>||</operator> <name><name>timer</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>remaining</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>rem</name> <init>= <expr><call><name>ntohu64</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>ustime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rem</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>remaining</name> <operator>=</operator> <name>rem</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<typedef>typedef <type><struct>struct <name>EventLoopData</name> <block>{
<decl_stmt><decl><type><name>RedisModuleEventLoopFunc</name></type> <name>rFunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleEventLoopFunc</name></type> <name>wFunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>EventLoopData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>EventLoopOneShot</name> <block>{
<decl_stmt><decl><type><name>RedisModuleEventLoopOneShotFunc</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>EventLoopOneShot</name>;</typedef>

<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>moduleEventLoopOneShots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>moduleEventLoopMutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eventLoopToAeMask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>aeMask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>REDISMODULE_EVENTLOOP_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aeMask</name> <operator>|=</operator> <name>AE_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>REDISMODULE_EVENTLOOP_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aeMask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>aeMask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eventLoopFromAeMask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ae_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ae_mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>REDISMODULE_EVENTLOOP_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ae_mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>REDISMODULE_EVENTLOOP_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eventLoopCbReadable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>ae</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ae_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>EventLoopData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>rFunc</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><call><name>eventLoopFromAeMask</name><argument_list>(<argument><expr><name>ae_mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eventLoopCbWritable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>ae</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ae_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>EventLoopData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>wFunc</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><call><name>eventLoopFromAeMask</name><argument_list>(<argument><expr><name>ae_mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


























<function><type><name>int</name></type> <name>RM_EventLoopAdd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEventLoopFunc</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fd</name> <operator>&gt;=</operator> <call><name>aeGetSetSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name> <operator>||</operator> <name>mask</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>REDISMODULE_EVENTLOOP_READABLE</name> <operator>|</operator>
<name>REDISMODULE_EVENTLOOP_WRITABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>











<decl_stmt><decl><type><name>EventLoopData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>aeGetFileClientData</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>aeFileProc</name> <modifier>*</modifier></type><name>aeProc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>REDISMODULE_EVENTLOOP_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aeProc</name> <operator>=</operator> <name>eventLoopCbReadable</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>aeProc</name> <operator>=</operator> <name>eventLoopCbWritable</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aeMask</name> <init>= <expr><call><name>eventLoopToAeMask</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>aeMask</name></expr></argument>, <argument><expr><name>aeProc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aeGetFileEvents</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>REDISMODULE_EVENTLOOP_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>rFunc</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>REDISMODULE_EVENTLOOP_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>wFunc</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>int</name></type> <name>RM_EventLoopDel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fd</name> <operator>&gt;=</operator> <call><name>aeGetSetSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>REDISMODULE_EVENTLOOP_READABLE</name> <operator>|</operator>
<name>REDISMODULE_EVENTLOOP_WRITABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>EventLoopData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>aeGetFileClientData</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>eventLoopToAeMask</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aeGetFileEvents</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_EventLoopAddOneShot</name><parameter_list>(<parameter><decl><type><name>RedisModuleEventLoopOneShotFunc</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EventLoopOneShot</name> <modifier>*</modifier></type><name>oneshot</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>oneshot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>oneshot</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oneshot</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleEventLoopMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>moduleEventLoopOneShots</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>moduleEventLoopOneShots</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>moduleEventLoopOneShots</name></expr></argument>, <argument><expr><name>oneshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleEventLoopMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>module_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"A"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>eventLoopHandleOneShotEvents</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleEventLoopMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>moduleEventLoopOneShots</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>moduleEventLoopOneShots</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name>moduleEventLoopOneShots</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EventLoopOneShot</name> <modifier>*</modifier></type><name>oneshot</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>moduleEventLoopOneShots</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleEventLoopMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>oneshot</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>oneshot</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>oneshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleEventLoopMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleEventLoopMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>moduleNotifyUserChanged</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>auth_callback</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>auth_callback</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>auth_callback_privdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>auth_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>auth_callback_privdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>auth_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>revokeClientAuthentication</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>





<expr_stmt><expr><call><name>moduleNotifyUserChanged</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>DefaultUser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>current_client</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_CLOSE_AFTER_COMMAND</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>moduleFreeAuthenticatedClients</name><parameter_list>(<parameter><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>auth_module</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>auth_module</name> <init>= <expr><operator>(</operator><name>RedisModule</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>auth_module</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>auth_module</name> <operator>==</operator> <name>module</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>revokeClientAuthentication</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





















<function><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>RM_CreateModuleUser</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>new_user</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RedisModuleUser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_user</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>ACLCreateUnlinkedUser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_user</name><operator>-&gt;</operator><name>free_user</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>new_user</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_user</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_user</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_FreeModuleUser</name><parameter_list>(<parameter><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>free_user</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ACLFreeUserAndKillClients</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>RM_SetModuleUserACL</name><parameter_list>(<parameter><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>acl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>acl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetCurrentUserName</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>RM_GetModuleUserFromUserName</name><parameter_list>(<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>acl_user</name> <init>= <expr><call><name>ACLGetUserByName</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_user</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>new_user</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RedisModuleUser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_user</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>acl_user</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_user</name><operator>-&gt;</operator><name>free_user</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>new_user</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>RM_ACLCheckCommandPermissions</name><parameter_list>(<parameter><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keyidxptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>lookupCommand</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ACLCheckAllUserCommandPerm</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyidxptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>RM_ACLCheckKeyPermissions</name><parameter_list>(<parameter><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>acl_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_KEY_PERMISSION_READ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>acl_flags</name> <operator>|=</operator> <name>ACL_READ_PERMISSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_KEY_PERMISSION_WRITE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>acl_flags</name> <operator>|=</operator> <name>ACL_WRITE_PERMISSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_flags</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_KEY_PERMISSION_ALL</name><operator>)</operator> <operator>!=</operator> <name>flags</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ACLUserCheckKeyPerm</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>acl_flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>RM_ACLCheckChannelPermissions</name><parameter_list>(<parameter><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLUserCheckChannelPerm</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>literal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>RM_ACLAddLogEntry</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addACLLogEntry</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACL_LOG_CTX_MODULE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticateClientWithUser</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RedisModuleUserChangedFunc</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>client_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>user</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>USER_FLAG_DISABLED</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name> <operator>||</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MODULE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>moduleNotifyUserChanged</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>auth_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>auth_callback_privdata</name></name> <operator>=</operator> <name>privdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>auth_module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>client_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>client_id</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>RM_AuthenticateClientWithUser</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleUser</name> <modifier>*</modifier></type><name>module_user</name></decl></parameter>, <parameter><decl><type><name>RedisModuleUserChangedFunc</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>client_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>authenticateClientWithUser</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>module_user</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>client_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_AuthenticateClientWithACLUser</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RedisModuleUserChangedFunc</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>client_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>acl_user</name> <init>= <expr><call><name>ACLGetUserByName</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_user</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>authenticateClientWithUser</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>acl_user</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>client_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>RM_DeauthenticateAndCloseClient</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>client_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>lookupClientByID</name><argument_list>(<argument><expr><name>client_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>revokeClientAuthentication</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetClientCertificate</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>client_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>lookupClientByID</name><argument_list>(<argument><expr><name>client_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sds</name></type> <name>cert</name> <init>= <expr><call><name>connTLSGetPeerCert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>






















<function><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>RM_CreateDict</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModuleDict</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_DICT</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_FreeDict</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryFreed</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_DICT</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>RM_DictSize</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_DictSetC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>: <expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_DictReplaceC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>: <expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_DictSet</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_DictSetC</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_DictReplace</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_DictReplaceC</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name> <modifier>*</modifier></type><name>RM_DictGetC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nokey</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nokey</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>nokey</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name>raxNotFound</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>res</name> <operator>==</operator> <name>raxNotFound</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>res</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>RM_DictGet</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nokey</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_DictGetC</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>nokey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>RM_DictDelC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>raxRemove</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>,<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>retval</name></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>: <expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_DictDel</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_DictDelC</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





















<function><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>RM_DictIteratorStartC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>di</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>,<argument><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>di</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>RM_DictIteratorStart</name><parameter_list>(<parameter><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_DictIteratorStartC</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>RM_DictIteratorStop</name><parameter_list>(<parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>RM_DictIteratorReseekC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_DictIteratorReseek</name><parameter_list>(<parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RM_DictIteratorReseekC</name><argument_list>(<argument><expr><name>di</name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


























<function><type><name>void</name> <modifier>*</modifier></type><name>RM_DictNextC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>keylen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dataptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keylen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>keylen</name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>ri</name><operator>.</operator><name>key_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dataptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>dataptr</name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>ri</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>di</name><operator>-&gt;</operator><name>ri</name><operator>.</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type><name>RM_DictPrevC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>keylen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dataptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keylen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>keylen</name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>ri</name><operator>.</operator><name>key_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dataptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>dataptr</name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>ri</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>di</name><operator>-&gt;</operator><name>ri</name><operator>.</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>








<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_DictNext</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dataptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>RM_DictNextC</name><argument_list>(<argument><expr><name>di</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>,<argument><expr><name>dataptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>RM_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_DictPrev</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dataptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>RM_DictPrevC</name><argument_list>(<argument><expr><name>di</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>,<argument><expr><name>dataptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>RM_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>RM_DictCompareC</name><parameter_list>(<parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>raxEOF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>raxCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>: <expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_DictCompare</name><parameter_list>(<parameter><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>raxEOF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>raxCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><name>REDISMODULE_OK</name></expr> </then><else>: <expr><name>REDISMODULE_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>








<function_decl><type><name>int</name></type> <name>RM_InfoEndDictField</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><name>int</name></type> <name>RM_InfoAddSection</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>full_name</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>full_name</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>full_name</name></expr></argument>, <argument><expr><literal type="string">"_%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RM_InfoEndDictField</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>requested_section</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>requested_section</name></name></expr></argument>, <argument><expr><name>full_name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>requested_section</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>full_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_section</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sections</name></name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="string">"#%S\r\n"</literal></expr></argument>, <argument><expr><name>full_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_section</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>full_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_InfoBeginDictField</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_section</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RM_InfoEndDictField</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpmodname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmpname</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s_%s:"</literal></expr></argument>,
<argument><expr><call><name>getSafeInfoString</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpmodname</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getSafeInfoString</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpmodname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>tmpmodname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_InfoEndDictField</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><index>[<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsIncrLen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_InfoAddFieldString</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_section</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s=%S,"</literal></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s_%s:%S\r\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_InfoAddFieldCString</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_section</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s=%s,"</literal></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s_%s:%s\r\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_InfoAddFieldDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_section</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s=%.17g,"</literal></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s_%s:%.17g\r\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_InfoAddFieldLongLong</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_section</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s=%I,"</literal></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s_%s:%I\r\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RM_InfoAddFieldULongLong</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_section</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_dict_field</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s=%U,"</literal></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><literal type="string">"%s_%s:%U\r\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>field</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_RegisterInfoFunc</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleInfoFunc</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>info_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sds</name></type> <name>modulesCollectInfo</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_crash_report</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sections</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>module</name><operator>-&gt;</operator><name>info_cb</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleInfoCtx</name></type> <name>info_ctx</name> <init>= <expr><block>{<expr><name>module</name></expr>, <expr><name>section</name></expr>, <expr><name>info</name></expr>, <expr><name>sections</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>module</name><operator>-&gt;</operator><name>info_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>info_ctx</name></expr></argument>, <argument><expr><name>for_crash_report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info_ctx</name><operator>.</operator><name>in_dict_field</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RM_InfoEndDictField</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>info_ctx</name><operator>.</operator><name>info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sections</name> <operator>=</operator> <name><name>info_ctx</name><operator>.</operator><name>sections</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>RM_GetServerInfo</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModuleServerInfoData</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_INFO</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>info</name> <init>= <expr><call><name>genRedisInfoString</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>totlines</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>totlines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>totlines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sep</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>sep</name><operator>-</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>val</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>sep</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-</operator><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>sep</name><operator>-</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>line</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxTryInsert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>lines</name></expr></argument>,<argument><expr><name>totlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_FreeServerInfo</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryFreed</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_INFO</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>sdsfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_ServerInfoGetField</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>val</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>field</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>createStringObject</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>autoMemoryAdd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>REDISMODULE_AM_STRING</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RM_ServerInfoGetFieldC</name><parameter_list>(<parameter><decl><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>val</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>field</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>long</name> <name>long</name></type> <name>RM_ServerInfoGetFieldSigned</name><parameter_list>(<parameter><decl><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>val</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>field</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string2ll</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ll</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>RM_ServerInfoGetFieldUnsigned</name><parameter_list>(<parameter><decl><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>val</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>field</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string2ull</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ll</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>double</name></type> <name>RM_ServerInfoGetFieldDouble</name><parameter_list>(<parameter><decl><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>dbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>val</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>field</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string2d</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>dbl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name>REDISMODULE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>dbl</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>RM_GetRandomBytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>getRandomBytes</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>RM_GetRandomHexChars</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

















<function><type><name>int</name></type> <name>RM_ExportSharedAPI</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apiname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleSharedAPI</name> <modifier>*</modifier></type><name>sapi</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sapi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sapi</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sapi</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sharedapi</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>apiname</name></expr></argument>, <argument><expr><name>sapi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>sapi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


































<function><type><name>void</name> <modifier>*</modifier></type><name>RM_GetSharedAPI</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apiname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sharedapi</name></name></expr></argument>, <argument><expr><name>apiname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>de</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleSharedAPI</name> <modifier>*</modifier></type><name>sapi</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>sapi</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>usedby</name></name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>sapi</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>usedby</name></name></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>using</name></name></expr></argument>,<argument><expr><name><name>sapi</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>sapi</name><operator>-&gt;</operator><name>func</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>moduleUnregisterSharedAPI</name><parameter_list>(<parameter><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sharedapi</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apiname</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleSharedAPI</name> <modifier>*</modifier></type><name>sapi</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sapi</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>module</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sharedapi</name></name></expr></argument>,<argument><expr><name>apiname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>sapi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>moduleUnregisterUsedAPI</name><parameter_list>(<parameter><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>using</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>used</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>used</name><operator>-&gt;</operator><name>usedby</name></name></expr></argument>,<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>used</name><operator>-&gt;</operator><name>usedby</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>moduleUnregisterFilters</name><parameter_list>(<parameter><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCommandFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name>moduleCommandFilters</name></expr></argument>,<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>moduleCommandFilters</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
























































<function><type><name>RedisModuleCommandFilter</name> <modifier>*</modifier></type><name>RM_RegisterCommandFilter</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCommandFilterFunc</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCommandFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>moduleCommandFilters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_UnregisterCommandFilter</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCommandFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>listSearchKey</name><argument_list>(<argument><expr><name>moduleCommandFilters</name></expr></argument>,<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ln</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>moduleCommandFilters</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>,<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ln</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleCallCommandFilters</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>moduleCommandFilters</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>moduleCommandFilters</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RedisModuleCommandFilterCtx</name></type> <name>filter</name> <init>= <expr><block>{
<expr><operator>.</operator><name>argv</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr>,
<expr><operator>.</operator><name>argc</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCommandFilter</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDISMODULE_CMDFILTER_NOSELF</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>in_call</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name><name>filter</name><operator>.</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name><name>filter</name><operator>.</operator><name>argc</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_CommandFilterArgsCount</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommandFilterCtx</name> <modifier>*</modifier></type><name>fctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_CommandFilterArgGet</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommandFilterCtx</name> <modifier>*</modifier></type><name>fctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pos</name> <operator>&gt;=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_CommandFilterArgInsert</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommandFilterCtx</name> <modifier>*</modifier></type><name>fctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pos</name></expr></argument> &gt;</argument_list></name> <name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>RedisModuleString</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_CommandFilterArgReplace</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommandFilterCtx</name> <modifier>*</modifier></type><name>fctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pos</name> <operator>&gt;=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_CommandFilterArgDelete</name><parameter_list>(<parameter><decl><type><name>RedisModuleCommandFilterCtx</name> <modifier>*</modifier></type><name>fctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pos</name> <operator>&gt;=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>size_t</name></type> <name>RM_MallocSize</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list><block>{<block_content>
<return>return <expr><call><name>zmalloc_size</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>float</name></type> <name>RM_GetUsedMemoryRatio</name><parameter_list>()</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getMaxmemoryState</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>level</name></expr>;</return>
</block_content>}</block></function>





<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleScanCB</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>, <parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleScanCB</name></type> <name>fn</name></decl>;</decl_stmt>
}</block></struct></type> <name>ScanCBData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RedisModuleScanCursor</name><block>{
<decl_stmt><decl><type><name>int</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>
}</block></struct></type><name>RedisModuleScanCursor</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>moduleScanCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScanCBData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>RedisModuleKey</name></type> <name>kp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleInitKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kp</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>REDISMODULE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kp</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleCloseKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>RedisModuleScanCursor</name> <modifier>*</modifier></type><name>RM_ScanCursorCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleScanCursor</name><modifier>*</modifier></type> <name>cursor</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>cursor</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_ScanCursorRestart</name><parameter_list>(<parameter><decl><type><name>RedisModuleScanCursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RM_ScanCursorDestroy</name><parameter_list>(<parameter><decl><type><name>RedisModuleScanCursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

























































<function><type><name>int</name></type> <name>RM_Scan</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleScanCursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>RedisModuleScanCB</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScanCBData</name></type> <name>data</name> <init>= <expr><block>{ <expr><name>ctx</name></expr>, <expr><name>privdata</name></expr>, <expr><name>fn</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <call><name>dictScan</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><name>moduleScanCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleScanKeyCB</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleScanKeyCB</name></type> <name>fn</name></decl>;</decl_stmt>
}</block></struct></type> <name>ScanKeyCBData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>moduleScanKeyCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScanKeyCBData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>createStringObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>val</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>createStringObjectFromLongDouble</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

















































<function><type><name>int</name></type> <name>RM_ScanKey</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleScanCursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>RedisModuleScanKeyCB</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>zset</name> <operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><operator>-&gt;</operator><name>dict</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ScanKeyCBData</name></type> <name>data</name> <init>= <expr><block>{ <expr><name>key</name></expr>, <expr><name>privdata</name></expr>, <expr><name>fn</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <call><name>dictScan</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><name>moduleScanKeyCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INTSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ll</name></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>intsetGet</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>pos</name><operator>++</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lpSeek</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>vstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>vll</name></decl>;</decl_stmt>
<while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vstr</name> <operator>=</operator> <call><name>lpGetValue</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>vstr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>createStringObject</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>vstr</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name>vll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vstr</name> <operator>=</operator> <call><name>lpGetValue</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>vstr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>createStringObject</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>vstr</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name>vll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lpFirst</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>vstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>intbuf</name><index>[<expr><name>LP_INTBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vstr</name> <operator>=</operator> <call><name>lpGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>,<argument><expr><name>intbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>createStringObject</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>vstr</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vstr</name> <operator>=</operator> <call><name>lpGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>,<argument><expr><name>intbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>createStringObject</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>vstr</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>int</name></type> <name>RM_Fork</name><parameter_list>(<parameter><decl><type><name>RedisModuleForkDoneHandler</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>childpid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>childpid</name> <operator>=</operator> <call><name>redisFork</name><argument_list>(<argument><expr><name>CHILD_TYPE_MODULE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><literal type="string">"redis-module-fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>childpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't fork for module: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler_user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Module fork started pid: %ld "</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>childpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>childpid</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>RM_SendChildHeartbeat</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sendChildInfoGeneric</name><argument_list>(<argument><expr><name>CHILD_INFO_TYPE_CURRENT_INFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><literal type="string">"Module fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_ExitFromChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>retcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sendChildCowInfo</name><argument_list>(<argument><expr><name>CHILD_INFO_TYPE_MODULE_COW_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Module fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><name>retcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>TerminateModuleForkChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>child_pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>!=</operator> <name>CHILD_TYPE_MODULE</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>child_pid</name></name> <operator>!=</operator> <name>child_pid</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>statloc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,<argument><expr><literal type="string">"Killing running module fork child: %ld"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>,<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>wait</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><call><name>waitpid</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statloc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator>
<name><name>server</name><operator>.</operator><name>child_pid</name></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>resetChildState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler_user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>RM_KillForkChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>child_pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TerminateModuleForkChild</name><argument_list>(<argument><expr><name>child_pid</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ModuleForkDoneHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Module fork exited pid: %ld, retcode: %d, bysignal: %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>, <argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler</name></name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>,
<argument><expr><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler_user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>moduleForkInfo</name><operator>.</operator><name>done_handler_user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>









<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name><name>moduleEventVersions</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>REDISMODULE_REPLICATIONINFO_VERSION</name></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><name>REDISMODULE_FLUSHINFO_VERSION</name></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><name>REDISMODULE_CLIENTINFO_VERSION</name></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><name>REDISMODULE_CRON_LOOP_VERSION</name></expr>,
<expr><name>REDISMODULE_MODULE_CHANGE_VERSION</name></expr>,
<expr><name>REDISMODULE_LOADING_PROGRESS_VERSION</name></expr>,
<expr><name>REDISMODULE_SWAPDBINFO_VERSION</name></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>






































































































































































































































































<function><type><name>int</name></type> <name>RM_SubscribeToServerEvent</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEventCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleEventListener</name> <modifier>*</modifier></type><name>el</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>id</name></name> <operator>&gt;=</operator> <name>_REDISMODULE_EVENT_NEXT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>dataver</name></name> <operator>&gt;</operator> <name><name>moduleEventVersions</name><index>[<expr><name><name>event</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>RedisModule_EventListeners</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>el</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name> <operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>event</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>ln</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>RedisModule_EventListeners</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>el</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>el</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>RedisModule_EventListeners</name></expr></argument>,<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_IsSubEventSupported</name><parameter_list>(<parameter><decl><type><name>RedisModuleEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>subevent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_EVENT_REPLROLECHANGED_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_PERSISTENCE</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_PERSISTENCE_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_FLUSHDB</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_FLUSHDB_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_LOADING</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_LOADING_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_CLIENT_CHANGE</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_CLIENT_CHANGE_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_SHUTDOWN</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_SHUTDOWN_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_REPLICA_CHANGE</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_EVENT_REPLROLECHANGED_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_MASTER_LINK_CHANGE</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_MASTER_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_CRON_LOOP</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_CRON_LOOP_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_MODULE_CHANGE</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_MODULE_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_LOADING_PROGRESS</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_LOADING_PROGRESS_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_SWAPDB</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_SWAPDB_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_REPL_ASYNC_LOAD</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_FORK_CHILD</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_FORK_CHILD_NEXT</name></expr>;</return>
<case>case <expr><name>REDISMODULE_EVENT_EVENTLOOP</name></expr>:</case>
<return>return <expr><name>subevent</name> <operator>&lt;</operator> <name>_REDISMODULE_SUBEVENT_EVENTLOOP_NEXT</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>moduleFireServerEvent</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>eid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>RedisModule_EventListeners</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>RedisModule_EventListeners</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleEventListener</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>eid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>eid</name> <operator>==</operator> <name>REDISMODULE_EVENT_CLIENT_CHANGE</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name><name>el</name><operator>-&gt;</operator><name>module</name></name></expr></argument>,<argument><expr><name>REDISMODULE_CTX_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>client</name></name> <operator>=</operator> <operator>(</operator><name>client</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name><name>el</name><operator>-&gt;</operator><name>module</name></name></expr></argument>,<argument><expr><name>REDISMODULE_CTX_TEMP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>moduledata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleClientInfoV1</name></type> <name>civ1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleReplicationInfoV1</name></type> <name>riv1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleModuleChangeV1</name></type> <name>mcv1</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>eid</name> <operator>==</operator> <name>REDISMODULE_EVENT_CLIENT_CHANGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>modulePopulateClientInfoStructure</name><argument_list>(<argument><expr><operator>&amp;</operator><name>civ1</name></expr></argument>,<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>dataver</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moduledata</name> <operator>=</operator> <operator>&amp;</operator><name>civ1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>eid</name> <operator>==</operator> <name>REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>modulePopulateReplicationInfoStructure</name><argument_list>(<argument><expr><operator>&amp;</operator><name>riv1</name></expr></argument>,<argument><expr><name><name>el</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>dataver</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moduledata</name> <operator>=</operator> <operator>&amp;</operator><name>riv1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>eid</name> <operator>==</operator> <name>REDISMODULE_EVENT_FLUSHDB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>moduledata</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleFlushInfoV1</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>dbnum</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>eid</name> <operator>==</operator> <name>REDISMODULE_EVENT_MODULE_CHANGE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mcv1</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>REDISMODULE_MODULE_CHANGE_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mcv1</name><operator>.</operator><name>module_name</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mcv1</name><operator>.</operator><name>module_version</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>ver</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>moduledata</name> <operator>=</operator> <operator>&amp;</operator><name>mcv1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>eid</name> <operator>==</operator> <name>REDISMODULE_EVENT_LOADING_PROGRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>moduledata</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>eid</name> <operator>==</operator> <name>REDISMODULE_EVENT_CRON_LOOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>moduledata</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>eid</name> <operator>==</operator> <name>REDISMODULE_EVENT_SWAPDB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>moduledata</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>in_hook</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>el</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name><name>el</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,<argument><expr><name>subid</name></expr></argument>,<argument><expr><name>moduledata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>in_hook</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>moduleUnsubscribeAllServerEvents</name><parameter_list>(<parameter><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleEventListener</name> <modifier>*</modifier></type><name>el</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>RedisModule_EventListeners</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>el</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>module</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>RedisModule_EventListeners</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>processModuleLoadingProgressEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_aof</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><name><name>server</name><operator>.</operator><name>ustime</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>next_event</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name>next_event</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>progress</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>progress</name> <operator>=</operator> <operator>(</operator><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>/</operator> <name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleLoadingProgressV1</name></type> <name>fi</name> <init>= <expr><block>{<expr><name>REDISMODULE_LOADING_PROGRESS_VERSION</name></expr>,
<expr><name><name>server</name><operator>.</operator><name>hz</name></name></expr>,
<expr><name>progress</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_LOADING_PROGRESS</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>is_aof</name></expr>?</condition><then>
<expr><name>REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF</name></expr></then><else>:
<expr><name>REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <name>now</name> <operator>+</operator> <literal type="number">1000000</literal> <operator>/</operator> <name><name>server</name><operator>.</operator><name>hz</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>moduleNotifyKeyUnlink</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_MODULE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>unlink2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleKeyOptCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><name>key</name></expr>, <expr><name>NULL</name></expr>, <expr><name>dbid</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>unlink2</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>unlink</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>unlink</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>moduleGetFreeEffort</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>effort</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>free_effort2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleKeyOptCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><name>key</name></expr>, <expr><name>NULL</name></expr>, <expr><name>dbid</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>effort</name> <operator>=</operator> <call><name><name>mt</name><operator>-&gt;</operator><name>free_effort2</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>free_effort</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>effort</name> <operator>=</operator> <call><name><name>mt</name><operator>-&gt;</operator><name>free_effort</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>effort</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>size_t</name></type> <name>moduleGetMemUsage</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>mem_usage2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleKeyOptCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><name>key</name></expr>, <expr><name>NULL</name></expr>, <expr><name>dbid</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>mt</name><operator>-&gt;</operator><name>mem_usage2</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>mem_usage</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>mt</name><operator>-&gt;</operator><name>mem_usage</name></name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>uint64_t</name></type> <name>dictCStringKeyHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dictCStringKeyCompare</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key1</name></expr></argument>,<argument><expr><name>key2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>dictType</name></type> <name>moduleAPIDictType</name> <init>= <expr><block>{
<expr><name>dictCStringKeyHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictCStringKeyCompare</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>moduleRegisterApi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>funcptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>moduleapi</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>funcname</name></expr></argument>, <argument><expr><name>funcptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_API</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>moduleRegisterApi("RedisModule_" #name, (void *)(unsigned long)RM_ ##name)</cpp:value></cpp:define>



<function_decl><type><name>void</name></type> <name>moduleRegisterCoreAPI</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function><type><name>void</name></type> <name>moduleInitModulesSystemLast</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleInitModulesSystem</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>moduleUnblockedClients</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loadmodule_queue</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>modules</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>modulesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>moduleKeyspaceSubscribers</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>moduleCommandFilters</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleRegisterCoreAPI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>anetPipe</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>module_pipe</name></name></expr></argument>, <argument><expr><name>O_CLOEXEC</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument>, <argument><expr><name>O_CLOEXEC</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Can't create the pipe for module threads: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>Timers</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>RedisModule_EventListeners</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>moduleEventVersions</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>moduleEventVersions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>_REDISMODULE_EVENT_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleGIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>modulesCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>






<decl_stmt><decl><type><name>int</name></type> <name>iteration</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>min_client</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>iteration</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>moduleTempClientCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>moduleTempClientMinCount</name> <operator>&gt;</operator> <name>min_client</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>moduleTempClients</name><index>[<expr><operator>--</operator><name>moduleTempClientCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iteration</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>moduleTempClientMinCount</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>moduleTempClientMinCount</name> <operator>=</operator> <name>moduleTempClientCount</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>moduleTempClientCap</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>moduleTempClientCap</name> <operator>&gt;</operator> <name>moduleTempClientCount</name> <operator>*</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>moduleTempClientCap</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>moduleTempClients</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>moduleTempClients</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>client</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>moduleTempClientCap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleLoadQueueEntryFree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>moduleLoadQueueEntry</name></name> <modifier>*</modifier></type><name>loadmod</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>loadmod</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>loadmod</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>loadmod</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>loadmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>moduleLoadFromQueue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>loadmodule_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>moduleLoadQueueEntry</name></name> <modifier>*</modifier></type><name>loadmod</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>moduleLoad</name><argument_list>(<argument><expr><name><name>loadmod</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>loadmod</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>C_ERR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Can't load module from %s: server aborting"</literal></expr></argument>,
<argument><expr><name><name>loadmod</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>moduleLoadQueueEntryFree</name><argument_list>(<argument><expr><name>loadmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>loadmodule_queue</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleFreeModuleStructure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>usedby</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>using</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleLoadQueueEntryFree</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>loadmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>moduleFreeCommand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>RedisModuleCommandDispatcher</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleCommand</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name>module</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name> <operator>!=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_static</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>cmd</name><operator>-&gt;</operator><name>tips</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>tips</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>tips</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>cmd</name><operator>-&gt;</operator><name>history</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>since</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>since</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>since</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>complexity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>latency_histogram</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hdr_close</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>latency_histogram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>latency_histogram</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>moduleFreeCommand</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>declared_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>sub</name><operator>-&gt;</operator><name>declared_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>moduleUnregisterCommands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>moduleFreeCommand</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>declared_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>moduleLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>module_argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>module_argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>onload</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IXUSR</name> <operator>|</operator> <name>S_IXGRP</name> <operator>|</operator> <name>S_IXOTH</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Module %s failed to load: It does not have execute permissions."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><name>RTLD_NOW</name><operator>|</operator><name>RTLD_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Module %s failed to load: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>onload</name> <operator>=</operator> <operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>,<argument><expr><literal type="string">"RedisModule_OnLoad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>onload</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Module %s does not export RedisModule_OnLoad() "</literal>
<literal type="string">"symbol. Module not loaded."</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_TEMP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>onload</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name>module_argv</name></expr></argument>,<argument><expr><name>module_argc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>module</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleUnregisterCommands</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleUnregisterSharedAPI</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleUnregisterUsedAPI</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeModuleStructure</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Module %s initialization failed. Module not loaded"</literal></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>modules</name></expr></argument>,<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>blocked_clients</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>loadmod</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>moduleLoadQueueEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <ternary><condition><expr><name>module_argc</name></expr> ?</condition><then> <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>module_argc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>module_argc</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>module_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>module_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Module '%s' loaded from %s"</literal></expr></argument>,<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_MODULE_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_MODULE_LOADED</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>.</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>moduleUnload</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name>modules</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>module</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>usedby</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>blocked_clients</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>onunload</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>onunload</name> <operator>=</operator> <operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"RedisModule_OnUnload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>onunload</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCreateContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>REDISMODULE_CTX_TEMP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unload_status</name> <init>= <expr><call><name>onunload</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unload_status</name> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Module %s OnUnload failed. Unload canceled."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECANCELED</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>moduleFreeAuthenticatedClients</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleUnregisterCommands</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleUnregisterSharedAPI</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleUnregisterUsedAPI</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleUnregisterFilters</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>moduleUnsubscribeNotifications</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleUnsubscribeAllServerEvents</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Unknown error"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error when trying to close the %s module: %s"</literal></expr></argument>,
<argument><expr><name><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_MODULE_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_MODULE_UNLOADED</name></expr></argument>,
<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Module %s unloaded"</literal></expr></argument>,<argument><expr><name><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name>modules</name></expr></argument>,<argument><expr><name><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFreeModuleStructure</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>modulePipeReadable</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>


<expr_stmt><expr><call><name>eventLoopHandleOneShotEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>addReplyLoadedModules</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>path</name> <init>= <expr><name><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"ver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>module</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>sds</name></type> <name>genModulesInfoStringRenderModulesList</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>output</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModule</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><name><name>module</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>!=</operator> <call><name>listLast</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>sds</name></type> <name>genModulesInfoStringRenderModuleOptions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>output</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>REDISMODULE_OPTIONS_HANDLE_IO_ERRORS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"handle-io-errors|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>REDISMODULE_OPTIONS_HANDLE_REPL_ASYNC_LOAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"handle-repl-async-load|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdstrim</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>sds</name></type> <name>genModulesInfoString</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sds</name></type> <name>usedby</name> <init>= <expr><call><name>genModulesInfoStringRenderModulesList</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>usedby</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>using</name> <init>= <expr><call><name>genModulesInfoStringRenderModulesList</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>using</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>options</name> <init>= <expr><call><name>genModulesInfoStringRenderModuleOptions</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"module:name=%S,ver=%i,api=%i,filters=%i,"</literal>
<literal type="string">"usedby=%S,using=%S,options=%S\r\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>apiver</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>usedby</name></expr></argument>, <argument><expr><name>using</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>usedby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>using</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>moduleCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subcmd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"LIST"</literal></expr>,
<expr><literal type="string">" Return a list of loaded modules."</literal></expr>,
<expr><literal type="string">"LOAD &lt;path&gt; [&lt;arg&gt; ...]"</literal></expr>,
<expr><literal type="string">" Load a module library from &lt;path&gt;, passing to it any optional arguments."</literal></expr>,
<expr><literal type="string">"UNLOAD &lt;name&gt;"</literal></expr>,
<expr><literal type="string">" Unload a module."</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>,<argument><expr><literal type="string">"load"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>moduleLoad</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Error loading the extension. Please check the server logs."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>,<argument><expr><literal type="string">"unload"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>moduleUnload</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENOENT</name></expr>:</case>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no such module with that name"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EBUSY</name></expr>:</case>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"the module exports one or more module-side data "</literal>
<literal type="string">"types, can't unload"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EPERM</name></expr>:</case>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"the module exports APIs used by other modules. "</literal>
<literal type="string">"Please unload them first and try again"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EAGAIN</name></expr>:</case>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"the module has blocked clients. "</literal>
<literal type="string">"Please wait them unblocked and try again"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"operation not possible."</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Error unloading module: %s"</literal></expr></argument>,<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>,<argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLoadedModules</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>moduleCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>RM_SetLRU</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>lru_idle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>objectSetLRUOrLFU</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>lru_idle</name></expr></argument>, <argument><expr><ternary><condition><expr><name>lru_idle</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>LRU_CLOCK</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_GetLRU</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name> <modifier>*</modifier></type><name>lru_idle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lru_idle</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>&amp;</operator> <name>MAXMEMORY_FLAG_LFU</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lru_idle</name> <operator>=</operator> <call><name>estimateObjectIdleTime</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_SetLFU</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>lfu_freq</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>objectSetLRUOrLFU</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>lfu_freq</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_GetLFU</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>lfu_freq</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lfu_freq</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>&amp;</operator> <name>MAXMEMORY_FLAG_LFU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lfu_freq</name> <operator>=</operator> <call><name>LFUDecrAndReturn</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>


















<function><type><name>int</name></type> <name>RM_GetContextFlagsAll</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>_REDISMODULE_CTX_FLAGS_NEXT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>RM_GetKeyspaceNotificationFlagsAll</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>_REDISMODULE_NOTIFY_NEXT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>RM_GetServerVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>REDIS_VERSION_NUM</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>RM_GetTypeMethodVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>REDISMODULE_TYPE_METHOD_VERSION</name></expr>;</return>
</block_content>}</block></function>


















<function><type><name>int</name></type> <name>RM_ModuleTypeReplaceValue</name><parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>REDISMODULE_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_MODULE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>mt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>old_value</name> <operator>=</operator> <name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>new_value</name></expr>;</expr_stmt>

<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>int</name> <modifier>*</modifier></type><name>RM_GetCommandKeys</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_keys</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>lookupCommand</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>!=</operator> <name>argc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>&lt;</operator> <operator>-</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>getKeysResult</name></type> <name>result</name> <init>= <expr><name>GETKEYS_RESULT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getKeysFromCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_keys</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>numkeys</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>result</name><operator>.</operator><name>numkeys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getKeysFreeResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>result</name><operator>.</operator><name>numkeys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>.</operator><name>numkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RM_GetCurrentCommandName</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr>;</return>
</block_content>}</block></function>








<typedef>typedef <type><struct>struct <name>RedisModuleDefragCtx</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>endtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbid</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleDefragCtx</name>;</typedef>




<function><type><name>int</name></type> <name>RM_RegisterDefragFunc</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleDefragFunc</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>defrag_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>int</name></type> <name>RM_DefragShouldStop</name><parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>endtime</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>endtime</name></name> <operator>&lt;</operator> <call><name>ustime</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>























<function><type><name>int</name></type> <name>RM_DefragCursorSet</name><parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>RM_DefragCursorGet</name><parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>void</name> <modifier>*</modifier></type><name>RM_DefragAlloc</name><parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newptr</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>defragged</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>newptr</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_DefragRedisModuleString</name><parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>activeDefragStringOb</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>defragged</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>moduleLateDefrag</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>endtime</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RedisModuleDefragCtx</name></type> <name>defrag_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>endtime</name></expr>, <expr><name>cursor</name></expr>, <expr><name>key</name></expr>, <expr><name>dbid</name></expr>}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>defrag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>mt</name><operator>-&gt;</operator><name>defrag</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>defrag_ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>defragged</name> <operator>+=</operator> <name><name>defrag_ctx</name><operator>.</operator><name>defragged</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>moduleDefragValue</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>newmv</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newmv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>mv</name> <operator>=</operator> <name>newmv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mt</name><operator>-&gt;</operator><name>defrag</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>effort</name> <init>= <expr><call><name>moduleGetFreeEffort</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>effort</name> <operator>=</operator> <name>SIZE_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>effort</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RedisModuleDefragCtx</name></type> <name>defrag_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>key</name></expr>, <expr><name>dbid</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>defrag</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>defrag_ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator> <operator>+=</operator> <name><name>defrag_ctx</name><operator>.</operator><name>defragged</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>long</name></type> <name>moduleDefragGlobals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>module</name><operator>-&gt;</operator><name>defrag_cb</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleDefragCtx</name></type> <name>defrag_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>module</name><operator>-&gt;</operator><name>defrag_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>defrag_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <name><name>defrag_ctx</name><operator>.</operator><name>defragged</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>RM_GetKeyNameFromDefragCtx</name><parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>RM_GetDbIdFromDefragCtx</name><parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>dbid</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>moduleRegisterCoreAPI</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>moduleapi</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleAPIDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sharedapi</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleAPIDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Calloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Realloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Strdup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateSubcommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetModuleAttribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>IsModuleNameBusy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>WrongArity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithSimpleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithNullArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithEmptyArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplySetArrayLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplySetMapLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplySetSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplySetAttributeLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithEmptyString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithVerbatimString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithVerbatimStringType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithStringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithCString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithBool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithCallReply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithBigNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplyWithLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetSelectedDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SelectDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>KeyExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>OpenKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CloseKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>KeyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ValueLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ListPush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ListPop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ListGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ListSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ListInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ListDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringToLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringToDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringToLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringToStreamID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyProto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>FreeCallReply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyInteger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyBigNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyVerbatim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyBool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplySetElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyMapElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyAttributeElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyArrayElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CallReplyStringPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateStringFromCallReply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateStringFromLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateStringFromDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateStringFromLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateStringFromString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateStringFromStreamID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateStringPrintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>FreeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringPtrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>AutoMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Replicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ReplicateVerbatim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DeleteKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>UnlinkKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringDMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringTruncate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetExpire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetExpire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ResetDataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DbSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>RandomKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetIncrby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetRem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetRangeStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetFirstInScoreRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetLastInScoreRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetFirstInLexRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetLastInLexRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetRangeCurrentElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetRangeNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetRangePrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ZsetRangeEndReached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>HashSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>HashGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamIteratorStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamIteratorStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamIteratorNextID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamIteratorNextField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamIteratorDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamTrimByLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StreamTrimByID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>IsKeysPositionRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>KeyAtPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetClientId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetClientUserNameById</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetContextFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>AvoidReplicaTraffic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>PoolAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateDataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ModuleTypeSetValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ModuleTypeReplaceValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ModuleTypeGetType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ModuleTypeGetValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>IsIOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetModuleOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SignalModifiedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SaveUnsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadUnsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SaveSigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadSigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SaveString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SaveStringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadStringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SaveDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SaveFloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadFloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SaveLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SaveDataTypeToString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadDataTypeFromString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LoadDataTypeFromStringEncver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>EmitAOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LogIOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>_Assert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>LatencyAddSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringAppendBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>TrimStringAllocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>RetainString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>HoldString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StringCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetContextFromIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetKeyNameFromIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetKeyNameFromModuleKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetDbIdFromModuleKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetDbIdFromIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetKeyNameFromOptCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetToKeyNameFromOptCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetDbIdFromOptCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetToDbIdFromOptCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetKeyNameFromDefragCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetDbIdFromDefragCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetKeyNameFromDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetDbIdFromDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>BlockClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>UnblockClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>IsBlockedReplyRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>IsBlockedTimeoutRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetBlockedClientPrivateData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>AbortBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>MonotonicMicroseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>BlockedClientMeasureTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>BlockedClientMeasureTimeEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetThreadSafeContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetDetachedThreadSafeContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>FreeThreadSafeContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ThreadSafeContextLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ThreadSafeContextTryLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ThreadSafeContextUnlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DigestAddStringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DigestAddLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DigestEndSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>NotifyKeyspaceEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetNotifyKeyspaceEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SubscribeToKeyspaceEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>RegisterClusterMessageReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SendClusterMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetClusterNodeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetClusterNodesList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>FreeClusterNodesList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>StopTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetTimerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetMyClusterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetClusterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetRandomBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetRandomHexChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>BlockedClientDisconnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetDisconnectCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetBlockedClientHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetClusterFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>FreeDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictSetC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictReplaceC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictGetC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictDelC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictIteratorStartC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictIteratorStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictIteratorStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictIteratorReseekC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictIteratorReseek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictNextC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictPrevC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictCompareC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DictCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ExportSharedAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetSharedAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>RegisterCommandFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>UnregisterCommandFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CommandFilterArgsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CommandFilterArgGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CommandFilterArgInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CommandFilterArgReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CommandFilterArgDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Fork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SendChildHeartbeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ExitFromChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>KillForkChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>RegisterInfoFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>InfoAddSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>InfoBeginDictField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>InfoEndDictField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>InfoAddFieldString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>InfoAddFieldCString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>InfoAddFieldDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>InfoAddFieldLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>InfoAddFieldULongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetServerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>FreeServerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ServerInfoGetField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ServerInfoGetFieldC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ServerInfoGetFieldSigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ServerInfoGetFieldUnsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ServerInfoGetFieldDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetClientInfoById</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>PublishMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SubscribeToServerEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetLRU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetLRU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetLFU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetLFU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>BlockClientOnKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SignalKeyAsReady</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetBlockedClientReadyKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetUsedMemoryRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>MallocSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ScanCursorCreate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ScanCursorDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ScanCursorRestart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ScanKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>CreateModuleUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetModuleUserACL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetCurrentUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetModuleUserFromUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ACLCheckCommandPermissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ACLCheckKeyPermissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ACLCheckChannelPermissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>ACLAddLogEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>FreeModuleUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DeauthenticateAndCloseClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>AuthenticateClientWithACLUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>AuthenticateClientWithUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetContextFlagsAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetKeyspaceNotificationFlagsAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>IsSubEventSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetServerVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetClientCertificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetCommandKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetCurrentCommandName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>GetTypeMethodVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>RegisterDefragFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DefragAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DefragRedisModuleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DefragShouldStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DefragCursorSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>DefragCursorGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_UNRELEASED_KEYSPEC_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>AddCommandKeySpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetCommandKeySpecBeginSearchIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetCommandKeySpecBeginSearchKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetCommandKeySpecFindKeysRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>SetCommandKeySpecFindKeysKeynum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>EventLoopAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>EventLoopDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>EventLoopAddOneShot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGISTER_API</name><argument_list>(<argument><expr><name>Yield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
