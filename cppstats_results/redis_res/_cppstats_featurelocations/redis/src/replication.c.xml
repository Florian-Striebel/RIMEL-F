<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/replication.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>replicationDiscardCachedMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationResurrectCachedMaster</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationSendAck</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicaPutOnline</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicaStartCommandStream</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cancelReplicationHandshake</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reconnect</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>int</name></type> <name>RDBGeneratedByReplication</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>







<function><type><name>char</name> <modifier>*</modifier></type><name>replicationGetSlaveName</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><name>NET_HOST_PORT_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>slave_addr</name></name> <operator>||</operator>
<call><name>connPeerToString</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>slave_addr</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>slave_addr</name></name></expr> </then><else>: <expr><name>ip</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>slave_listening_port</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>anetFormatAddr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slave_listening_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%s:&lt;unknown-replica-port&gt;"</literal></expr></argument>,<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"client id #%llu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>bg_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>O_RDONLY</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bioCreateCloseJob</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>createReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>replBacklog</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>unindexed_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>blocks_index</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>resizeReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name> <operator>&lt;</operator> <name>CONFIG_REPL_BACKLOG_MIN_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name> <operator>=</operator> <name>CONFIG_REPL_BACKLOG_MIN_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>incrementalTrimReplicationBacklog</name><argument_list>(<argument><expr><name>REPL_BACKLOG_TRIM_BLOCKS_PER_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(
<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>freeReplicationBacklogRefMemAsync</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>blocks_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetReplicationBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>createReplicationBacklogIndex</name><parameter_list>(<parameter><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>unindexed_count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>unindexed_count</name></name> <operator>&gt;=</operator> <name>REPL_BACKLOG_INDEX_PER_BLOCKS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>encoded_offset</name> <init>= <expr><call><name>htonu64</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repl_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>blocks_index</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>encoded_offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ln</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>unindexed_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rebaseReplicationBuffer</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>base_repl_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>blocks_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>blocks_index</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>unindexed_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>repl_offset</name></name> <operator>+=</operator> <name>base_repl_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>createReplicationBacklogIndex</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetReplicationBuffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_buffer_mem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>zfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>canFeedReplicaReplBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>replica</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_REPL_RDBONLY</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>replica</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>prepareReplicasToWrite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prepared</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>canFeedReplicaReplBuffer</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>prepareClientToWrite</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prepared</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>prepared</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>feedReplicationBufferWithObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>llstr</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>llstr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>llstr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>feedReplicationBuffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>incrementalTrimReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>max_blocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>trimmed_blocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name> <operator>&amp;&amp;</operator>
<name>trimmed_blocks</name> <operator>&lt;</operator> <name>max_blocks</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>







<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>first</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>fo</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fo</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>-</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>fo</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator>
<name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>fo</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>trimmed_blocks</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>-=</operator> <name><name>fo</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>listNextNode</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>replBufBlock</name> <operator>*</operator><operator>)</operator><call><name>listNodeValue</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>refcount</name><operator>++</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>encoded_offset</name> <init>= <expr><call><name>htonu64</name><argument_list>(<argument><expr><name><name>fo</name><operator>-&gt;</operator><name>repl_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>blocks_index</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>encoded_offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>fo</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fo</name><operator>-&gt;</operator><name>used</name></name> <operator>==</operator> <name><name>fo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_buffer_mem</name></name> <operator>-=</operator> <operator>(</operator><name><name>fo</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>listNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>replBufBlock</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>-</operator>
<name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>freeReplicaReferencedReplBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>replica</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name><name>replica</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incrementalTrimReplicationBacklog</name><argument_list>(<argument><expr><name>REPL_BACKLOG_TRIM_BLOCKS_PER_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>replica</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replica</name><operator>-&gt;</operator><name>ref_block_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>feedReplicationBuffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>repl_block_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>prepareReplicasToWrite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>start_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>start_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add_new_block</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listLast</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><ternary><condition><expr><name>ln</name></expr> ?</condition><then> <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>&amp;&amp;</operator> <name><name>tail</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>tail</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_node</name> <operator>=</operator> <call><name>listLast</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>used</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name> <init>= <expr><name><name>tail</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>tail</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>copy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>avail</name> <operator>&gt;=</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>avail</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tail</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>tail</name><operator>-&gt;</operator><name>used</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>used</name></name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>copy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>usable_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PROTO_REPLY_CHUNK_BYTES</name><operator>)</operator></expr> ?</condition><then> <expr><name>PROTO_REPLY_CHUNK_BYTES</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>zmalloc_usable</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>replBufBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>usable_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>usable_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>replBufBlock</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>repl_offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>-</operator> <name><name>tail</name><operator>-&gt;</operator><name>used</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>repl_block_id</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tail</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_buffer_mem</name></name> <operator>+=</operator> <operator>(</operator><name>usable_size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>listNode</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>add_new_block</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_node</name> <operator>=</operator> <call><name>listLast</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>canFeedReplicaReplBuffer</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>=</operator> <name>start_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>ref_block_pos</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>replBufBlock</name> <operator>*</operator><operator>)</operator><call><name>listNodeValue</name><argument_list>(<argument><expr><name>start_node</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>refcount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>add_new_block</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>closeClientOnOutputBufferLimitReached</name><argument_list>(<argument><expr><name>slave</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>=</operator> <name>start_node</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>replBufBlock</name> <operator>*</operator><operator>)</operator><call><name>listNodeValue</name><argument_list>(<argument><expr><name>start_node</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>refcount</name><operator>++</operator></expr>;</expr_stmt>



<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>add_new_block</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>start_pos</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>add_new_block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>createReplicationBacklogIndex</name><argument_list>(<argument><expr><call><name>listLast</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>incrementalTrimReplicationBacklog</name><argument_list>(<argument><expr><name>REPL_BACKLOG_TRIM_BLOCKS_PER_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>replicationFeedSlaves</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>slaves</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>llstr</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>dictid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>dictid</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dictid</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>listLength</name><argument_list>(<argument><expr><name>slaves</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name>listLength</name><argument_list>(<argument><expr><name>slaves</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name> <operator>!=</operator> <name>dictid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>selectcmd</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>dictid</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dictid</name> <operator>&lt;</operator> <name>PROTO_SHARED_SELECT_CMDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>selectcmd</name> <operator>=</operator> <name><name>shared</name><operator>.</operator><name>select</name><index>[<expr><name>dictid</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dictid_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dictid_len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>llstr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>dictid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>selectcmd</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,
<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"*2\r\n$6\r\nSELECT\r\n$%d\r\n%s\r\n"</literal></expr></argument>,
<argument><expr><name>dictid_len</name></expr></argument>, <argument><expr><name>llstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>feedReplicationBufferWithObject</name><argument_list>(<argument><expr><name>selectcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dictid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dictid</name> <operator>&gt;=</operator> <name>PROTO_SHARED_SELECT_CMDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>selectcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name> <operator>=</operator> <name>dictid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>aux</name><index>[<expr><name>LONG_STR_SIZE</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>aux</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>aux</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aux</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aux</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>feedReplicationBuffer</name><argument_list>(<argument><expr><name>aux</name></expr></argument>,<argument><expr><name>len</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>objlen</name> <init>= <expr><call><name>stringObjectLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name><name>aux</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>aux</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>objlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aux</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aux</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>feedReplicationBuffer</name><argument_list>(<argument><expr><name>aux</name></expr></argument>,<argument><expr><name>len</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>feedReplicationBufferWithObject</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>feedReplicationBuffer</name><argument_list>(<argument><expr><name>aux</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>showLatestBacklog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dumplen</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>&lt;</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>dumplen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dumplen</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sds</name></type> <name>dump</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>listLast</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>dumplen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>thislen</name> <init>= <expr><ternary><condition><expr><name><name>o</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;=</operator> <name>dumplen</name></expr> ?</condition><then> <expr><name>dumplen</name></expr> </then><else>: <expr><name><name>o</name><operator>-&gt;</operator><name>used</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>head</name> <init>= <expr><call><name>sdscatrepr</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>o</name><operator>-&gt;</operator><name>used</name></name><operator>-</operator><name>thislen</name></expr></argument>, <argument><expr><name>thislen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>tmp</name> <init>= <expr><call><name>sdscatsds</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dump</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dumplen</name> <operator>-=</operator> <name>thislen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>listPrevNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Latest backlog is: '%s'"</literal></expr></argument>, <argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>replicationFeedStreamFromMasterStream</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%zu:"</literal></expr></argument>,<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isprint</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>feedReplicationBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>replicationFeedMonitors</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>monitors</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>monitors</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>loading</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>cmdrepr</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>cmdobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdrepr</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>cmdrepr</name></expr></argument>,<argument><expr><literal type="string">"%ld.%06ld "</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SCRIPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdrepr</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>cmdrepr</name></expr></argument>,<argument><expr><literal type="string">"[%d lua] "</literal></expr></argument>,<argument><expr><name>dictid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_UNIX_SOCKET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdrepr</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>cmdrepr</name></expr></argument>,<argument><expr><literal type="string">"[%d unix:%s] "</literal></expr></argument>,<argument><expr><name>dictid</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cmdrepr</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>cmdrepr</name></expr></argument>,<argument><expr><literal type="string">"[%d %s] "</literal></expr></argument>,<argument><expr><name>dictid</name></expr></argument>,<argument><expr><call><name>getClientPeerId</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>encoding</name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdrepr</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>cmdrepr</name></expr></argument>, <argument><expr><literal type="string">"\"%ld\""</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cmdrepr</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>cmdrepr</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>argc</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdrepr</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>cmdrepr</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>cmdrepr</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>cmdrepr</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdobj</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><name>cmdrepr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>monitors</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>,<argument><expr><name>cmdobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateClientMemUsage</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>cmdobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>long</name> <name>long</name></type> <name>addReplyReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>skip</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"[PSYNC] Replica request offset: %lld"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"[PSYNC] Backlog history len is zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"[PSYNC] Backlog size: %lld"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"[PSYNC] First byte: %lld"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"[PSYNC] History len: %lld"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"[PSYNC] Skipping: %lld"</literal></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>blocks_index</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>encoded_offset</name> <init>= <expr><call><name>htonu64</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>blocks_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>encoded_offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>raxEOF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>listNode</name> <operator>*</operator><operator>)</operator><name><name>ri</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>raxPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>raxPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>listNode</name> <operator>*</operator><operator>)</operator><name><name>ri</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>repl_offset</name></name> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;=</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>listNextNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>prepareClientToWrite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref_repl_buf_node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref_block_pos</name></name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name><name>o</name><operator>-&gt;</operator><name>repl_offset</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>-</operator> <name>skip</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>long</name> <name>long</name></type> <name>getPsyncInitialOffset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>int</name></type> <name>replicationSetupSlaveForFullResync</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>psync_initial_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>=</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PRE_PSYNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"+FULLRESYNC %s %lld\r\n"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connWrite</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>masterTryPartialResynchronization</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>psync_offset</name></decl>, <decl><type ref="prev"/><name>psync_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>master_replid</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>psync_offset</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>need_full_resync</name>;</goto></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>master_replid</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>master_replid</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>psync_offset</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>second_replid_offset</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>master_replid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>master_replid</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name>master_replid</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Partial resynchronization not accepted: "</literal>
<literal type="string">"Replication ID mismatch (Replica asked for '%s', my "</literal>
<literal type="string">"replication IDs are '%s' and '%s')"</literal></expr></argument>,
<argument><expr><name>master_replid</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Partial resynchronization not accepted: "</literal>
<literal type="string">"Requested offset for second ID was %lld, but I can reply "</literal>
<literal type="string">"up to %lld"</literal></expr></argument>, <argument><expr><name>psync_offset</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>second_replid_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Full resync requested by replica %s"</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>need_full_resync</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>||</operator>
<call><name><name>psync_offset</name> <argument_list type="generic">&lt; <argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>offset</name></name> <operator>||</operator>
<name>psync_offset</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Unable to partial resync with replica %s for lack of backlog (Replica request was: %lld)."</literal></expr></argument>, <argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psync_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psync_offset</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Warning: replica %s tried to PSYNC with an offset that is greater than the master replication offset."</literal></expr></argument>, <argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>need_full_resync</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_SLAVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>replstate</name></name> <operator>=</operator> <name>SLAVE_STATE_ONLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>repl_ack_time</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>repl_start_cmd_stream_on_ack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>slave_capa</name></name> <operator>&amp;</operator> <name>SLAVE_CAPA_PSYNC2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"+CONTINUE %s\r\n"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"+CONTINUE\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psync_len</name> <operator>=</operator> <call><name>addReplyReplicationBacklog</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>psync_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Partial resynchronization request from %s accepted. Sending %lld bytes of backlog starting from offset %lld."</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psync_len</name></expr></argument>, <argument><expr><name>psync_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>refreshGoodSlavesCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_REPLICA_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>

<label><name>need_full_resync</name>:</label>




<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type> <name>startBgsaveForReplication</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mincapa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>socket_target</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>




<expr_stmt><expr><name>socket_target</name> <operator>=</operator> <operator>(</operator><name><name>server</name><operator>.</operator><name>repl_diskless_sync</name></name> <operator>||</operator> <name>req</name> <operator>&amp;</operator> <name>SLAVE_REQ_RDB_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mincapa</name> <operator>&amp;</operator> <name>SLAVE_CAPA_EOF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>socket_target</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>SLAVE_REQ_RDB_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Starting BGSAVE for SYNC with target: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>socket_target</name></expr> ?</condition><then> <expr><literal type="string">"replicas sockets"</literal></expr> </then><else>: <expr><literal type="string">"disk"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>rsiptr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>socket_target</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveToSlavesSockets</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveBackground</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"BGSAVE for replication: replication information not available, can't generate the RDB file right now. Try later."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>socket_target</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>rdb_del_sync_files</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>RDBGeneratedByReplication</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"BGSAVE for replication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>=</operator> <name>REPL_STATE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_SLAVE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,
<argument><expr><literal type="string">"BGSAVE failed, replication can't continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_CLOSE_AFTER_REPLY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>socket_target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>slave_req</name></name> <operator>!=</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>replicationSetupSlaveForFullResync</name><argument_list>(<argument><expr><name>slave</name></expr></argument>, <argument><expr><call><name>getPsyncInitialOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>syncCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"psync"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"failover"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failover request received for replid %s."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"PSYNC FAILOVER can't be sent to a master."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>replicationUnsetMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>client</name> <init>= <expr><call><name>catClientInfoString</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"MASTER MODE enabled (failover request from '%s')"</literal></expr></argument>,<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"PSYNC FAILOVER replid must match my replid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>!=</operator> <name>NO_FAILOVER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-NOMASTERLINK Can't SYNC while failing over"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>!=</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-NOMASTERLINK Can't SYNC while not connected with my master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>clientHasPendingReplies</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SYNC and PSYNC are invalid with pending output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>slave_req</name></name> <operator>&amp;</operator> <name>SLAVE_REQ_RDB_MASK</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>slave_capa</name></name> <operator>&amp;</operator> <name>SLAVE_CAPA_EOF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Filtered replica requires EOF capability"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Replica %s asks for synchronization"</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"psync"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>masterTryPartialResynchronization</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_ok</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>master_replid</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>master_replid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_err</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PRE_PSYNC</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_full</name></name><operator>++</operator></expr>;</expr_stmt>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>replstate</name></name> <operator>=</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_disable_tcp_nodelay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>connDisableTcpNoDelay</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>repldbfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_SLAVE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>changeReplicationId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearReplicationId2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>createReplicationBacklog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Replication backlog created, my new "</literal>
<literal type="string">"replication IDs are '%s' and '%s'"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>==</operator> <name>RDB_CHILD_TYPE_DISK</name></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slave</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><operator>(</operator><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_REPL_RDBONLY</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_REPL_RDBONLY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>slave_capa</name></name> <operator>&amp;</operator> <name><name>slave</name><operator>-&gt;</operator><name>slave_capa</name></name><operator>)</operator> <operator>==</operator> <name><name>slave</name><operator>-&gt;</operator><name>slave_capa</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>slave_req</name></name> <operator>==</operator> <name><name>slave</name><operator>-&gt;</operator><name>slave_req</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_REPL_RDBONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copyReplicaOutputBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>replicationSetupSlaveForFullResync</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>psync_initial_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Waiting for end of BGSAVE for SYNC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Can't attach the replica to the current BGSAVE. Waiting for next BGSAVE for SYNC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>==</operator> <name>RDB_CHILD_TYPE_SOCKET</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Current BGSAVE has socket target. Waiting for next BGSAVE for SYNC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>slave_capa</name></name> <operator>&amp;</operator> <name>SLAVE_CAPA_EOF</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>repl_diskless_sync_delay</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Delay next BGSAVE for diskless SYNC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>startBgsaveForReplication</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slave_capa</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slave_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"No BGSAVE in progress, but another BG operation is active. "</literal>
<literal type="string">"BGSAVE for replication delayed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></function>



































<function><type><name>void</name></type> <name>replconfCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"listening-port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slave_listening_port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"ip-address"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>addr</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>NET_HOST_STR_LEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>slave_addr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slave_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slave_addr</name></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"REPLCONF ip-address provided by "</literal>
<literal type="string">"replica instance is too long: %zd bytes"</literal></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"capa"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"eof"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slave_capa</name></name> <operator>|=</operator> <name>SLAVE_CAPA_EOF</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"psync2"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slave_capa</name></name> <operator>|=</operator> <name>SLAVE_CAPA_PSYNC2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"ack"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SLAVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>repl_ack_off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>repl_ack_off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>repl_ack_time</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>checkChildrenDone</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>repl_start_cmd_stream_on_ack</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_ONLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>replicaStartCommandStream</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"getack"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>replicationSendAck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"rdb-only"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>long</name></type> <name>rdb_only</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getRangeLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>rdb_only</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rdb_only</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_REPL_RDBONLY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_REPL_RDBONLY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"rdb-filter-only"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<decl_stmt><decl><type><name>int</name></type> <name>filter_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>filters</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>filters</name> <operator>=</operator> <call><name>sdssplitargs</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_count</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Missing rdb-filter-only values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slave_req</name></name> <operator>|=</operator> <name>SLAVE_REQ_RDB_EXCLUDE_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slave_req</name></name> <operator>|=</operator> <name>SLAVE_REQ_RDB_EXCLUDE_FUNCTIONS</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"functions"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slave_req</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SLAVE_REQ_RDB_EXCLUDE_FUNCTIONS</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Unsupported rdb-filter-only option: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unrecognized REPLCONF option: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>replicaPutOnline</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_REPL_RDBONLY</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>=</operator> <name>SLAVE_STATE_ONLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repl_ack_time</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refreshGoodSlavesCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_REPLICA_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Synchronization with replica %s succeeded"</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>replicaStartCommandStream</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repl_start_cmd_stream_on_ack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_REPL_RDBONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Close the connection with replica %s as RDB transfer is complete"</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clientInstallWriteHandler</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>removeRDBUsedToSyncReplicas</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>rdb_del_sync_files</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RDBGeneratedByReplication</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>allPersistenceDisabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>RDBGeneratedByReplication</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delrdb</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slave</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name> <operator>||</operator>
<name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name> <operator>||</operator>
<name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_SEND_BULK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>delrdb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>delrdb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RDBGeneratedByReplication</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Removing the RDB file used to feed replicas "</literal>
<literal type="string">"in a persistence-less instance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bg_unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sendBulkToSlave</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>connGetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PROTO_IOBUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwritten</name></decl>, <decl><type ref="prev"/><name>buflen</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replpreamble</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <call><name>connWrite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>replpreamble</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>replpreamble</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Write error sending RDB preamble to replica: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>, <argument><expr><name>nwritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>replpreamble</name></name></expr></argument>,<argument><expr><name>nwritten</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>replpreamble</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>replpreamble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>replpreamble</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>repldbfd</name></name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name></expr></argument>,<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>repldbfd</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>PROTO_IOBUF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Read error sending DB to replica: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>buflen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"premature EOF"</literal></expr> </then><else>: <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nwritten</name> <operator>=</operator> <call><name>connWrite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>buflen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Write error sending DB to replica: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>, <argument><expr><name>nwritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name> <operator>==</operator> <name><name>slave</name><operator>-&gt;</operator><name>repldbsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>repldbfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repldbfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSetWriteHandler</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicaPutOnline</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicaStartCommandStream</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rdbPipeWriteHandlerConnRemoved</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>connHasWriteHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>connSetWriteHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>connGetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repl_last_partial_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>, <argument><expr><name>rdbPipeReadHandler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating server.rdb_pipe_read file event."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rdbPipeWriteHandler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>connGetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nwritten</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nwritten</name> <operator>=</operator> <call><name>connWrite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_buff</name></name> <operator>+</operator> <name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Write error sending DB to replica: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>, <argument><expr><name>nwritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repl_last_partial_write</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rdbPipeWriteHandlerConnRemoved</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rdbPipeReadHandler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>rdb_pipe_buff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_buff</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>PROTO_IOBUF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_buff</name></name></expr></argument>, <argument><expr><name>PROTO_IOBUF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Diskless rdb transfer, read error sending DB to replicas: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>rdb_pipe_numconns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>connGetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>killRDBChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stillUp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>rdb_pipe_numconns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>stillUp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Diskless rdb transfer, done reading from pipe, %d replicas still up."</literal></expr></argument>, <argument><expr><name>stillUp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_child_exit_pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_exit_pipe</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stillAlive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>rdb_pipe_numconns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nwritten</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>connGetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nwritten</name> <operator>=</operator> <call><name>connWrite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_buff</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Diskless rdb transfer, write error sending DB to replica: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name> <operator>=</operator> <name>nwritten</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>, <argument><expr><name>nwritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repl_last_partial_write</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSetWriteHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>rdbPipeWriteHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>stillAlive</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>stillAlive</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Diskless rdb transfer, last replica dropped, killing fork child."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>killRDBChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name> <operator>||</operator> <name>stillAlive</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>















<function><type><name>void</name></type> <name>updateSlavesWaitingBgsave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bgsaveerr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redis_stat</name></name></type> <name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bgsaveerr</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"SYNC failed. BGSAVE child returned an error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_CHILD_TYPE_SOCKET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Streamed RDB transfer with replica %s succeeded (socket). Waiting for REPLCONF ACK from slave to enable streaming"</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

























<expr_stmt><expr><call><name>replicaPutOnline</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repl_start_cmd_stream_on_ack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>slave</name><operator>-&gt;</operator><name>repldbfd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>redis_fstat</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>repldbfd</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"SYNC failed. Can't open/stat DB after BGSAVE: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repldboff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>repldbsize</name></name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>=</operator> <name>SLAVE_STATE_SEND_BULK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>replpreamble</name></name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"$%lld\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>slave</name><operator>-&gt;</operator><name>repldbsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connSetWriteHandler</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connSetWriteHandler</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>sendBulkToSlave</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>changeReplicationId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>replid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clearReplicationId2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>replid2</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>second_replid_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>shiftReplicationId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name><name>server</name><operator>.</operator><name>second_replid_offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changeReplicationId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Setting secondary replication ID to %s, valid up to offset: %lld. New replication ID is %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>second_replid_offset</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>slaveIsInHandshakeState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>&gt;=</operator> <name>REPL_STATE_RECEIVE_PING_REPLY</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>&lt;=</operator> <name>REPL_STATE_RECEIVE_PSYNC_REPLY</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>replicationSendNewlineToMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>newline_sent</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>newline_sent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newline_sent</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>connWrite</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>replicationEmptyDbCallback</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>replicationSendNewlineToMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>replicationCreateMasterClient</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name></name> <operator>=</operator> <call><name>createClient</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>readQueryFromClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>












<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_MASTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_initial_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>read_reploff</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>replid</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>master_replid</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master_replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PRE_PSYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dbid</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>restartAOFAfterSYNC</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tries</name></decl>, <decl><type ref="prev"/><name>max_tries</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>tries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tries</name> <operator>&lt;</operator> <name>max_tries</name></expr>;</condition> <incr><expr><operator>++</operator><name>tries</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>startAppendOnly</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed enabling the AOF after successful master synchronization! "</literal>
<literal type="string">"Trying it again in one second."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>tries</name> <operator>==</operator> <name>max_tries</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"FATAL: this replica instance finished the synchronization with "</literal>
<literal type="string">"its master, but the AOF can't be turned on. Exiting now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>useDisklessLoad</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>enabled</name> <init>= <expr><name><name>server</name><operator>.</operator><name>repl_diskless_load</name></name> <operator>==</operator> <name>REPL_DISKLESS_LOAD_SWAPDB</name> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>repl_diskless_load</name></name> <operator>==</operator> <name>REPL_DISKLESS_LOAD_WHEN_DB_EMPTY</name> <operator>&amp;&amp;</operator> <call><name>dbTotalServerKeyCount</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>moduleAllDatatypesHandleErrors</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Skipping diskless-load because there are modules that don't handle read errors."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_diskless_load</name></name> <operator>==</operator> <name>REPL_DISKLESS_LOAD_SWAPDB</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>moduleAllModulesHandleReplAsyncLoad</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Skipping diskless-load because there are modules that are not aware of async replication."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>enabled</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>redisDb</name> <modifier>*</modifier></type><name>disklessLoadInitTempDb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>initTempDb</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>disklessLoadDiscardTempDb</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>tempDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>discardTempDb</name><argument_list>(<argument><expr><name>tempDb</name></expr></argument>, <argument><expr><name>replicationEmptyDbCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>replicationAttachToNewMaster</name><parameter_list>()</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationDiscardCachedMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>disconnectSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplicationBacklog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPL_MAX_WRITTEN_BEFORE_FSYNC</name></cpp:macro> <cpp:value>(1024*1024*8)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>readSyncBulkPayload</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PROTO_IOBUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>, <decl><type ref="prev"/><name>readlen</name></decl>, <decl><type ref="prev"/><name>nwritten</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_diskless_load</name> <init>= <expr><call><name>useDisklessLoad</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>diskless_load_tempDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>temp_functions_lib_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>empty_db_flags</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>repl_slave_lazy_flush</name></name></expr> ?</condition><then> <expr><name>EMPTYDB_ASYNC</name></expr> </then><else>:
<expr><name>EMPTYDB_NO_FLAGS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>left</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>eofmark</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>lastbytes</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>usemark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connSyncReadLine</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1024</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_syncio_timeout</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"I/O error reading bulk count from MASTER: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"MASTER aborted replication with an error: %s"</literal></expr></argument>,
<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Bad protocol from MASTER, the first byte is not '$' (we received '%s'), are you sure the host and port are right?"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"EOF:"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>usemark</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>eofmark</name></expr></argument>,<argument><expr><name>buf</name><operator>+</operator><literal type="number">5</literal></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lastbytes</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: receiving streamed RDB from master with EOF %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>use_diskless_load</name></expr>?</condition><then> <expr><literal type="string">"to parser"</literal></expr></then><else>:<expr><literal type="string">"to disk"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>usemark</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: receiving %lld bytes from master %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>use_diskless_load</name></expr>?</condition><then> <expr><literal type="string">"to parser"</literal></expr></then><else>:<expr><literal type="string">"to disk"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_diskless_load</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>usemark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>readlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>readlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>left</name> <operator>&lt;</operator> <operator>(</operator><name>signed</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><name>left</name></expr> </then><else>: <expr><operator>(</operator><name>signed</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>connRead</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"I/O error trying to sync with MASTER: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"connection lost"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_input_bytes</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>eof_reached</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>usemark</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;=</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lastbytes</name></expr></argument>,<argument><expr><name>buf</name><operator>+</operator><name>nread</name><operator>-</operator><name>CONFIG_RUN_ID_SIZE</name></expr></argument>,
<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rem</name> <init>= <expr><name>CONFIG_RUN_ID_SIZE</name><operator>-</operator><name>nread</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>lastbytes</name></expr></argument>,<argument><expr><name>lastbytes</name><operator>+</operator><name>nread</name></expr></argument>,<argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lastbytes</name><operator>+</operator><name>rem</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>lastbytes</name></expr></argument>,<argument><expr><name>eofmark</name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eof_reached</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nwritten</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>nread</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>nread</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Write error or short write writing to the DB dump file "</literal>
<literal type="string">"needed for MASTER &lt;-&gt; REPLICA synchronization: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>nwritten</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"short write"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>usemark</name> <operator>&amp;&amp;</operator> <name>eof_reached</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name> <operator>-</operator> <name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Error truncating the RDB file received from the master "</literal>
<literal type="string">"for SYNC: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name> <operator>&gt;=</operator>
<name><name>server</name><operator>.</operator><name>repl_transfer_last_fsync_off</name></name> <operator>+</operator> <name>REPL_MAX_WRITTEN_BEFORE_FSYNC</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>sync_size</name> <init>= <expr><name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name> <operator>-</operator>
<name><name>server</name><operator>.</operator><name>repl_transfer_last_fsync_off</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rdb_fsync_range</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_last_fsync_off</name></name></expr></argument>, <argument><expr><name>sync_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_last_fsync_off</name></name> <operator>+=</operator> <name>sync_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>usemark</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eof_reached</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eof_reached</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>













<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stopAppendOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_diskless_load</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_diskless_load</name></name> <operator>==</operator> <name>REPL_DISKLESS_LOAD_SWAPDB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diskless_load_tempDb</name> <operator>=</operator> <call><name>disklessLoadInitTempDb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_functions_lib_ctx</name> <operator>=</operator> <call><name>functionsLibCtxCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_REPL_ASYNC_LOAD</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_STARTED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>replicationAttachToNewMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: Flushing old data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emptyData</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>empty_db_flags</name></expr></argument>,<argument><expr><name>replicationEmptyDbCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: Loading DB in memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name> <init>= <expr><name>RDB_SAVE_INFO_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>use_diskless_load</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rio</name></type> <name>rdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>dbarray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>functions_lib_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asyncLoading</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_diskless_load</name></name> <operator>==</operator> <name>REPL_DISKLESS_LOAD_SWAPDB</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>master_replid</name></name></expr></argument>, <argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asyncLoading</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dbarray</name> <operator>=</operator> <name>diskless_load_tempDb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>functions_lib_ctx</name> <operator>=</operator> <name>temp_functions_lib_ctx</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dbarray</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>functions_lib_ctx</name> <operator>=</operator> <call><name>functionsLibCtxGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>functionsLibCtxClear</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rioInitWithConn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>conn</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>connBlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connRecvTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_timeout</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>startLoading</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name></expr></argument>, <argument><expr><name>RDBFLAGS_REPLICATION</name></expr></argument>, <argument><expr><name>asyncLoading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>loadingFailed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rdbLoadingCtx</name></type> <name>loadingCtx</name> <init>= <expr><block>{ <expr><operator>.</operator><name>dbarray</name> <operator>=</operator> <name>dbarray</name></expr>, <expr><operator>.</operator><name>functions_lib_ctx</name> <operator>=</operator> <name>functions_lib_ctx</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbLoadRioWithLoadingCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>RDBFLAGS_REPLICATION</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>loadingCtx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed trying to load the MASTER synchronization DB "</literal>
<literal type="string">"from socket: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loadingFailed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>usemark</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rioRead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>eofmark</name></expr></argument>, <argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Replication stream EOF marker is broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loadingFailed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>loadingFailed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stopLoading</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rioFreeConn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_diskless_load</name></name> <operator>==</operator> <name>REPL_DISKLESS_LOAD_SWAPDB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_REPL_ASYNC_LOAD</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_ABORTED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>disklessLoadDiscardTempDb</name><argument_list>(<argument><expr><name>diskless_load_tempDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>functionsLibCtxFree</name><argument_list>(<argument><expr><name>temp_functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: Discarding temporary DB in background"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>emptyData</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>empty_db_flags</name></expr></argument>,<argument><expr><name>replicationEmptyDbCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_diskless_load</name></name> <operator>==</operator> <name>REPL_DISKLESS_LOAD_SWAPDB</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>replicationAttachToNewMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: Swapping active DB with loaded DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swapMainDbWithTempDb</name><argument_list>(<argument><expr><name>diskless_load_tempDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>functionsLibCtxSwapWithCurrent</name><argument_list>(<argument><expr><name>temp_functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_REPL_ASYNC_LOAD</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_COMPLETED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>disklessLoadDiscardTempDb</name><argument_list>(<argument><expr><name>diskless_load_tempDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: Discarding old DB in background"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stopLoading</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rioFreeConn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connNonBlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connRecvTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Replica is about to load the RDB file received from the "</literal>
<literal type="string">"master, but there is a pending RDB child running. "</literal>
<literal type="string">"Killing process %ld and removing its temp file to avoid "</literal>
<literal type="string">"any race"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>killRDBChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed trying to sync the temp DB to disk in "</literal>
<literal type="string">"MASTER &lt;-&gt; REPLICA synchronization: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>old_rdb_fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>O_RDONLY</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed trying to rename the temp DB into %s in "</literal>
<literal type="string">"MASTER &lt;-&gt; REPLICA synchronization: %s"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_rdb_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>old_rdb_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_rdb_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bioCreateCloseJob</name><argument_list>(<argument><expr><name>old_rdb_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rdbLoad</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>,<argument><expr><name>RDBFLAGS_REPLICATION</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed trying to load the MASTER synchronization "</literal>
<literal type="string">"DB from disk: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_del_sync_files</name></name> <operator>&amp;&amp;</operator> <call><name>allPersistenceDisabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Removing the RDB file obtained from "</literal>
<literal type="string">"the master. This replica has persistence "</literal>
<literal type="string">"disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bg_unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_del_sync_files</name></name> <operator>&amp;&amp;</operator> <call><name>allPersistenceDisabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Removing the RDB file obtained from "</literal>
<literal type="string">"the master. This replica has persistence "</literal>
<literal type="string">"disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bg_unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>replicationCreateMasterClient</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name></expr></argument>,<argument><expr><name><name>rsi</name><operator>.</operator><name>repl_stream_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_down_since</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_MASTER_LINK_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_MASTER_LINK_UP</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>replid</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearReplicationId2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>createReplicationBacklog</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: Finished with success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STATUS=MASTER &lt;-&gt; REPLICA sync: Finished with success. Ready to accept connections in read-write mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>usemark</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>replicationSendAck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>restartAOFAfterSYNC</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>receiveSynchronousResponse</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connSyncReadLine</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_syncio_timeout</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"-Reading from master: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name><modifier>*</modifier></type> <name>sendCommandRaw</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connSyncWrite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_syncio_timeout</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"-Writing to master: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>char</name> <modifier>*</modifier></type><name>sendCommand</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>cmd</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>cmdargs</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>argslen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmdargs</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>cmdargs</name></expr></argument>,<argument><expr><literal type="string">"$%zu\r\n%s\r\n"</literal></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argslen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*%zu\r\n"</literal></expr></argument>,<argument><expr><name>argslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>cmdargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cmdargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>err</name> <init>= <expr><call><name>sendCommandRaw</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>char</name> <modifier>*</modifier></type><name>sendCommandArgv</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>argv_lens</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>cmd</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*%i\r\n"</literal></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>argv_lens</name></expr> ?</condition><then> <expr><name><name>argv_lens</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"$%i\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>arg</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>err</name> <init>= <expr><call><name>sendCommandRaw</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYNC_WRITE_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYNC_WAIT_REPLY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYNC_CONTINUE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYNC_FULLRESYNC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYNC_NOT_SUPPORTED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYNC_TRY_LATER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>slaveTryPartialResynchronization</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read_reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psync_replid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psync_offset</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>reply</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>read_reply</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_initial_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>psync_replid</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>replid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psync_offset</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psync_offset</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>reploff</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Trying a partial resynchronization (request %s:%s)."</literal></expr></argument>, <argument><expr><name>psync_replid</name></expr></argument>, <argument><expr><name>psync_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Partial resynchronization not possible (no cached master)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psync_replid</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>psync_offset</name></expr></argument>,<argument><expr><literal type="string">"-1"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>==</operator> <name>FAILOVER_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>sendCommand</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="string">"PSYNC"</literal></expr></argument>,<argument><expr><name>psync_replid</name></expr></argument>,<argument><expr><name>psync_offset</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>sendCommand</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="string">"PSYNC"</literal></expr></argument>,<argument><expr><name>psync_replid</name></expr></argument>,<argument><expr><name>psync_offset</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Unable to send PSYNC to master: %s"</literal></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PSYNC_WRITE_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>PSYNC_WAIT_REPLY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>receiveSynchronousResponse</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PSYNC_WAIT_REPLY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"+FULLRESYNC"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>replid</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>offset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>replid</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>replid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>replid</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>replid</name></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>replid</name> <operator>||</operator> <operator>!</operator><name>offset</name> <operator>||</operator> <operator>(</operator><name>offset</name><operator>-</operator><name>replid</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Master replied with wrong +FULLRESYNC syntax."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master_replid</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master_replid</name></name></expr></argument>, <argument><expr><name>replid</name></expr></argument>, <argument><expr><name>offset</name><operator>-</operator><name>replid</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_replid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_initial_offset</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>offset</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Full resync from master: %s:%lld"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>master_replid</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>master_initial_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PSYNC_FULLRESYNC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"+CONTINUE"</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Successful partial resynchronization with master."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>reply</name><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>reply</name><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>end</name><operator>-</operator><name>start</name> <operator>==</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>new</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><name>start</name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>replid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Master replication ID changed to %s"</literal></expr></argument>,<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>replid</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>second_replid_offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,<argument><expr><name>new</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>replid</name></name></expr></argument>,<argument><expr><name>new</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>disconnectSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationResurrectCachedMaster</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>createReplicationBacklog</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>PSYNC_CONTINUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"-NOMASTERLINK"</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"-LOADING"</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Master is currently unable to PSYNC "</literal>
<literal type="string">"but should be in the future: %s"</literal></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PSYNC_TRY_LATER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"-ERR"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unexpected reply to PSYNC from master: %s"</literal></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Master does not support PSYNC or is in "</literal>
<literal type="string">"error state (reply: %s)"</literal></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PSYNC_NOT_SUPPORTED</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>syncWithMaster</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpfile</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxtries</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>psync_result</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error condition on socket for SYNC: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Non blocking connect for SYNC fired the event."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>syncWithMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSetWriteHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_RECEIVE_PING_REPLY</name></expr>;</expr_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sendCommand</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_RECEIVE_PING_REPLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>receiveSynchronousResponse</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><literal type="string">"-NOAUTH"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><literal type="string">"-NOPERM"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><literal type="string">"-ERR operation not permitted"</literal></expr></argument>,<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error reply to PING from master: '%s'"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Master replied to PING, replication can continue..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_SEND_HANDSHAKE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_SEND_HANDSHAKE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterauth</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"AUTH"</literal></expr>,<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>lens</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masteruser</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>masteruser</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lens</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>masteruser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>masterauth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lens</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sendCommandArgv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>lens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>slave_announce_port</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>slave_announce_port</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>tls_replication</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>tls_port</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>tls_port</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>portstr</name> <init>= <expr><call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sendCommand</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="string">"REPLCONF"</literal></expr></argument>,
<argument><expr><literal type="string">"listening-port"</literal></expr></argument>,<argument><expr><name>portstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sendCommand</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="string">"REPLCONF"</literal></expr></argument>,
<argument><expr><literal type="string">"ip-address"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sendCommand</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="string">"REPLCONF"</literal></expr></argument>,
<argument><expr><literal type="string">"capa"</literal></expr></argument>,<argument><expr><literal type="string">"eof"</literal></expr></argument>,<argument><expr><literal type="string">"capa"</literal></expr></argument>,<argument><expr><literal type="string">"psync2"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_RECEIVE_AUTH_REPLY</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_RECEIVE_AUTH_REPLY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>masterauth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_RECEIVE_PORT_REPLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_RECEIVE_AUTH_REPLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>receiveSynchronousResponse</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Unable to AUTH to MASTER: %s"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_RECEIVE_PORT_REPLY</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_RECEIVE_PORT_REPLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>receiveSynchronousResponse</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"(Non critical) Master does not understand "</literal>
<literal type="string">"REPLCONF listening-port: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_RECEIVE_IP_REPLY</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_RECEIVE_IP_REPLY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_RECEIVE_CAPA_REPLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_RECEIVE_IP_REPLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>receiveSynchronousResponse</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"(Non critical) Master does not understand "</literal>
<literal type="string">"REPLCONF ip-address: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_RECEIVE_CAPA_REPLY</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_RECEIVE_CAPA_REPLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>receiveSynchronousResponse</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"(Non critical) Master does not understand "</literal>
<literal type="string">"REPLCONF capa: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_SEND_PSYNC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_SEND_PSYNC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>slaveTryPartialResynchronization</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>PSYNC_WRITE_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Write error sending the PSYNC command."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abortFailover</name><argument_list>(<argument><expr><literal type="string">"Write error to failover target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>write_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_RECEIVE_PSYNC_REPLY</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>!=</operator> <name>REPL_STATE_RECEIVE_PSYNC_REPLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"syncWithMaster(): state machine error, "</literal>
<literal type="string">"state should be RECEIVE_PSYNC but is %d"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psync_result</name> <operator>=</operator> <call><name>slaveTryPartialResynchronization</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psync_result</name> <operator>==</operator> <name>PSYNC_WAIT_REPLY</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>==</operator> <name>FAILOVER_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>psync_result</name> <operator>==</operator> <name>PSYNC_CONTINUE</name> <operator>||</operator> <name>psync_result</name> <operator>==</operator> <name>PSYNC_FULLRESYNC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clearFailoverState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>abortFailover</name><argument_list>(<argument><expr><literal type="string">"Failover target rejected psync request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>psync_result</name> <operator>==</operator> <name>PSYNC_TRY_LATER</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>psync_result</name> <operator>==</operator> <name>PSYNC_CONTINUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync: Master accepted a Partial Resynchronization."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STATUS=MASTER &lt;-&gt; REPLICA sync: Partial Resynchronization accepted. Ready to accept connections in read-write mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>psync_result</name> <operator>==</operator> <name>PSYNC_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Retrying with SYNC..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connSyncWrite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="string">"SYNC\r\n"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_syncio_timeout</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"I/O error writing to MASTER: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>useDisklessLoad</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>maxtries</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>,
<argument><expr><literal type="string">"temp-%d.%ld.rdb"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name></expr></argument>,<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><name>O_CREAT</name><operator>|</operator><name>O_WRONLY</name><operator>|</operator><name>O_EXCL</name></expr></argument>,<argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>dfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Opening the temp file needed for MASTER &lt;-&gt; REPLICA synchronization: %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name> <operator>=</operator> <name>dfd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>readSyncBulkPayload</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>C_ERR</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>conninfo</name><index>[<expr><name>CONN_INFO_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Can't create readable event for SYNC: %s (%s)"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>connGetInfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>conninfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conninfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_TRANSFER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_last_fsync_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>dfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>dfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECT</name></expr>;</expr_stmt>
<return>return;</return>

<label><name>write_error</name>:</label>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Sending command to master in replication handshake: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>connectWithMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>tls_replication</name></name></expr> ?</condition><then> <expr><call><name>connCreateTLS</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>connCreateSocket</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connConnect</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>bind_source_addr</name></name></expr></argument>, <argument><expr><name>syncWithMaster</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Unable to connect to MASTER: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECTING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"MASTER &lt;-&gt; REPLICA sync started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>undoConnectWithMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>replicationAbortSyncTransfer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undoConnectWithMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bg_unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>cancelReplicationHandshake</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reconnect</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>replicationAbortSyncTransfer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTING</name> <operator>||</operator>
<call><name>slaveIsInHandshakeState</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>undoConnectWithMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reconnect</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Reconnecting to MASTER %s:%d after failure"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connectWithMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>replicationSetMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>was_master</name> <init>= <expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>disconnectAllBlockedClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterport</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>setOOMScoreAdj</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>was_master</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>replicationDiscardCachedMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationCacheMasterUsingMyself</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED</name></expr></argument>,
<argument><expr><name>REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_MASTER_LINK_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_MASTER_LINK_DOWN</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Connecting to MASTER %s:%d"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connectWithMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>replicationUnsetMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_MASTER_LINK_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_MASTER_LINK_DOWN</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>replicationDiscardCachedMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>shiftReplicationId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>disconnectSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_NONE</name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>setOOMScoreAdj</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_no_slaves_since</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_down_since</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED</name></expr></argument>,
<argument><expr><name>REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_OFF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>restartAOFAfterSYNC</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>replicationHandleMasterDisconnection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_MASTER_LINK_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_MASTER_LINK_DOWN</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_down_since</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Reconnecting to MASTER %s:%d"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connectWithMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>replicaofCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"REPLICAOF not allowed in cluster mode."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>!=</operator> <name>NO_FAILOVER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"REPLICAOF not allowed while failing over."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>replicationUnsetMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>client</name> <init>= <expr><call><name>catClientInfoString</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"MASTER MODE enabled (user request from '%s')"</literal></expr></argument>,
<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SLAVE</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Command is not valid when client is a replica."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getRangeLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,
<argument><expr><literal type="string">"Invalid master port"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>masterport</name></name> <operator>==</operator> <name>port</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"REPLICAOF would result into synchronization "</literal>
<literal type="string">"with the master we are already connected "</literal>
<literal type="string">"with. No operation performed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+OK Already connected to specified "</literal>
<literal type="string">"master\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>replicationSetMaster</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>client</name> <init>= <expr><call><name>catClientInfoString</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"REPLICAOF %s:%d enabled (user request from '%s')"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>roleCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelRoleCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mbcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mbcount</name> <operator>=</operator> <call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slaveaddr</name> <init>= <expr><name><name>slave</name><operator>-&gt;</operator><name>slave_addr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slaveaddr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connPeerToString</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>slaveaddr</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>!=</operator> <name>SLAVE_STATE_ONLINE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>slaveaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>slave_listening_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>repl_ack_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slaves</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>mbcount</name></expr></argument>,<argument><expr><name>slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slavestate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"slave"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>slaveIsInHandshakeState</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slavestate</name> <operator>=</operator> <literal type="string">"handshake"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch<condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REPL_STATE_NONE</name></expr>:</case> <expr_stmt><expr><name>slavestate</name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REPL_STATE_CONNECT</name></expr>:</case> <expr_stmt><expr><name>slavestate</name> <operator>=</operator> <literal type="string">"connect"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REPL_STATE_CONNECTING</name></expr>:</case> <expr_stmt><expr><name>slavestate</name> <operator>=</operator> <literal type="string">"connecting"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REPL_STATE_TRANSFER</name></expr>:</case> <expr_stmt><expr><name>slavestate</name> <operator>=</operator> <literal type="string">"sync"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REPL_STATE_CONNECTED</name></expr>:</case> <expr_stmt><expr><name>slavestate</name> <operator>=</operator> <literal type="string">"connected"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>slavestate</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>slavestate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>replicationSendAck</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_MASTER_FORCE_REPLY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"REPLCONF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"ACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reploff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_MASTER_FORCE_REPLY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





















<function><type><name>void</name></type> <name>replicationCacheMaster</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cached_master</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Caching the disconnected master state."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>unlinkClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>sdsclear</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsclear</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>pending_querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>read_reploff</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>discardTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sentlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>reply_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>peerid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>peerid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>peerid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sockname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sockname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sockname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>replicationHandleMasterDisconnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>replicationCacheMasterUsingMyself</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Before turning into a replica, using my own master parameters "</literal>
<literal type="string">"to synthesize a cached master: I may be able to synchronize with "</literal>
<literal type="string">"the new master with just a partial transfer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_initial_offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>replicationCreateMasterClient</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>replid</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>unlinkClient</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>replicationDiscardCachedMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cached_master</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Discarding previously cached master state."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_MASTER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>replicationResurrectCachedMaster</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cached_master</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSetPrivateData</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_CLOSE_AFTER_REPLY</name><operator>|</operator><name>CLIENT_CLOSE_ASAP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>lastinteraction</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_down_since</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_MASTER_LINK_CHANGE</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_MASTER_LINK_UP</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>linkClient</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>readQueryFromClient</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error resurrecting the cached master, impossible to add the readable handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>clientHasPendingReplies</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connSetWriteHandler</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>sendReplyToClient</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error resurrecting the cached master, impossible to add the writable handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>refreshGoodSlavesCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>good</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name> <operator>||</operator>
<operator>!</operator><name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>lag</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>repl_ack_time</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_ONLINE</name> <operator>&amp;&amp;</operator>
<name>lag</name> <operator>&lt;=</operator> <name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>good</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_good_slaves_count</name></name> <operator>=</operator> <name>good</name></expr>;</expr_stmt>
</block_content>}</block></function>































<function><type><name>void</name></type> <name>replicationRequestAckFromSlaves</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>get_ack_from_slaves</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>replicationCountAcksByOffset</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>!=</operator> <name>SLAVE_STATE_ONLINE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>repl_ack_off</name></name> <operator>&gt;=</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>waitCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>numreplicas</name></decl>, <decl><type ref="prev"/><name>ackreplicas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>offset</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>woff</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"WAIT cannot be used with replica instances. Please also note that since Redis 4.0 if a replica is configured to be writable (which is not the default) writes to replicas are just local and are not propagated."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>numreplicas</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getTimeoutFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>,<argument><expr><name>UNIT_MILLISECONDS</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ackreplicas</name> <operator>=</operator> <call><name>replicationCountAcksByOffset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>woff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ackreplicas</name> <operator>&gt;=</operator> <name>numreplicas</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ackreplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>reploffset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>numreplicas</name></name> <operator>=</operator> <name>numreplicas</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeHead</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients_waiting_acks</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>BLOCKED_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>replicationRequestAckFromSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>unblockClientWaitingReplicas</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients_waiting_acks</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients_waiting_acks</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>processClientsWaitingReplicas</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>last_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_numreplicas</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients_waiting_acks</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>last_offset</name> <operator>&amp;&amp;</operator> <name>last_offset</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>reploffset</name></name> <operator>&amp;&amp;</operator>
<name>last_numreplicas</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>numreplicas</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>unblockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>last_numreplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numreplicas</name> <init>= <expr><call><name>replicationCountAcksByOffset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>reploffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>numreplicas</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>numreplicas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_offset</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>reploffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_numreplicas</name> <operator>=</operator> <name>numreplicas</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unblockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>numreplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><name>long</name> <name>long</name></type> <name>replicationGetSlaveOffset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>replicationCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>replication_cron_loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>updateFailoverStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTING</name> <operator>||</operator>
<call><name>slaveIsInHandshakeState</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>repl_timeout</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Timeout connecting to the MASTER..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>repl_timeout</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Timeout receiving bulk data from MASTER... If the problem persists try to set the 'repl-timeout' parameter in redis.conf to a larger value."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelReplicationHandshake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTED</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>lastinteraction</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>repl_timeout</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"MASTER timeout: no data nor PING received..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Connecting to MASTER %s:%d"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connectWithMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>master</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PRE_PSYNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>replicationSendAck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name><name>ping_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>replication_cron_loops</name> <operator>%</operator> <name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>manual_failover_in_progress</name> <init>=
<expr><operator>(</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name><operator>)</operator> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>failover_end_time</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>checkClientPauseTimeoutAndReturnIfPaused</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>manual_failover_in_progress</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ping_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>shared</name><operator>.</operator><name>ping</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationFeedSlaves</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name></expr></argument>,
<argument><expr><name>ping_argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>















<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_presync</name> <init>=
<expr><operator>(</operator><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name> <operator>||</operator>
<operator>(</operator><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>!=</operator> <name>RDB_CHILD_TYPE_SOCKET</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_presync</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connWrite</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_ONLINE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PRE_PSYNC</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>repl_ack_time</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>repl_timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Disconnecting timedout replica (streaming sync): %s"</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>==</operator> <name>RDB_CHILD_TYPE_SOCKET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>repl_last_partial_write</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>repl_last_partial_write</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>repl_timeout</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Disconnecting timedout replica (full sync): %s"</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>idle</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>repl_no_slaves_since</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idle</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name></expr>)</condition> <block>{<block_content>















<expr_stmt><expr><call><name>changeReplicationId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearReplicationId2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplicationBacklog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Replication backlog freed after %d seconds "</literal>
<literal type="string">"without connected replicas."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>replicationStartPendingFork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>removeRDBUsedToSyncReplicas</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>o</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>refreshGoodSlavesCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>replication_cron_loops</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>shouldStartChildReplication</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mincapa_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>req_out</name></decl></parameter>)</parameter_list> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>idle</name></decl>, <decl><type ref="prev"/><name>max_idle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slaves_waiting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mincapa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>slave</name><operator>-&gt;</operator><name>slave_req</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>req</name> <operator>!=</operator> <name><name>slave</name><operator>-&gt;</operator><name>slave_req</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idle</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>lastinteraction</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idle</name> <operator>&gt;</operator> <name>max_idle</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max_idle</name> <operator>=</operator> <name>idle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>slaves_waiting</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mincapa</name> <operator>=</operator> <ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><name><name>slave</name><operator>-&gt;</operator><name>slave_capa</name></name></expr> </then><else>: <expr><operator>(</operator><name>mincapa</name> <operator>&amp;</operator> <name><name>slave</name><operator>-&gt;</operator><name>slave_capa</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>slaves_waiting</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>server</name><operator>.</operator><name>repl_diskless_sync</name></name> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>repl_diskless_sync_max_replicas</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>slaves_waiting</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>repl_diskless_sync_max_replicas</name></name><operator>)</operator> <operator>||</operator>
<name>max_idle</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>repl_diskless_sync_delay</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mincapa_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mincapa_out</name> <operator>=</operator> <name>mincapa</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>req_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>req_out</name> <operator>=</operator> <name>req</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>replicationStartPendingFork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mincapa</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>req</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>shouldStartChildReplication</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mincapa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>startBgsaveForReplication</name><argument_list>(<argument><expr><name>mincapa</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>client</name> <modifier>*</modifier></type><name>findReplica</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>replica</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>replicaip</name> <init>= <expr><name><name>replica</name><operator>-&gt;</operator><name>slave_addr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>replicaip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connPeerToString</name><argument_list>(<argument><expr><name><name>replica</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>replicaip</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>replicaip</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>port</name> <operator>==</operator> <name><name>replica</name><operator>-&gt;</operator><name>slave_listening_port</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>replica</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getFailoverStateString</name><parameter_list>()</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NO_FAILOVER</name></expr>:</case> <return>return <expr><literal type="string">"no-failover"</literal></expr>;</return>
<case>case <expr><name>FAILOVER_IN_PROGRESS</name></expr>:</case> <return>return <expr><literal type="string">"failover-in-progress"</literal></expr>;</return>
<case>case <expr><name>FAILOVER_WAIT_FOR_SYNC</name></expr>:</case> <return>return <expr><literal type="string">"waiting-for-sync"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clearFailoverState</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>failover_end_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>force_failover</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>=</operator> <name>NO_FAILOVER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unpauseClients</name><argument_list>(<argument><expr><name>PAUSE_DURING_FAILOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>abortFailover</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>==</operator> <name>NO_FAILOVER</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER to %s:%d aborted: %s"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER to any replica aborted: %s"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>==</operator> <name>FAILOVER_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>replicationUnsetMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clearFailoverState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




























<function><type><name>void</name></type> <name>failoverCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER not allowed in cluster mode. "</literal>
<literal type="string">"Use CLUSTER FAILOVER command instead."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"abort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>==</operator> <name>NO_FAILOVER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"No failover in progress."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>abortFailover</name><argument_list>(<argument><expr><literal type="string">"Failover manually aborted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>timeout_in_ms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>timeout_in_ms</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>timeout_in_ms</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout_in_ms</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER timeout must be greater than 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"to"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name>host</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"force"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>force_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>!=</operator> <name>NO_FAILOVER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER already in progress."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER is not valid when server is a replica."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER requires connected replicas."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force_flag</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>timeout_in_ms</name> <operator>||</operator> <operator>!</operator><name>host</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER with force option requires both a timeout "</literal>
<literal type="string">"and target HOST and IP."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name> <init>= <expr><call><name>findReplica</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>replica</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER target HOST and PORT is not "</literal>
<literal type="string">"a replica."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>replica</name><operator>-&gt;</operator><name>replstate</name></name> <operator>!=</operator> <name>SLAVE_STATE_ONLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER target replica is not online."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER requested to %s:%ld."</literal></expr></argument>,<argument><expr><name>host</name></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"FAILOVER requested to any replica."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout_in_ms</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>failover_end_time</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <name>timeout_in_ms</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>force_failover</name></name> <operator>=</operator> <name>force_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>=</operator> <name>FAILOVER_WAIT_FOR_SYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pauseClients</name><argument_list>(<argument><expr><name>PAUSE_DURING_FAILOVER</name></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name>CLIENT_PAUSE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>updateFailoverStatus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>!=</operator> <name>FAILOVER_WAIT_FOR_SYNC</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><name><name>server</name><operator>.</operator><name>mstime</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_end_time</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>failover_end_time</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>force_failover</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"FAILOVER to %s:%d time out exceeded, failing over."</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>=</operator> <name>FAILOVER_IN_PROGRESS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replicationSetMaster</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>abortFailover</name><argument_list>(<argument><expr><literal type="string">"Replica never caught up before timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>replica</name> <operator>=</operator> <call><name>findReplica</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>replica</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>replica</name><operator>-&gt;</operator><name>repl_ack_off</name></name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>replicaaddr</name> <init>= <expr><name><name>replica</name><operator>-&gt;</operator><name>slave_addr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>replicaaddr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connPeerToString</name><argument_list>(<argument><expr><name><name>replica</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>replicaaddr</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>replicaaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name> <operator>=</operator> <name><name>replica</name><operator>-&gt;</operator><name>slave_listening_port</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>replica</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>replica</name><operator>-&gt;</operator><name>repl_ack_off</name></name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>=</operator> <name>FAILOVER_IN_PROGRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Failover target %s:%d is synced, failing over."</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replicationSetMaster</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
