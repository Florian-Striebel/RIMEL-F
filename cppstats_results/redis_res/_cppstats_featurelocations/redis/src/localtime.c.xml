<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/localtime.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>





















<function><type><specifier>static</specifier> <name>int</name></type> <name>is_leap_year</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>year</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">400</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>nolocks_localtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>secs_min</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>secs_hour</name> <init>= <expr><literal type="number">3600</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>secs_day</name> <init>= <expr><literal type="number">3600</literal><operator>*</operator><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>tz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">3600</literal><operator>*</operator><name>dst</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>days</name> <init>= <expr><name>t</name> <operator>/</operator> <name>secs_day</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>seconds</name> <init>= <expr><name>t</name> <operator>%</operator> <name>secs_day</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>seconds</name> <operator>/</operator> <name>secs_hour</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <operator>(</operator><name>seconds</name> <operator>%</operator> <name>secs_hour</name><operator>)</operator> <operator>/</operator> <name>secs_min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <operator>(</operator><name>seconds</name> <operator>%</operator> <name>secs_hour</name><operator>)</operator> <operator>%</operator> <name>secs_min</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <operator>(</operator><name>days</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>%</operator><literal type="number">7</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <literal type="number">1970</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>days_this_year</name> <init>= <expr><literal type="number">365</literal> <operator>+</operator> <call><name>is_leap_year</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>days_this_year</name> <operator>&gt;</operator> <name>days</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>days</name> <operator>-=</operator> <name>days_this_year</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <name>days</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>int</name></type> <name><name>mdays</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mdays</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>is_leap_year</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>days</name> <operator>&gt;=</operator> <name><name>mdays</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>days</name> <operator>-=</operator> <name><name>mdays</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>days</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOCALTIME_TEST_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>daylight_active</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nolocks_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>timezone</name></expr></argument>,<argument><expr><name>daylight_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%d %b %H:%M:%S"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[timezone: %d, dl: %d] %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>timezone</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>daylight_active</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
