<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/redismodule.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REDISMODULE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ERR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_APIVER_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_TYPE_METHOD_VERSION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_READ</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_WRITE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_OPEN_KEY_NOTOUCH</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_LIST_HEAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_LIST_TAIL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEYTYPE_EMPTY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEYTYPE_STRING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEYTYPE_LIST</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEYTYPE_HASH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEYTYPE_SET</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEYTYPE_ZSET</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEYTYPE_MODULE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEYTYPE_STREAM</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_UNKNOWN</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_STRING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_INTEGER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_ARRAY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_NULL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_MAP</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_SET</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_BOOL</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_DOUBLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_BIG_NUMBER</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_VERBATIM_STRING</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLY_ATTRIBUTE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_POSTPONED_ARRAY_LEN</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_POSTPONED_LEN</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NO_EXPIRE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZADD_XX</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZADD_NX</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZADD_ADDED</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZADD_UPDATED</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZADD_NOP</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZADD_GT</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ZADD_LT</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_HASH_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_HASH_NX</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_HASH_XX</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_HASH_CFIELDS</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_HASH_EXISTS</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_HASH_COUNT_ALL</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>RedisModuleStreamID</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>seq</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleStreamID</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_STREAM_ADD_AUTOID</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_STREAM_ITERATOR_EXCLUSIVE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_STREAM_ITERATOR_REVERSE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_STREAM_TRIM_APPROX</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_LUA</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_MULTI</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_MASTER</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_SLAVE</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_READONLY</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_CLUSTER</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_AOF</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_RDB</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_MAXMEMORY</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_EVICT</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_OOM</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_OOM_WARNING</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_REPLICATED</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_LOADING</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE</name></cpp:macro> <cpp:value>(1&lt;&lt;14)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING</name></cpp:macro> <cpp:value>(1&lt;&lt;15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE</name></cpp:macro> <cpp:value>(1&lt;&lt;17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_ACTIVE_CHILD</name></cpp:macro> <cpp:value>(1&lt;&lt;18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_MULTI_DIRTY</name></cpp:macro> <cpp:value>(1&lt;&lt;19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_IS_CHILD</name></cpp:macro> <cpp:value>(1&lt;&lt;20)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_DENY_BLOCKING</name></cpp:macro> <cpp:value>(1&lt;&lt;21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_RESP3</name></cpp:macro> <cpp:value>(1&lt;&lt;22)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CTX_FLAGS_ASYNC_LOADING</name></cpp:macro> <cpp:value>(1&lt;&lt;23)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_CTX_FLAGS_NEXT</name></cpp:macro> <cpp:value>(1&lt;&lt;24)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_KEYSPACE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_KEYEVENT</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_GENERIC</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_STRING</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_LIST</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_HASH</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_ZSET</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_EXPIRED</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_EVICTED</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_STREAM</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_KEY_MISS</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_LOADED</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_MODULE</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_NOTIFY_NEXT</name></cpp:macro> <cpp:value>(1&lt;&lt;14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOTIFY_ALL</name></cpp:macro> <cpp:value>(REDISMODULE_NOTIFY_GENERIC | REDISMODULE_NOTIFY_STRING | REDISMODULE_NOTIFY_LIST | REDISMODULE_NOTIFY_SET | REDISMODULE_NOTIFY_HASH | REDISMODULE_NOTIFY_ZSET | REDISMODULE_NOTIFY_EXPIRED | REDISMODULE_NOTIFY_EVICTED | REDISMODULE_NOTIFY_STREAM | REDISMODULE_NOTIFY_MODULE)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_HASH_DELETE</name></cpp:macro> <cpp:value>((RedisModuleString*)(long)1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ERRORMSG_WRONGTYPE</name></cpp:macro> <cpp:value>"WRONGTYPE Operation against a key holding the wrong kind of value"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_POSITIVE_INFINITE</name></cpp:macro> <cpp:value>(1.0/0.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NEGATIVE_INFINITE</name></cpp:macro> <cpp:value>(-1.0/0.0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NODE_ID_LEN</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NODE_MYSELF</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NODE_MASTER</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NODE_SLAVE</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NODE_PFAIL</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NODE_FAIL</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NODE_NOFAILOVER</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLUSTER_FLAG_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLUSTER_FLAG_NO_FAILOVER</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_NOT_USED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) V)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_LOGLEVEL_DEBUG</name></cpp:macro> <cpp:value>"debug"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_LOGLEVEL_VERBOSE</name></cpp:macro> <cpp:value>"verbose"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_LOGLEVEL_NOTICE</name></cpp:macro> <cpp:value>"notice"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_LOGLEVEL_WARNING</name></cpp:macro> <cpp:value>"warning"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AUX_BEFORE_RDB</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AUX_AFTER_RDB</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_YIELD_FLAG_NONE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_YIELD_FLAG_CLIENTS</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>





<typedef>typedef <type><name>uint64_t</name></type> <name>RedisModuleTimerID</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CMDFILTER_NOSELF</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_OPTIONS_HANDLE_IO_ERRORS</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_OPTIONS_HANDLE_REPL_ASYNC_LOAD</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>REDISMODULE_ARG_TYPE_STRING</name></decl>,
<decl><name>REDISMODULE_ARG_TYPE_INTEGER</name></decl>,
<decl><name>REDISMODULE_ARG_TYPE_DOUBLE</name></decl>,
<decl><name>REDISMODULE_ARG_TYPE_KEY</name></decl>,
<decl><name>REDISMODULE_ARG_TYPE_PATTERN</name></decl>,
<decl><name>REDISMODULE_ARG_TYPE_UNIX_TIME</name></decl>,
<decl><name>REDISMODULE_ARG_TYPE_PURE_TOKEN</name></decl>,
<decl><name>REDISMODULE_ARG_TYPE_ONEOF</name></decl>,
<decl><name>REDISMODULE_ARG_TYPE_BLOCK</name></decl>
}</block></enum></type> <name>RedisModuleCommandArgType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CMD_ARG_NONE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CMD_ARG_OPTIONAL</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CMD_ARG_MULTIPLE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CMD_ARG_MULTIPLE_TOKEN</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEY_PERMISSION_READ</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEY_PERMISSION_WRITE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_KEY_PERMISSION_ALL</name></cpp:macro> <cpp:value>(REDISMODULE_KEY_PERMISSION_READ | REDISMODULE_KEY_PERMISSION_WRITE)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENTLOOP_READABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENTLOOP_WRITABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleEventLoopFunc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleEventLoopOneShotFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_PERSISTENCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_FLUSHDB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_LOADING</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_CLIENT_CHANGE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_SHUTDOWN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_REPLICA_CHANGE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_MASTER_LINK_CHANGE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_CRON_LOOP</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_MODULE_CHANGE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_LOADING_PROGRESS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_SWAPDB</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_REPL_BACKUP</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_FORK_CHILD</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_REPL_ASYNC_LOAD</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_EVENTLOOP</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_EVENT_NEXT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>RedisModuleEvent</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dataver</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleEvent</name>;</typedef>

<struct_decl>struct <name>RedisModuleCtx</name>;</struct_decl>
<struct_decl>struct <name>RedisModuleDefragCtx</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleEventCallback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>eid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>subevent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



























<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>RedisModuleEvent</name></type>
<name>RedisModuleEvent_ReplicationRoleChanged</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_Persistence</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_PERSISTENCE</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_FlushDB</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_FLUSHDB</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_Loading</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_LOADING</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_ClientChange</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_CLIENT_CHANGE</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_Shutdown</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_SHUTDOWN</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_ReplicaChange</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_REPLICA_CHANGE</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_CronLoop</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_CRON_LOOP</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_MasterLinkChange</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_MASTER_LINK_CHANGE</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_ModuleChange</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_MODULE_CHANGE</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_LoadingProgress</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_LOADING_PROGRESS</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_SwapDB</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_SWAPDB</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,

<decl><type ref="prev"/><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>deprecated</name><operator>)</operator></expr></argument>)</argument_list>
<name>RedisModuleEvent_ReplBackup</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_REPL_BACKUP</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_ReplAsyncLoad</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_REPL_ASYNC_LOAD</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_ForkChild</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_FORK_CHILD</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>,
<decl><type ref="prev"/><name>RedisModuleEvent_EventLoop</name> <init>= <expr><block>{
<expr><name>REDISMODULE_EVENT_EVENTLOOP</name></expr>,
<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_PERSISTENCE_ENDED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_PERSISTENCE_FAILED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_AOF_START</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_PERSISTENCE_NEXT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_LOADING_RDB_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_LOADING_AOF_START</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_LOADING_REPL_START</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_LOADING_ENDED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_LOADING_FAILED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_LOADING_NEXT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_CLIENT_CHANGE_DISCONNECTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_CLIENT_CHANGE_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_MASTER_LINK_UP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_MASTER_LINK_DOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_MASTER_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_REPLICA_CHANGE_OFFLINE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_REPLICA_CHANGE_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_EVENT_REPLROLECHANGED_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_FLUSHDB_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_FLUSHDB_END</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_FLUSHDB_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_MODULE_LOADED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_MODULE_UNLOADED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_MODULE_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_LOADING_PROGRESS_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_REPL_BACKUP_CREATE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_REPL_BACKUP_RESTORE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_REPL_BACKUP_DISCARD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_REPL_BACKUP_NEXT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_STARTED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_ABORTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_COMPLETED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_NEXT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_FORK_CHILD_BORN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_FORK_CHILD_DIED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_FORK_CHILD_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_EVENTLOOP_BEFORE_SLEEP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SUBEVENT_EVENTLOOP_AFTER_SLEEP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_EVENTLOOP_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_SHUTDOWN_NEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_CRON_LOOP_NEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REDISMODULE_SUBEVENT_SWAPDB_NEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLIENTINFO_FLAG_SSL</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLIENTINFO_FLAG_PUBSUB</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLIENTINFO_FLAG_BLOCKED</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLIENTINFO_FLAG_TRACKING</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLIENTINFO_FLAG_MULTI</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CLIENTINFO_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>RedisModuleClientInfo</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><literal type="number">46</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>db</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleClientInfoV1</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleClientInfo</name></cpp:macro> <cpp:value>RedisModuleClientInfoV1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_REPLICATIONINFO_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>RedisModuleReplicationInfo</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>master</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>masterhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>masterport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>replid1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>replid2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>repl1_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>repl2_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleReplicationInfoV1</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleReplicationInfo</name></cpp:macro> <cpp:value>RedisModuleReplicationInfoV1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_FLUSHINFO_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>RedisModuleFlushInfo</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>sync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dbnum</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleFlushInfoV1</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleFlushInfo</name></cpp:macro> <cpp:value>RedisModuleFlushInfoV1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_MODULE_CHANGE_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>RedisModuleModuleChange</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>module_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>module_version</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleModuleChangeV1</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleModuleChange</name></cpp:macro> <cpp:value>RedisModuleModuleChangeV1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CRON_LOOP_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>RedisModuleCronLoopInfo</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>hz</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleCronLoopV1</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleCronLoop</name></cpp:macro> <cpp:value>RedisModuleCronLoopV1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_LOADING_PROGRESS_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>RedisModuleLoadingProgressInfo</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>hz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>progress</name></decl>;</decl_stmt>

}</block></struct></type> <name>RedisModuleLoadingProgressV1</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleLoadingProgress</name></cpp:macro> <cpp:value>RedisModuleLoadingProgressV1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_SWAPDBINFO_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>RedisModuleSwapDbInfo</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>dbnum_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dbnum_second</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleSwapDbInfoV1</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleSwapDbInfo</name></cpp:macro> <cpp:value>RedisModuleSwapDbInfoV1</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REDISMODULE_CORE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>mstime_t</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REDISMODULE_ATTR_UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ATTR_UNUSED</name></cpp:macro> <cpp:value>__attribute__((unused))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ATTR_UNUSED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REDISMODULE_ATTR_PRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ATTR_PRINTF</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>,<parameter><type><name>cnt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((format(printf,idx,cnt)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ATTR_PRINTF</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>,<parameter><type><name>cnt</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REDISMODULE_ATTR_COMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ATTR_COMMON</name></cpp:macro> <cpp:value>__attribute__((__common__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ATTR_COMMON</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name><name>struct</name> <name>RedisModuleCtx</name></name></type> <name>RedisModuleCtx</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleCommand</name></name></type> <name>RedisModuleCommand</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleKey</name></name></type> <name>RedisModuleKey</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleString</name></name></type> <name>RedisModuleString</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleCallReply</name></name></type> <name>RedisModuleCallReply</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleIO</name></name></type> <name>RedisModuleIO</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleType</name></name></type> <name>RedisModuleType</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleDigest</name></name></type> <name>RedisModuleDigest</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleBlockedClient</name></name></type> <name>RedisModuleBlockedClient</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleClusterInfo</name></name></type> <name>RedisModuleClusterInfo</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleDict</name></name></type> <name>RedisModuleDict</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleDictIter</name></name></type> <name>RedisModuleDictIter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleCommandFilterCtx</name></name></type> <name>RedisModuleCommandFilterCtx</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleCommandFilter</name></name></type> <name>RedisModuleCommandFilter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleInfoCtx</name></name></type> <name>RedisModuleInfoCtx</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleServerInfoData</name></name></type> <name>RedisModuleServerInfoData</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleScanCursor</name></name></type> <name>RedisModuleScanCursor</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleDefragCtx</name></name></type> <name>RedisModuleDefragCtx</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleUser</name></name></type> <name>RedisModuleUser</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleKeyOptCtx</name></name></type> <name>RedisModuleKeyOptCtx</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RedisModuleCommandArg</name></name></type> <name>RedisModuleCommandArg</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RedisModuleCmdFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleDisconnectFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RedisModuleNotificationFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>RedisModuleTypeLoadFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encver</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTypeSaveFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RedisModuleTypeAuxLoadFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTypeAuxSaveFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTypeRewriteFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>aof</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>RedisModuleTypeMemUsageFunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>RedisModuleTypeMemUsageFunc2</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleKeyOptCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTypeDigestFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleDigest</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTypeFreeFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>RedisModuleTypeFreeEffortFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>RedisModuleTypeFreeEffortFunc2</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleKeyOptCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTypeUnlinkFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTypeUnlinkFunc2</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleKeyOptCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>RedisModuleTypeCopyFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>fromkey</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>tokey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>RedisModuleTypeCopyFunc2</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleKeyOptCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RedisModuleTypeDefragFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleClusterMessageReceiver</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sender_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleTimerProc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleCommandFilterFunc</name>) <parameter_list>(<parameter><decl><type><name>RedisModuleCommandFilterCtx</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleForkDoneHandler</name>) <parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleInfoFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_crash_report</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleScanCB</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>, <parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleScanKeyCB</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleUserChangedFunc</name>) <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>client_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RedisModuleDefragFunc</name>)<parameter_list>(<parameter><decl><type><name>RedisModuleDefragCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>RedisModuleTypeMethods</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeLoadFunc</name></type> <name>rdb_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeSaveFunc</name></type> <name>rdb_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeRewriteFunc</name></type> <name>aof_rewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeMemUsageFunc</name></type> <name>mem_usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeDigestFunc</name></type> <name>digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeFreeFunc</name></type> <name>free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeAuxLoadFunc</name></type> <name>aux_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeAuxSaveFunc</name></type> <name>aux_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aux_save_triggers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeFreeEffortFunc</name></type> <name>free_effort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeUnlinkFunc</name></type> <name>unlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeCopyFunc</name></type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeDefragFunc</name></type> <name>defrag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeMemUsageFunc2</name></type> <name>mem_usage2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeFreeEffortFunc2</name></type> <name>free_effort2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeUnlinkFunc2</name></type> <name>unlink2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleTypeCopyFunc2</name></type> <name>copy2</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleTypeMethods</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_GET_API</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RedisModule_GetApi("RedisModule_" #name, ((void **)&amp;RedisModule_ ##name))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REDISMODULE_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_API</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REDISMODULE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_ATTR</name></cpp:macro> <cpp:value>REDISMODULE_ATTR_COMMON</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Alloc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>size_t</name> <name>bytes</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Realloc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>bytes</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Free</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Calloc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>size_t</name> <name>nmemb</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>char</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Strdup</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetApi</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateCommand</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>RedisModuleCmdFunc</name> <name>cmdfunc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>strflags</name></expr></argument>, <argument><expr><name>int</name> <name>firstkey</name></expr></argument>, <argument><expr><name>int</name> <name>lastkey</name></expr></argument>, <argument><expr><name>int</name> <name>keystep</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCommand</name> <modifier>*</modifier></type><argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetCommand</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateSubcommand</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommand</name> <operator>*</operator><name>parent</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>RedisModuleCmdFunc</name> <name>cmdfunc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>strflags</name></expr></argument>, <argument><expr><name>int</name> <name>firstkey</name></expr></argument>, <argument><expr><name>int</name> <name>lastkey</name></expr></argument>, <argument><expr><name>int</name> <name>keystep</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetModuleAttribs</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>int</name> <name>ver</name></expr></argument>, <argument><expr><name>int</name> <name>apiver</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_IsModuleNameBusy</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_WrongArity</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithLongLong</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>ll</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetSelectedDb</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SelectDb</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>int</name> <name>newid</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_KeyExists</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>keyname</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_OpenKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>keyname</name></expr></argument>, <argument><expr><name>int</name> <name>mode</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CloseKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>kp</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_KeyType</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>kp</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>size_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ValueLength</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>kp</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ListPush</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>kp</name></expr></argument>, <argument><expr><name>int</name> <name>where</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>ele</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ListPop</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>where</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ListGet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>long</name> <name>index</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ListSet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>long</name> <name>index</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ListInsert</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>long</name> <name>index</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ListDelete</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>long</name> <name>index</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCallReply</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Call</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>cmdname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyProto</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_FreeCallReply</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyType</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>long</name> <name>long</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyInteger</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>double</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyBool</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyBigNumber</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyVerbatim</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>format</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCallReply</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplySetElement</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>, <argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyMapElement</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>, <argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><operator>*</operator><name>val</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyAttributeElement</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>, <argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><operator>*</operator><name>val</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCallReply</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyAttribute</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>size_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyLength</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCallReply</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyArrayElement</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>, <argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateStringFromLongLong</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>ll</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateStringFromDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>double</name> <name>d</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateStringFromLongDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>double</name> <name>ld</name></expr></argument>, <argument><expr><name>int</name> <name>humanfriendly</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateStringFromString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateStringFromStreamID</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RedisModuleStreamID</name> <operator>*</operator><name>id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateStringPrintf</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR_PRINTF</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_FreeString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringPtrLen</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithError</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithSimpleString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>msg</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithArray</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithMap</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithSet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithAttribute</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithNullArray</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithEmptyArray</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplySetArrayLength</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplySetMapLength</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplySetSetLength</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplySetAttributeLength</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplySetPushLength</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithStringBuffer</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithCString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithEmptyString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithVerbatimString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithVerbatimStringType</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ext</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithNull</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithBool</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>int</name> <name>b</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithLongDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>long</name> <name>double</name> <name>d</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>double</name> <name>d</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithBigNumber</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>bignum</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplyWithCallReply</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringToLongLong</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <operator>*</operator><name>ll</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringToDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator><name>d</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringToLongDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>long</name> <name>double</name> <operator>*</operator><name>d</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringToStreamID</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>RedisModuleStreamID</name> <operator>*</operator><name>id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_AutoMemory</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Replicate</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>cmdname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ReplicateVerbatim</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CallReplyStringPtr</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateStringFromCallReply</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCallReply</name> <operator>*</operator><name>reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DeleteKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_UnlinkKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringSet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>char</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringDMA</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>int</name> <name>mode</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringTruncate</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>newlen</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>mstime_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetExpire</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetExpire</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>mstime_t</name> <name>expire</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>mstime_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetAbsExpire</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetAbsExpire</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>mstime_t</name> <name>expire</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ResetDataset</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>restart_aof</name></expr></argument>, <argument><expr><name>int</name> <name>async</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DbSize</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_RandomKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetAdd</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>double</name> <name>score</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>ele</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>flagsptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetIncrby</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>double</name> <name>score</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>ele</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>flagsptr</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator><name>newscore</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetScore</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>ele</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator><name>score</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetRem</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>ele</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>deleted</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetRangeStop</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetFirstInScoreRange</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>double</name> <name>min</name></expr></argument>, <argument><expr><name>double</name> <name>max</name></expr></argument>, <argument><expr><name>int</name> <name>minex</name></expr></argument>, <argument><expr><name>int</name> <name>maxex</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetLastInScoreRange</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>double</name> <name>min</name></expr></argument>, <argument><expr><name>double</name> <name>max</name></expr></argument>, <argument><expr><name>int</name> <name>minex</name></expr></argument>, <argument><expr><name>int</name> <name>maxex</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetFirstInLexRange</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>max</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetLastInLexRange</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>max</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetRangeCurrentElement</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator><name>score</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetRangeNext</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetRangePrev</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ZsetRangeEndReached</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_HashSet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_HashGet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamAdd</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><name>RedisModuleStreamID</name> <operator>*</operator><name>id</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>int64_t</name> <name>numfields</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamDelete</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleStreamID</name> <operator>*</operator><name>id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamIteratorStart</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><name>RedisModuleStreamID</name> <operator>*</operator><name>startid</name></expr></argument>, <argument><expr><name>RedisModuleStreamID</name> <operator>*</operator><name>endid</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamIteratorStop</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamIteratorNextID</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleStreamID</name> <operator>*</operator><name>id</name></expr></argument>, <argument><expr><name>long</name> <operator>*</operator><name>numfields</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamIteratorNextField</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><operator>*</operator><name>field_ptr</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><operator>*</operator><name>value_ptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamIteratorDelete</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>long</name> <name>long</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamTrimByLength</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>length</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>long</name> <name>long</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StreamTrimByID</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><name>RedisModuleStreamID</name> <operator>*</operator><name>id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_IsKeysPositionRequest</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_KeyAtPos</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>int</name> <name>pos</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetClientId</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetClientUserNameById</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetClientInfoById</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ci</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_PublishMessage</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>channel</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>message</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetContextFlags</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_AvoidReplicaTraffic</name></expr></argument>)</argument_list><argument_list>()</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_PoolAlloc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>size_t</name> <name>bytes</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleType</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateDataType</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>int</name> <name>encver</name></expr></argument>, <argument><expr><name>RedisModuleTypeMethods</name> <operator>*</operator><name>typemethods</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ModuleTypeSetValue</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleType</name> <operator>*</operator><name>mt</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ModuleTypeReplaceValue</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleType</name> <operator>*</operator><name>mt</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>new_value</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>old_value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleType</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ModuleTypeGetType</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ModuleTypeGetValue</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_IsIOError</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetModuleOptions</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>int</name> <name>options</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SignalModifiedKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>keyname</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SaveUnsigned</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>uint64_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadUnsigned</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SaveSigned</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><name>int64_t</name> <name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int64_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadSigned</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_EmitAOF</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>cmdname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SaveString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SaveStringBuffer</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>char</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadStringBuffer</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>lenptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SaveDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><name>double</name> <name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>double</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SaveFloat</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><name>float</name> <name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>float</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadFloat</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SaveLongDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><name>long</name> <name>double</name> <name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>long</name> <name>double</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadLongDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadDataTypeFromString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RedisModuleType</name> <operator>*</operator><name>mt</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LoadDataTypeFromStringEncver</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RedisModuleType</name> <operator>*</operator><name>mt</name></expr></argument>, <argument><expr><name>int</name> <name>encver</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SaveDataTypeToString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RedisModuleType</name> <operator>*</operator><name>mt</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Log</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>level</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name> <name>REDISMODULE_ATTR_PRINTF</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LogIOError</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>levelstr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name> <name>REDISMODULE_ATTR_PRINTF</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule__Assert</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>estr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>int</name> <name>line</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_LatencyAddSample</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>mstime_t</name> <name>latency</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringAppendBuffer</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_TrimStringAllocation</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_RetainString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_HoldString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StringCompare</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleString</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>b</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCtx</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetContextFromIO</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetKeyNameFromIO</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetKeyNameFromModuleKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetDbIdFromModuleKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetDbIdFromIO</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleIO</name> <operator>*</operator><name>io</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetDbIdFromOptCtx</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKeyOptCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetToDbIdFromOptCtx</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKeyOptCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetKeyNameFromOptCtx</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKeyOptCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetToKeyNameFromOptCtx</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKeyOptCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>long</name> <name>long</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Milliseconds</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>uint64_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_MonotonicMicroseconds</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DigestAddStringBuffer</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDigest</name> <operator>*</operator><name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ele</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DigestAddLongLong</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDigest</name> <operator>*</operator><name>md</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>ele</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DigestEndSequence</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDigest</name> <operator>*</operator><name>md</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetDbIdFromDigest</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDigest</name> <operator>*</operator><name>dig</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetKeyNameFromDigest</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDigest</name> <operator>*</operator><name>dig</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleDict</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateDict</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_FreeDict</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>uint64_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictSize</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictSetC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>keylen</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictReplaceC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>keylen</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictSet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictReplace</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictGetC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>keylen</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>nokey</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictGet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>nokey</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictDelC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>keylen</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>oldval</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictDel</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>oldval</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleDictIter</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictIteratorStartC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>op</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>keylen</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleDictIter</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictIteratorStart</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDict</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>op</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictIteratorStop</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictIteratorReseekC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>op</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>keylen</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictIteratorReseek</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>op</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictNextC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>keylen</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>dataptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictPrevC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>keylen</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>dataptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictNext</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>dataptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictPrev</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>dataptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictCompareC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>op</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>keylen</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DictCompare</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDictIter</name> <operator>*</operator><name>di</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>op</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_RegisterInfoFunc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleInfoFunc</name> <name>cb</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_InfoAddSection</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleInfoCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_InfoBeginDictField</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleInfoCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_InfoEndDictField</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleInfoCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_InfoAddFieldString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleInfoCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>field</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_InfoAddFieldCString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleInfoCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>field</name></expr></argument>,<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_InfoAddFieldDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleInfoCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>field</name></expr></argument>, <argument><expr><name>double</name> <name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_InfoAddFieldLongLong</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleInfoCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>field</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_InfoAddFieldULongLong</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleInfoCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>field</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <name>long</name> <name>value</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleServerInfoData</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetServerInfo</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>section</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_FreeServerInfo</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleServerInfoData</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ServerInfoGetField</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleServerInfoData</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>field</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ServerInfoGetFieldC</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleServerInfoData</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>field</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>long</name> <name>long</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ServerInfoGetFieldSigned</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleServerInfoData</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>field</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>out_err</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ServerInfoGetFieldUnsigned</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleServerInfoData</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>field</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>out_err</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>double</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ServerInfoGetFieldDouble</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleServerInfoData</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>field</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>out_err</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SubscribeToServerEvent</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleEvent</name> <name>event</name></expr></argument>, <argument><expr><name>RedisModuleEventCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetLRU</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>mstime_t</name> <name>lru_idle</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetLRU</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>mstime_t</name> <operator>*</operator><name>lru_idle</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetLFU</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>lfu_freq</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetLFU</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <operator>*</operator><name>lfu_freq</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleBlockedClient</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_BlockClientOnKeys</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleCmdFunc</name> <name>reply_callback</name></expr></argument>, <argument><expr><name>RedisModuleCmdFunc</name> <name>timeout_callback</name></expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>free_privdata</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>RedisModuleCtx</name><operator>*</operator></expr></argument>,<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>timeout_ms</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><operator>*</operator><name>keys</name></expr></argument>, <argument><expr><name>int</name> <name>numkeys</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SignalKeyAsReady</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetBlockedClientReadyKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleScanCursor</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ScanCursorCreate</name></expr></argument>)</argument_list><argument_list>()</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ScanCursorRestart</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleScanCursor</name> <operator>*</operator><name>cursor</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ScanCursorDestroy</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleScanCursor</name> <operator>*</operator><name>cursor</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Scan</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleScanCursor</name> <operator>*</operator><name>cursor</name></expr></argument>, <argument><expr><name>RedisModuleScanCB</name> <name>fn</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ScanKey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleKey</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>RedisModuleScanCursor</name> <operator>*</operator><name>cursor</name></expr></argument>, <argument><expr><name>RedisModuleScanKeyCB</name> <name>fn</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetContextFlagsAll</name></expr></argument>)</argument_list><argument_list>()</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetKeyspaceNotificationFlagsAll</name></expr></argument>)</argument_list><argument_list>()</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_IsSubEventSupported</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleEvent</name> <name>event</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>subevent</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetServerVersion</name></expr></argument>)</argument_list><argument_list>()</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetTypeMethodVersion</name></expr></argument>)</argument_list><argument_list>()</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_UNRELEASED_KEYSPEC_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_AddCommandKeySpec</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommand</name> <operator>*</operator><name>command</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>specflags</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>spec_id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetCommandKeySpecBeginSearchIndex</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommand</name> <operator>*</operator><name>command</name></expr></argument>, <argument><expr><name>int</name> <name>spec_id</name></expr></argument>, <argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetCommandKeySpecBeginSearchKeyword</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommand</name> <operator>*</operator><name>command</name></expr></argument>, <argument><expr><name>int</name> <name>spec_id</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>keyword</name></expr></argument>, <argument><expr><name>int</name> <name>startfrom</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetCommandKeySpecFindKeysRange</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommand</name> <operator>*</operator><name>command</name></expr></argument>, <argument><expr><name>int</name> <name>spec_id</name></expr></argument>, <argument><expr><name>int</name> <name>lastkey</name></expr></argument>, <argument><expr><name>int</name> <name>keystep</name></expr></argument>, <argument><expr><name>int</name> <name>limit</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetCommandKeySpecFindKeysKeynum</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommand</name> <operator>*</operator><name>command</name></expr></argument>, <argument><expr><name>int</name> <name>spec_id</name></expr></argument>, <argument><expr><name>int</name> <name>keynumidx</name></expr></argument>, <argument><expr><name>int</name> <name>firstkey</name></expr></argument>, <argument><expr><name>int</name> <name>keystep</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Yield</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>busy_reply</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleBlockedClient</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_BlockClient</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleCmdFunc</name> <name>reply_callback</name></expr></argument>, <argument><expr><name>RedisModuleCmdFunc</name> <name>timeout_callback</name></expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>free_privdata</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>RedisModuleCtx</name><operator>*</operator></expr></argument>,<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>timeout_ms</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_UnblockClient</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleBlockedClient</name> <operator>*</operator><name>bc</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_IsBlockedReplyRequest</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_IsBlockedTimeoutRequest</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetBlockedClientPrivateData</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleBlockedClient</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetBlockedClientHandle</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_AbortBlock</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleBlockedClient</name> <operator>*</operator><name>bc</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_BlockedClientMeasureTimeStart</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleBlockedClient</name> <operator>*</operator><name>bc</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_BlockedClientMeasureTimeEnd</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleBlockedClient</name> <operator>*</operator><name>bc</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCtx</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetThreadSafeContext</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleBlockedClient</name> <operator>*</operator><name>bc</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCtx</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetDetachedThreadSafeContext</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_FreeThreadSafeContext</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ThreadSafeContextLock</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ThreadSafeContextTryLock</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ThreadSafeContextUnlock</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SubscribeToKeyspaceEvents</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>int</name> <name>types</name></expr></argument>, <argument><expr><name>RedisModuleNotificationFunc</name> <name>cb</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_NotifyKeyspaceEvent</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetNotifyKeyspaceEvents</name></expr></argument>)</argument_list><argument_list>()</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_BlockedClientDisconnected</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_RegisterClusterMessageReceiver</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>type</name></expr></argument>, <argument><expr><name>RedisModuleClusterMessageReceiver</name> <name>callback</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SendClusterMessage</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>target_id</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>type</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>msg</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetClusterNodeInfo</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>id</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>ip</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>master_id</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>port</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>flags</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetClusterNodesList</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>numnodes</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_FreeClusterNodesList</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>char</name> <operator>*</operator><operator>*</operator><name>ids</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleTimerID</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateTimer</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>mstime_t</name> <name>period</name></expr></argument>, <argument><expr><name>RedisModuleTimerProc</name> <name>callback</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_StopTimer</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleTimerID</name> <name>id</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>data</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetTimerInfo</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleTimerID</name> <name>id</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator><name>remaining</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>data</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetMyClusterID</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>size_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetClusterSize</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetRandomBytes</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetRandomHexChars</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetDisconnectCallback</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleBlockedClient</name> <operator>*</operator><name>bc</name></expr></argument>, <argument><expr><name>RedisModuleDisconnectFunc</name> <name>callback</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetClusterFlags</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>flags</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ExportSharedAPI</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>apiname</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>func</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetSharedAPI</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>apiname</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleCommandFilter</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_RegisterCommandFilter</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleCommandFilterFunc</name> <name>cb</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_UnregisterCommandFilter</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleCommandFilter</name> <operator>*</operator><name>filter</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CommandFilterArgsCount</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommandFilterCtx</name> <operator>*</operator><name>fctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CommandFilterArgGet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommandFilterCtx</name> <operator>*</operator><name>fctx</name></expr></argument>, <argument><expr><name>int</name> <name>pos</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CommandFilterArgInsert</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommandFilterCtx</name> <operator>*</operator><name>fctx</name></expr></argument>, <argument><expr><name>int</name> <name>pos</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CommandFilterArgReplace</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommandFilterCtx</name> <operator>*</operator><name>fctx</name></expr></argument>, <argument><expr><name>int</name> <name>pos</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CommandFilterArgDelete</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCommandFilterCtx</name> <operator>*</operator><name>fctx</name></expr></argument>, <argument><expr><name>int</name> <name>pos</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_Fork</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleForkDoneHandler</name> <name>cb</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user_data</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SendChildHeartbeat</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>double</name> <name>progress</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ExitFromChild</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>retcode</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_KillForkChild</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>child_pid</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>float</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetUsedMemoryRatio</name></expr></argument>)</argument_list><argument_list>()</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>size_t</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_MallocSize</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>ptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleUser</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_CreateModuleUser</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_FreeModuleUser</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleUser</name> <operator>*</operator><name>user</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_SetModuleUserACL</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleUser</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>acl</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetCurrentUserName</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleUser</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetModuleUserFromUserName</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleString</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ACLCheckCommandPermissions</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleUser</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>int</name> <name>argc</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ACLCheckKeyPermissions</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleUser</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ACLCheckChannelPermissions</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleUser</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>ch</name></expr></argument>, <argument><expr><name>int</name> <name>literal</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_ACLAddLogEntry</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleUser</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>object</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_AuthenticateClientWithACLUser</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><name>RedisModuleUserChangedFunc</name> <name>callback</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator><name>client_id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_AuthenticateClientWithUser</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleUser</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><name>RedisModuleUserChangedFunc</name> <name>callback</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator><name>client_id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DeauthenticateAndCloseClient</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>client_id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetClientCertificate</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>id</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name> <modifier>*</modifier></type><argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetCommandKeys</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>num_keys</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetCurrentCommandName</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_RegisterDefragFunc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleDefragFunc</name> <name>func</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>void</name> <modifier>*</modifier></type><argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DefragAlloc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDefragCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>RedisModuleString</name> <modifier>*</modifier></type><argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DefragRedisModuleString</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDefragCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>RedisModuleString</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DefragShouldStop</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDefragCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DefragCursorSet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDefragCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <name>cursor</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_DefragCursorGet</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDefragCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <operator>*</operator><name>cursor</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetDbIdFromDefragCtx</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDefragCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_GetKeyNameFromDefragCtx</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleDefragCtx</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_EventLoopAdd</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><name>int</name> <name>mask</name></expr></argument>, <argument><expr><name>RedisModuleEventLoopFunc</name> <name>func</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user_data</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_EventLoopDel</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><name>int</name> <name>mask</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REDISMODULE_API</name> <name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>RedisModule_EventLoopAddOneShot</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RedisModuleEventLoopOneShotFunc</name> <name>func</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user_data</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModule_IsAOFClient</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((id) == UINT64_MAX)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>RedisModule_Init</name><argument_list>(<argument><expr><name>RedisModuleCtx</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>int</name> <name>ver</name></expr></argument>, <argument><expr><name>int</name> <name>apiver</name></expr></argument>)</argument_list> <name>REDISMODULE_ATTR_UNUSED</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>RedisModule_Init</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>apiver</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>getapifuncptr</name> <init>= <expr><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>ctx</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>RedisModule_GetApi</name> <operator>=</operator> <operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>getapifuncptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Calloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Realloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Strdup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateSubcommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetModuleAttribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>IsModuleNameBusy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>WrongArity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithSimpleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithNullArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithEmptyArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplySetArrayLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplySetMapLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplySetSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplySetAttributeLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplySetPushLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithStringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithCString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithEmptyString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithVerbatimString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithVerbatimStringType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithBool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithCallReply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithBigNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplyWithLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetSelectedDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SelectDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>KeyExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>OpenKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CloseKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>KeyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ValueLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ListPush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ListPop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ListGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ListSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ListInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ListDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringToLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringToDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringToLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringToStreamID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyProto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>FreeCallReply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyInteger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyBool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyBigNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyVerbatim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplySetElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyMapElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyAttributeElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyArrayElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CallReplyStringPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateStringFromCallReply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateStringFromLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateStringFromDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateStringFromLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateStringFromString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateStringFromStreamID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateStringPrintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>FreeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringPtrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>AutoMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Replicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ReplicateVerbatim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DeleteKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>UnlinkKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringDMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringTruncate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetExpire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetExpire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetAbsExpire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetAbsExpire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ResetDataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DbSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>RandomKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetIncrby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetRem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetRangeStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetFirstInScoreRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetLastInScoreRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetFirstInLexRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetLastInLexRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetRangeCurrentElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetRangeNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetRangePrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ZsetRangeEndReached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>HashSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>HashGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamIteratorStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamIteratorStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamIteratorNextID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamIteratorNextField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamIteratorDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamTrimByLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StreamTrimByID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>IsKeysPositionRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>KeyAtPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetClientId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetClientUserNameById</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetContextFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>AvoidReplicaTraffic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>PoolAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateDataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ModuleTypeSetValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ModuleTypeReplaceValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ModuleTypeGetType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ModuleTypeGetValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>IsIOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetModuleOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SignalModifiedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SaveUnsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadUnsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SaveSigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadSigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SaveString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SaveStringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadStringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SaveDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SaveFloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadFloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SaveLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadLongDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SaveDataTypeToString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadDataTypeFromString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LoadDataTypeFromStringEncver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>EmitAOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LogIOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>_Assert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>LatencyAddSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringAppendBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>TrimStringAllocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>RetainString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>HoldString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StringCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetContextFromIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetKeyNameFromIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetKeyNameFromModuleKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetDbIdFromModuleKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetDbIdFromIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetKeyNameFromOptCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetToKeyNameFromOptCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetDbIdFromOptCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetToDbIdFromOptCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>MonotonicMicroseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DigestAddStringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DigestAddLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DigestEndSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetKeyNameFromDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetDbIdFromDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>FreeDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictSetC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictReplaceC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictGetC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictDelC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictIteratorStartC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictIteratorStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictIteratorStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictIteratorReseekC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictIteratorReseek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictNextC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictPrevC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DictCompareC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>RegisterInfoFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>InfoAddSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>InfoBeginDictField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>InfoEndDictField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>InfoAddFieldString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>InfoAddFieldCString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>InfoAddFieldDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>InfoAddFieldLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>InfoAddFieldULongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetServerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>FreeServerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ServerInfoGetField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ServerInfoGetFieldC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ServerInfoGetFieldSigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ServerInfoGetFieldUnsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ServerInfoGetFieldDouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetClientInfoById</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>PublishMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SubscribeToServerEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetLRU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetLRU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetLFU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetLFU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>BlockClientOnKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SignalKeyAsReady</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetBlockedClientReadyKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ScanCursorCreate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ScanCursorRestart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ScanCursorDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ScanKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetContextFlagsAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetKeyspaceNotificationFlagsAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>IsSubEventSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetServerVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetTypeMethodVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_UNRELEASED_KEYSPEC_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>AddCommandKeySpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetCommandKeySpecBeginSearchIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetCommandKeySpecBeginSearchKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetCommandKeySpecFindKeysRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetCommandKeySpecFindKeysKeynum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Yield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetThreadSafeContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetDetachedThreadSafeContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>FreeThreadSafeContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ThreadSafeContextLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ThreadSafeContextTryLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ThreadSafeContextUnlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>BlockClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>UnblockClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>IsBlockedReplyRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>IsBlockedTimeoutRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetBlockedClientPrivateData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetBlockedClientHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>AbortBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>BlockedClientMeasureTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>BlockedClientMeasureTimeEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetDisconnectCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SubscribeToKeyspaceEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>NotifyKeyspaceEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetNotifyKeyspaceEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>BlockedClientDisconnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>RegisterClusterMessageReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SendClusterMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetClusterNodeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetClusterNodesList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>FreeClusterNodesList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>StopTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetTimerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetMyClusterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetClusterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetRandomBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetRandomHexChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetClusterFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ExportSharedAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetSharedAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>RegisterCommandFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>UnregisterCommandFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CommandFilterArgsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CommandFilterArgGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CommandFilterArgInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CommandFilterArgReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CommandFilterArgDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>Fork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SendChildHeartbeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ExitFromChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>KillForkChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetUsedMemoryRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>MallocSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>CreateModuleUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>FreeModuleUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>SetModuleUserACL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetCurrentUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetModuleUserFromUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ACLCheckCommandPermissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ACLCheckKeyPermissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ACLCheckChannelPermissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>ACLAddLogEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DeauthenticateAndCloseClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>AuthenticateClientWithACLUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>AuthenticateClientWithUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetClientCertificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetCommandKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetCurrentCommandName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>RegisterDefragFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DefragAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DefragRedisModuleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DefragShouldStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DefragCursorSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>DefragCursorGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetKeyNameFromDefragCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>GetDbIdFromDefragCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>EventLoopAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>EventLoopDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_GET_API</name><argument_list>(<argument><expr><name>EventLoopAddOneShot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>RedisModule_IsModuleNameBusy</name> <operator>&amp;&amp;</operator> <call><name>RedisModule_IsModuleNameBusy</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RedisModule_SetModuleAttribs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>ver</name></expr></argument>,<argument><expr><name>apiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModule_Assert</name><parameter_list>(<parameter><type><name>_e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_e)?(void)0 : (RedisModule__Assert(#_e,__FILE__,__LINE__),exit(1)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMAPI_FUNC_SUPPORTED</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(func != NULL)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleString</name></cpp:macro> <cpp:value>robj</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RedisModuleCommandArg</name></cpp:macro> <cpp:value>redisCommandArg</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
