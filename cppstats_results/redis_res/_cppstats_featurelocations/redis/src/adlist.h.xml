<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/adlist.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ADLIST_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ADLIST_H__</name></cpp:macro></cpp:define>



<typedef>typedef <type><struct>struct <name>listNode</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>listNode</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>listNode</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>listNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>listIter</name> <block>{
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>direction</name></decl>;</decl_stmt>
}</block></struct></type> <name>listIter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>list</name> <block>{
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dup</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>match</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>list</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listLength</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;len)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listFirst</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;head)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listLast</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;tail)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listPrevNode</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;prev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listNextNode</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listNodeValue</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;value)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listSetDupMethod</name><parameter_list>(<parameter><type><name>l</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;dup = (m))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listSetFreeMethod</name><parameter_list>(<parameter><type><name>l</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;free = (m))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listSetMatchMethod</name><parameter_list>(<parameter><type><name>l</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;match = (m))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listGetDupMethod</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;dup)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listGetFreeMethod</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;free)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listGetMatchMethod</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l)-&gt;match)</cpp:value></cpp:define>


<function_decl><type><name>list</name> <modifier>*</modifier></type><name>listCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listRelease</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listEmpty</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>list</name> <modifier>*</modifier></type><name>listAddNodeHead</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>list</name> <modifier>*</modifier></type><name>listAddNodeTail</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>list</name> <modifier>*</modifier></type><name>listInsertNode</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>listNode</name> <modifier>*</modifier></type><name>old_node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listDelNode</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>listNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>listIter</name> <modifier>*</modifier></type><name>listGetIterator</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>listNode</name> <modifier>*</modifier></type><name>listNext</name><parameter_list>(<parameter><decl><type><name>listIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listReleaseIterator</name><parameter_list>(<parameter><decl><type><name>listIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>list</name> <modifier>*</modifier></type><name>listDup</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>listNode</name> <modifier>*</modifier></type><name>listSearchKey</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>listNode</name> <modifier>*</modifier></type><name>listIndex</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listRewind</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>listIter</name> <modifier>*</modifier></type><name>li</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listRewindTail</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>listIter</name> <modifier>*</modifier></type><name>li</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listRotateTailToHead</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listRotateHeadToTail</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listJoin</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_START_HEAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_START_TAIL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
