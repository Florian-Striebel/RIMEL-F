<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/tls.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connhelpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adlist.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/conf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/pem.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_TLS_PROTO_TLSv1</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_TLS_PROTO_TLSv1_1</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_TLS_PROTO_TLSv1_2</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_TLS_PROTO_TLSv1_3</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_TLS_PROTO_DEFAULT</name></cpp:macro> <cpp:value>(REDIS_TLS_PROTO_TLSv1_2|REDIS_TLS_PROTO_TLSv1_3)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_TLS_PROTO_DEFAULT</name></cpp:macro> <cpp:value>(REDIS_TLS_PROTO_TLSv1_2)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ConnectionType</name></type> <name>CT_Socket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>redis_tls_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>redis_tls_client_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseProtocolsConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>protocols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDIS_TLS_PROTO_DEFAULT</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tokens</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid tls-protocols configuration string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"tlsv1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>protocols</name> <operator>|=</operator> <name>REDIS_TLS_PROTO_TLSv1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"tlsv1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>protocols</name> <operator>|=</operator> <name>REDIS_TLS_PROTO_TLSv1_1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"tlsv1.2"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>protocols</name> <operator>|=</operator> <name>REDIS_TLS_PROTO_TLSv1_2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"tlsv1.3"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>protocols</name> <operator>|=</operator> <name>REDIS_TLS_PROTO_TLSv1_3</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TLSv1.3 is specified in tls-protocols but not supported by OpenSSL."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>protocols</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid tls-protocols specified. "</literal>
<literal type="string">"Use a combination of 'TLSv1', 'TLSv1.1', 'TLSv1.2' and 'TLSv1.3'."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>protocols</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>protocols</name></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>list</name> <modifier>*</modifier></type><name>pending_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CRYPTO_LOCKS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRYPTO_LOCKS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name> <modifier>*</modifier></type><name>openssl_locks</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sslLockingCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name>openssl_locks</name> <operator>+</operator> <name>lock_id</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CRYPTO_LOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>line</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initCryptoLocks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nlocks</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CRYPTO_get_locking_callback</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nlocks</name> <operator>=</operator> <call><name>CRYPTO_num_locks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>openssl_locks</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>openssl_locks</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name>openssl_locks</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CRYPTO_set_locking_callback</name><argument_list>(<argument><expr><name>sslLockingCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>tlsInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if>
<expr_stmt><expr><call><name>OPENSSL_config</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10101000L</literal></expr></cpp:elif>
<expr_stmt><expr><call><name>OPENSSL_init_crypto</name><argument_list>(<argument><expr><name>OPENSSL_INIT_LOAD_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>OPENSSL_init_crypto</name><argument_list>(<argument><expr><name>OPENSSL_INIT_LOAD_CONFIG</name><operator>|</operator><name>OPENSSL_INIT_ATFORK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ERR_load_crypto_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRYPTO_LOCKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>initCryptoLocks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RAND_poll</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"OpenSSL: Failed to seed random number generator."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pending_list</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tlsCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>redis_tls_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>redis_tls_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redis_tls_ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redis_tls_client_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>redis_tls_client_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redis_tls_client_ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>OPENSSL_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>tlsPasswordCallback</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rwflag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>rwflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pass</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pass_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pass</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pass_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pass_len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>pass_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>pass_len</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type><name>createSSLContext</name><parameter_list>(<parameter><decl><type><name>redisTLSContextConfig</name> <modifier>*</modifier></type><name>ctx_config</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_file</name> <init>= <expr><ternary><condition><expr><name>client</name></expr> ?</condition><then> <expr><name><name>ctx_config</name><operator>-&gt;</operator><name>client_cert_file</name></name></expr> </then><else>: <expr><name><name>ctx_config</name><operator>-&gt;</operator><name>cert_file</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_file</name> <init>= <expr><ternary><condition><expr><name>client</name></expr> ?</condition><then> <expr><name><name>ctx_config</name><operator>-&gt;</operator><name>client_key_file</name></name></expr> </then><else>: <expr><name><name>ctx_config</name><operator>-&gt;</operator><name>key_file</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_file_pass</name> <init>= <expr><ternary><condition><expr><name>client</name></expr> ?</condition><then> <expr><name><name>ctx_config</name><operator>-&gt;</operator><name>client_key_file_pass</name></name></expr> </then><else>: <expr><name><name>ctx_config</name><operator>-&gt;</operator><name>key_file_pass</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>SSLv23_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_SSLv2</name><operator>|</operator><name>SSL_OP_NO_SSLv3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>protocols</name> <operator>&amp;</operator> <name>REDIS_TLS_PROTO_TLSv1</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TLSv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>protocols</name> <operator>&amp;</operator> <name>REDIS_TLS_PROTO_TLSv1_1</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TLSv1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_TLSv1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>protocols</name> <operator>&amp;</operator> <name>REDIS_TLS_PROTO_TLSv1_2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TLSv1_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_TLSv1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>protocols</name> <operator>&amp;</operator> <name>REDIS_TLS_PROTO_TLSv1_3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TLSv1_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SSL_CTX_set_mode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_MODE_ENABLE_PARTIAL_WRITE</name><operator>|</operator><name>SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name><operator>|</operator><name>SSL_VERIFY_FAIL_IF_NO_PEER_CERT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tlsPasswordCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb_userdata</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>key_file_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to load certificate: %s: %s"</literal></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>, <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to load private key: %s: %s"</literal></expr></argument>, <argument><expr><name>key_file</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx_config</name><operator>-&gt;</operator><name>ca_cert_file</name></name> <operator>||</operator> <name><name>ctx_config</name><operator>-&gt;</operator><name>ca_cert_dir</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>ca_cert_file</name></name></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>ca_cert_dir</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to configure CA certificate(s) file/directory: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_config</name><operator>-&gt;</operator><name>ciphers</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>ciphers</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to configure ciphers: %s"</literal></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>ciphers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx_config</name><operator>-&gt;</operator><name>ciphersuites</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SSL_CTX_set_ciphersuites</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>ciphersuites</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to configure ciphersuites: %s"</literal></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>ciphersuites</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ctx</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>tlsConfigure</name><parameter_list>(<parameter><decl><type><name>redisTLSContextConfig</name> <modifier>*</modifier></type><name>ctx_config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>client_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx_config</name><operator>-&gt;</operator><name>cert_file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No tls-cert-file configured!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx_config</name><operator>-&gt;</operator><name>key_file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No tls-key-file configured!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>tls_auth_clients</name></name> <operator>!=</operator> <name>TLS_CLIENT_AUTH_NO</name><operator>)</operator> <operator>||</operator> <name><name>server</name><operator>.</operator><name>tls_cluster</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>tls_replication</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>ctx_config</name><operator>-&gt;</operator><name>ca_cert_file</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx_config</name><operator>-&gt;</operator><name>ca_cert_dir</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Either tls-ca-cert-file or tls-ca-cert-dir must be specified when tls-cluster, tls-replication or tls-auth-clients are enabled!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>protocols</name> <init>= <expr><call><name>parseProtocolsConfig</name><argument_list>(<argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>protocols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>protocols</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>createSSLContext</name><argument_list>(<argument><expr><name>ctx_config</name></expr></argument>, <argument><expr><name>protocols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_config</name><operator>-&gt;</operator><name>session_caching</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_SESS_CACHE_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_sess_set_cache_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>session_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_timeout</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>session_cache_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_session_id_context</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="string">"redis"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_SESS_CACHE_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_CLIENT_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_CLIENT_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ctx_config</name><operator>-&gt;</operator><name>prefer_server_ciphers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_CIPHER_SERVER_PREFERENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTX_set_ecdh_auto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_ecdh_auto</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_DH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_config</name><operator>-&gt;</operator><name>dh_params_file</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dhfile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>dh_params_file</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DH</name> <modifier>*</modifier></type><name>dh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dhfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to load %s: %s"</literal></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>dh_params_file</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name>PEM_read_DHparams</name><argument_list>(<argument><expr><name>dhfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>dhfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: failed to read DH params."</literal></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>dh_params_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_set_tmp_dh</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to load DH params file: %s: %s"</literal></expr></argument>, <argument><expr><name><name>ctx_config</name><operator>-&gt;</operator><name>dh_params_file</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx_config</name><operator>-&gt;</operator><name>client_cert_file</name></name> <operator>&amp;&amp;</operator> <name><name>ctx_config</name><operator>-&gt;</operator><name>client_key_file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>client_ctx</name> <operator>=</operator> <call><name>createSSLContext</name><argument_list>(<argument><expr><name>ctx_config</name></expr></argument>, <argument><expr><name>protocols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>client_ctx</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>redis_tls_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>redis_tls_client_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redis_tls_ctx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redis_tls_client_ctx</name> <operator>=</operator> <name>client_ctx</name></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>client_ctx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>isTlsConfigured</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>redis_tls_ctx</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS_DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSCONN_DEBUG</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>serverLog(LL_DEBUG, "TLSCONN: " fmt, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSCONN_DEBUG</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ConnectionType</name></type> <name>CT_TLS</name></decl>;</decl_stmt>
















<typedef>typedef <type><enum>enum <block>{
<decl><name>WANT_READ</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>WANT_WRITE</name></decl>
}</block></enum></type> <name>WantIOType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CONN_FLAG_READ_WANT_WRITE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CONN_FLAG_WRITE_WANT_READ</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CONN_FLAG_FD_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>tls_connection</name> <block>{
<decl_stmt><decl><type><name>connection</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ssl_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>pending_list_node</name></decl>;</decl_stmt>
}</block></struct></type> <name>tls_connection</name>;</typedef>

<function><type><specifier>static</specifier> <name>connection</name> <modifier>*</modifier></type><name>createTLSConnection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>client_side</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>redis_tls_ctx</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>client_side</name> <operator>&amp;&amp;</operator> <name>redis_tls_client_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name>redis_tls_client_ctx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tls_connection</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>type</name></name> <operator>=</operator> <operator>&amp;</operator><name>CT_TLS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>connection</name> <modifier>*</modifier></type><name>connCreateTLS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>createTLSConnection</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>updateTLSError</name><parameter_list>(<parameter><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>last_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>connection</name> <modifier>*</modifier></type><name>connCreateAcceptedTLS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>require_auth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <call><name>createTLSConnection</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ACCEPTING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>updateTLSError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>require_auth</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TLS_CLIENT_AUTH_NO</name></expr>:</case>
<expr_stmt><expr><call><name>SSL_set_verify</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>SSL_VERIFY_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TLS_CLIENT_AUTH_OPTIONAL</name></expr>:</case>
<expr_stmt><expr><call><name>SSL_set_verify</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>SSL_set_verify</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name><operator>|</operator><name>SSL_VERIFY_FAIL_IF_NO_PEER_CERT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_set_accept_state</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tlsEventHandler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <name>int</name></type> <name>handleSSLReturnCode</name><parameter_list>(<parameter><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret_value</name></decl></parameter>, <parameter><decl><type><name>WantIOType</name> <modifier>*</modifier></type><name>want</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret_value</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ssl_err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>ret_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>ssl_err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>want</name> <operator>=</operator> <name>WANT_WRITE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>want</name> <operator>=</operator> <name>WANT_READ</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>last_errno</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name> <operator>=</operator> <ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><call><name>zstrdup</name><argument_list>(<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>updateTLSError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>ssl_err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>registerSSLEvent</name><parameter_list>(<parameter><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>WantIOType</name></type> <name>want</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><call><name>aeGetFileEvents</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>want</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WANT_READ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>,
<argument><expr><name>tlsEventHandler</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>WANT_WRITE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_WRITABLE</name></expr></argument>,
<argument><expr><name>tlsEventHandler</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>updateSSLEvent</name><parameter_list>(<parameter><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><call><name>aeGetFileEvents</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_read</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>read_handler</name></name> <operator>||</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TLS_CONN_FLAG_WRITE_WANT_READ</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_write</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>write_handler</name></name> <operator>||</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TLS_CONN_FLAG_READ_WANT_WRITE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_read</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>, <argument><expr><name>tlsEventHandler</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_read</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_write</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_WRITABLE</name></expr></argument>, <argument><expr><name>tlsEventHandler</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_write</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tlsHandleEvent</name><parameter_list>(<parameter><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>conn_error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TLSCONN_DEBUG</name><argument_list>(<argument><expr><literal type="string">"tlsEventHandler(): fd=%d, state=%d, mask=%d, r=%d, w=%d, flags=%d"</literal></expr></argument>,
<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>read_handler</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>write_handler</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONN_STATE_CONNECTING</name></expr>:</case>
<expr_stmt><expr><name>conn_error</name> <operator>=</operator> <call><name>connGetSocketError</name><argument_list>(<argument><expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>conn_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>last_errno</name></name> <operator>=</operator> <name>conn_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TLS_CONN_FLAG_FD_SET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TLS_CONN_FLAG_FD_SET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WantIOType</name></type> <name>want</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handleSSLReturnCode</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>registerSSLEvent</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_CONNECTED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callHandler</name><argument_list>(<argument><expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>conn_handler</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>conn_handler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONN_STATE_ACCEPTING</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_accept</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WantIOType</name></type> <name>want</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handleSSLReturnCode</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>registerSSLEvent</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_CONNECTED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callHandler</name><argument_list>(<argument><expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>conn_handler</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>conn_handler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONN_STATE_CONNECTED</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>call_read</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>read_handler</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TLS_CONN_FLAG_READ_WANT_WRITE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>call_write</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>write_handler</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TLS_CONN_FLAG_WRITE_WANT_READ</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>












<decl_stmt><decl><type><name>int</name></type> <name>invert</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONN_FLAG_WRITE_BARRIER</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>invert</name> <operator>&amp;&amp;</operator> <name>call_read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TLS_CONN_FLAG_READ_WANT_WRITE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callHandler</name><argument_list>(<argument><expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>read_handler</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>call_write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TLS_CONN_FLAG_WRITE_WANT_READ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callHandler</name><argument_list>(<argument><expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>write_handler</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>invert</name> <operator>&amp;&amp;</operator> <name>call_read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TLS_CONN_FLAG_READ_WANT_WRITE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callHandler</name><argument_list>(<argument><expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>read_handler</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SSL_pending</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>pending_list_node</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>pending_list</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>pending_list_node</name></name> <operator>=</operator> <call><name>listLast</name><argument_list>(<argument><expr><name>pending_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pending_list_node</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>pending_list</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pending_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>pending_list_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>updateSSLEvent</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tlsEventHandler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>clientData</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tlsHandleEvent</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connTLSClose</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pending_list_node</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>pending_list</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pending_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>pending_list_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>CT_Socket</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>conn_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connTLSAccept</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>_conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>accept_handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>_conn</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>CONN_STATE_ACCEPTING</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>conn_handler</name></name> <operator>=</operator> <name>accept_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_accept</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WantIOType</name></type> <name>want</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handleSSLReturnCode</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>registerSSLEvent</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_CONNECTED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callHandler</name><argument_list>(<argument><expr><operator>(</operator><name>connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>conn_handler</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>conn_handler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connTLSConnect</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_addr</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>connect_handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>CONN_STATE_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>CT_Socket</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><name>conn_</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>connect_handler</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>




<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connTLSWrite</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ssl_err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_write</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>last_errno</name></name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WantIOType</name></type> <name>want</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ssl_err</name> <operator>=</operator> <call><name>handleSSLReturnCode</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>want</name> <operator>==</operator> <name>WANT_READ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TLS_CONN_FLAG_WRITE_WANT_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>updateSSLEvent</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ssl_err</name> <operator>==</operator> <name>SSL_ERROR_ZERO_RETURN</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ssl_err</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>errno</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_CLOSED</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connTLSRead</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ssl_err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>last_errno</name></name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WantIOType</name></type> <name>want</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ssl_err</name> <operator>=</operator> <call><name>handleSSLReturnCode</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>want</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>want</name> <operator>==</operator> <name>WANT_WRITE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TLS_CONN_FLAG_READ_WANT_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>updateSSLEvent</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ssl_err</name> <operator>==</operator> <name>SSL_ERROR_ZERO_RETURN</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ssl_err</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>errno</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_CLOSED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connTLSGetLastError</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_error</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>connTLSSetWriteHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>barrier</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>write_handler</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>barrier</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONN_FLAG_WRITE_BARRIER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CONN_FLAG_WRITE_BARRIER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>updateSSLEvent</name><argument_list>(<argument><expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>connTLSSetReadHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>read_handler</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateSSLEvent</name><argument_list>(<argument><expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setBlockingTimeout</name><parameter_list>(<parameter><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>anetBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>anetSendTimeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>anetRecvTimeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unsetBlockingTimeout</name><parameter_list>(<parameter><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>anetSendTimeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>anetRecvTimeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connTLSBlockingConnect</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>CONN_STATE_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>CT_Socket</name><operator>.</operator><name>blocking_connect</name></name><argument_list>(<argument><expr><name>conn_</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setBlockingTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>unsetBlockingTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CONN_STATE_CONNECTED</name></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>connTLSSyncWrite</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setBlockingTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_clear_mode</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>SSL_MODE_ENABLE_PARTIAL_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SSL_write</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SSL_set_mode</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>SSL_MODE_ENABLE_PARTIAL_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unsetBlockingTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>connTLSSyncRead</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setBlockingTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unsetBlockingTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>connTLSSyncReadLine</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setBlockingTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ptr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>ptr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nread</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>unsetBlockingTimeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connTLSGetType</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>conn_</name></expr>;</expr_stmt>

<return>return <expr><name>CONN_TYPE_TLS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ConnectionType</name></type> <name>CT_TLS</name> <init>= <expr><block>{
<expr><operator>.</operator><name>ae_handler</name> <operator>=</operator> <name>tlsEventHandler</name></expr>,
<expr><operator>.</operator><name>accept</name> <operator>=</operator> <name>connTLSAccept</name></expr>,
<expr><operator>.</operator><name>connect</name> <operator>=</operator> <name>connTLSConnect</name></expr>,
<expr><operator>.</operator><name>blocking_connect</name> <operator>=</operator> <name>connTLSBlockingConnect</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>connTLSRead</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>connTLSWrite</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>connTLSClose</name></expr>,
<expr><operator>.</operator><name>set_write_handler</name> <operator>=</operator> <name>connTLSSetWriteHandler</name></expr>,
<expr><operator>.</operator><name>set_read_handler</name> <operator>=</operator> <name>connTLSSetReadHandler</name></expr>,
<expr><operator>.</operator><name>get_last_error</name> <operator>=</operator> <name>connTLSGetLastError</name></expr>,
<expr><operator>.</operator><name>sync_write</name> <operator>=</operator> <name>connTLSSyncWrite</name></expr>,
<expr><operator>.</operator><name>sync_read</name> <operator>=</operator> <name>connTLSSyncRead</name></expr>,
<expr><operator>.</operator><name>sync_readline</name> <operator>=</operator> <name>connTLSSyncReadLine</name></expr>,
<expr><operator>.</operator><name>get_type</name> <operator>=</operator> <name>connTLSGetType</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>tlsHasPendingData</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pending_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>listLength</name><argument_list>(<argument><expr><name>pending_list</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tlsProcessPendingData</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>processed</name> <init>= <expr><call><name>listLength</name><argument_list>(<argument><expr><name>pending_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>pending_list</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tlsHandleEvent</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>processed</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>sds</name></type> <name>connTLSGetPeerCert</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tls_connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>tls_connection</name> <operator>*</operator><operator>)</operator> <name>conn_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>conn_</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>get_type</name></name><argument_list>(<argument><expr><name>conn_</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_TYPE_TLS</name> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>PEM_write_bio_X509</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bio</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bio_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>bio_len</name> <init>= <expr><call><name>BIO_get_mem_data</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bio_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>cert_pem</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>bio_ptr</name></expr></argument>, <argument><expr><name>bio_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cert_pem</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type> <name>tlsInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tlsCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tlsConfigure</name><parameter_list>(<parameter><decl><type><name>redisTLSContextConfig</name> <modifier>*</modifier></type><name>ctx_config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>connection</name> <modifier>*</modifier></type><name>connCreateTLS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>connection</name> <modifier>*</modifier></type><name>connCreateAcceptedTLS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>require_auth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>require_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tlsHasPendingData</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tlsProcessPendingData</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>sds</name></type> <name>connTLSGetPeerCert</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn_</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>conn_</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
