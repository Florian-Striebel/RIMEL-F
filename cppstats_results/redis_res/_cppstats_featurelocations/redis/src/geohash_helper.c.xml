<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/geohash_helper.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"geohash_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debugmacro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_R</name></cpp:macro> <cpp:value>(M_PI / 180.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAJOR</name></cpp:macro> <cpp:value>6378137.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MINOR</name></cpp:macro> <cpp:value>6356752.3142</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO</name></cpp:macro> <cpp:value>(R_MINOR / R_MAJOR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECCENT</name></cpp:macro> <cpp:value>(sqrt(1.0 - (RATIO *RATIO)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM</name></cpp:macro> <cpp:value>(0.5 * ECCENT)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>DEG_TO_RAD</name> <init>= <expr><literal type="number">0.017453292519943295769236907684886</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EARTH_RADIUS_IN_METERS</name> <init>= <expr><literal type="number">6372797.560856</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>MERCATOR_MAX</name> <init>= <expr><literal type="number">20037726.37</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>MERCATOR_MIN</name> <init>= <expr><operator>-</operator><literal type="number">20037726.37</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>deg_rad</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>ang</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ang</name> <operator>*</operator> <name>D_R</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>rad_deg</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>ang</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ang</name> <operator>/</operator> <name>D_R</name></expr>;</return> </block_content>}</block></function>



<function><type><name>uint8_t</name></type> <name>geohashEstimateStepsByRadius</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>range_meters</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lat</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>range_meters</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">26</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>range_meters</name> <operator>&lt;</operator> <name>MERCATOR_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range_meters</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>step</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>lat</name> <operator>&gt;</operator> <literal type="number">66</literal> <operator>||</operator> <name>lat</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">66</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>step</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lat</name> <operator>&gt;</operator> <literal type="number">80</literal> <operator>||</operator> <name>lat</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>step</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>geohashBoundingBox</name><parameter_list>(<parameter><decl><type><name>GeoShape</name> <modifier>*</modifier></type><name>shape</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>bounds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bounds</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>longitude</name> <init>= <expr><name><name>shape</name><operator>-&gt;</operator><name>xy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>latitude</name> <init>= <expr><name><name>shape</name><operator>-&gt;</operator><name>xy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>height</name> <init>= <expr><name><name>shape</name><operator>-&gt;</operator><name>conversion</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>shape</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CIRCULAR_TYPE</name></expr> ?</condition><then> <expr><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>radius</name></name></expr> </then><else>: <expr><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>r</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>width</name> <init>= <expr><name><name>shape</name><operator>-&gt;</operator><name>conversion</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>shape</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CIRCULAR_TYPE</name></expr> ?</condition><then> <expr><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>radius</name></name></expr> </then><else>: <expr><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>r</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>lat_delta</name> <init>= <expr><call><name>rad_deg</name><argument_list>(<argument><expr><name>height</name><operator>/</operator><name>EARTH_RADIUS_IN_METERS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>long_delta_top</name> <init>= <expr><call><name>rad_deg</name><argument_list>(<argument><expr><name>width</name><operator>/</operator><name>EARTH_RADIUS_IN_METERS</name><operator>/</operator><call><name>cos</name><argument_list>(<argument><expr><call><name>deg_rad</name><argument_list>(<argument><expr><name>latitude</name><operator>+</operator><name>lat_delta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>long_delta_bottom</name> <init>= <expr><call><name>rad_deg</name><argument_list>(<argument><expr><name>width</name><operator>/</operator><name>EARTH_RADIUS_IN_METERS</name><operator>/</operator><call><name>cos</name><argument_list>(<argument><expr><call><name>deg_rad</name><argument_list>(<argument><expr><name>latitude</name><operator>-</operator><name>lat_delta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>southern_hemisphere</name> <init>= <expr><ternary><condition><expr><name>latitude</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bounds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>southern_hemisphere</name></expr> ?</condition><then> <expr><name>longitude</name><operator>-</operator><name>long_delta_bottom</name></expr> </then><else>: <expr><name>longitude</name><operator>-</operator><name>long_delta_top</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bounds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>southern_hemisphere</name></expr> ?</condition><then> <expr><name>longitude</name><operator>+</operator><name>long_delta_bottom</name></expr> </then><else>: <expr><name>longitude</name><operator>+</operator><name>long_delta_top</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bounds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>latitude</name> <operator>-</operator> <name>lat_delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bounds</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>latitude</name> <operator>+</operator> <name>lat_delta</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>GeoHashRadius</name></type> <name>geohashCalculateAreasByShapeWGS84</name><parameter_list>(<parameter><decl><type><name>GeoShape</name> <modifier>*</modifier></type><name>shape</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>GeoHashRange</name></type> <name>long_range</name></decl>, <decl><type ref="prev"/><name>lat_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GeoHashRadius</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GeoHashBits</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GeoHashNeighbors</name></type> <name>neighbors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GeoHashArea</name></type> <name>area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>min_lon</name></decl>, <decl><type ref="prev"/><name>max_lon</name></decl>, <decl><type ref="prev"/><name>min_lat</name></decl>, <decl><type ref="prev"/><name>max_lat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>steps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>geohashBoundingBox</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name><name>shape</name><operator>-&gt;</operator><name>bounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_lon</name> <operator>=</operator> <name><name>shape</name><operator>-&gt;</operator><name>bounds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_lat</name> <operator>=</operator> <name><name>shape</name><operator>-&gt;</operator><name>bounds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_lon</name> <operator>=</operator> <name><name>shape</name><operator>-&gt;</operator><name>bounds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_lat</name> <operator>=</operator> <name><name>shape</name><operator>-&gt;</operator><name>bounds</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>longitude</name> <init>= <expr><name><name>shape</name><operator>-&gt;</operator><name>xy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>latitude</name> <init>= <expr><name><name>shape</name><operator>-&gt;</operator><name>xy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>double</name></type> <name>radius_meters</name> <init>= <expr><ternary><condition><expr><name><name>shape</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CIRCULAR_TYPE</name></expr> ?</condition><then> <expr><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>radius</name></name></expr> </then><else>:
<expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>r</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>r</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>r</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>shape</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>r</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>radius_meters</name> <operator>*=</operator> <name><name>shape</name><operator>-&gt;</operator><name>conversion</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>steps</name> <operator>=</operator> <call><name>geohashEstimateStepsByRadius</name><argument_list>(<argument><expr><name>radius_meters</name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>geohashGetCoordRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name>long_range</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>lat_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>long_range</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>lat_range</name></expr></argument>,<argument><expr><name>longitude</name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>,<argument><expr><name>steps</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashNeighbors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>neighbors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashDecode</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>,<argument><expr><name>lat_range</name></expr></argument>,<argument><expr><name>hash</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>decrease_step</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>GeoHashArea</name></type> <name>north</name></decl>, <decl><type ref="prev"/><name>south</name></decl>, <decl><type ref="prev"/><name>east</name></decl>, <decl><type ref="prev"/><name>west</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>geohashDecode</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>, <argument><expr><name>lat_range</name></expr></argument>, <argument><expr><name><name>neighbors</name><operator>.</operator><name>north</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>north</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashDecode</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>, <argument><expr><name>lat_range</name></expr></argument>, <argument><expr><name><name>neighbors</name><operator>.</operator><name>south</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>south</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashDecode</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>, <argument><expr><name>lat_range</name></expr></argument>, <argument><expr><name><name>neighbors</name><operator>.</operator><name>east</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>east</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashDecode</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>, <argument><expr><name>lat_range</name></expr></argument>, <argument><expr><name><name>neighbors</name><operator>.</operator><name>west</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>west</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>,<argument><expr><name>longitude</name></expr></argument>,<argument><expr><name><name>north</name><operator>.</operator><name>latitude</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <name>radius_meters</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>decrease_step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>,<argument><expr><name>longitude</name></expr></argument>,<argument><expr><name><name>south</name><operator>.</operator><name>latitude</name><operator>.</operator><name>min</name></name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <name>radius_meters</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>decrease_step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>,<argument><expr><name><name>east</name><operator>.</operator><name>longitude</name><operator>.</operator><name>max</name></name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <name>radius_meters</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>decrease_step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>,<argument><expr><name><name>west</name><operator>.</operator><name>longitude</name><operator>.</operator><name>min</name></name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <name>radius_meters</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>decrease_step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>steps</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>decrease_step</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>steps</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>long_range</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>lat_range</name></expr></argument>,<argument><expr><name>longitude</name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>,<argument><expr><name>steps</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashNeighbors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>neighbors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>geohashDecode</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>,<argument><expr><name>lat_range</name></expr></argument>,<argument><expr><name>hash</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>steps</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>area</name><operator>.</operator><name>latitude</name><operator>.</operator><name>min</name></name> <operator>&lt;</operator> <name>min_lat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south_west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south_east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>area</name><operator>.</operator><name>latitude</name><operator>.</operator><name>max</name></name> <operator>&gt;</operator> <name>max_lat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north_east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north_west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>area</name><operator>.</operator><name>longitude</name><operator>.</operator><name>min</name></name> <operator>&lt;</operator> <name>min_lon</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south_west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north_west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>area</name><operator>.</operator><name>longitude</name><operator>.</operator><name>max</name></name> <operator>&gt;</operator> <name>max_lon</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south_east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north_east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>radius</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>radius</name><operator>.</operator><name>neighbors</name></name> <operator>=</operator> <name>neighbors</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>radius</name><operator>.</operator><name>area</name></name> <operator>=</operator> <name>area</name></expr>;</expr_stmt>
<return>return <expr><name>radius</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GeoHashFix52Bits</name></type> <name>geohashAlign52Bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bits</name> <init>= <expr><name><name>hash</name><operator>.</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name><name>hash</name><operator>.</operator><name>step</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>double</name></type> <name>geohashGetDistance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>lon1d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lat1d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lon2d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lat2d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>lat1r</name></decl>, <decl><type ref="prev"/><name>lon1r</name></decl>, <decl><type ref="prev"/><name>lat2r</name></decl>, <decl><type ref="prev"/><name>lon2r</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lat1r</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>lat1d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lon1r</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>lon1d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lat2r</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>lat2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lon2r</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>lon2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>lat2r</name> <operator>-</operator> <name>lat1r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>lon2r</name> <operator>-</operator> <name>lon1r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2.0</literal> <operator>*</operator> <name>EARTH_RADIUS_IN_METERS</name> <operator>*</operator>
<call><name>asin</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>u</name> <operator>*</operator> <name>u</name> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name>lat1r</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>lat2r</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>v</name> <operator>*</operator> <name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashGetDistanceIfInRadius</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>radius</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>distance</name> <operator>&gt;</operator> <name>radius</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashGetDistanceIfInRadiusWGS84</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>radius</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>geohashGetDistanceIfInRadius</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>geohashGetDistanceIfInRectangle</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>width_m</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>height_m</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>lon_distance</name> <init>= <expr><call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lat_distance</name> <init>= <expr><call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lon_distance</name> <operator>&gt;</operator> <name>width_m</name><operator>/</operator><literal type="number">2</literal> <operator>||</operator> <name>lat_distance</name> <operator>&gt;</operator> <name>height_m</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
