<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/cluster.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"endianconv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>




<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>myself</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>createClusterNode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterAddNode</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterAcceptHandler</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterReadHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterSendPing</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterSendFail</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterSendFailoverAuthIfNeeded</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterUpdateState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterNodeGetSlotBit</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>clusterGenNodesDescription</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_pport</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>clusterLookupNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>list</name> <modifier>*</modifier></type><name>clusterGetNodesServingMySlots</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterNodeAddSlave</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterAddSlot</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterDelSlot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterDelNodeSlots</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterNodeSetSlotBit</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterSetMaster</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterHandleSlaveFailover</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterHandleSlaveMigration</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_slaves</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bitmapTestBit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterDoBeforeSleep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterSendUpdate</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetManualFailover</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterCloseAllSlots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterSetNodeAsMaster</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterDelNode</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>delnode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>representClusterNodeFlags</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>ci</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>clusterGetMaxEpoch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterBumpConfigEpochWithoutConsensus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleCallClusterReceivers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sender_id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>module_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clusterGetMessageTypeString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>removeChannelsInSlot</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>countKeysInSlot</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>countChannelsInSlot</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>delKeysInSlot</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictEntryNextInSlot</name><parameter_list>(<parameter><type><name>de</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((clusterDictEntryMetadata *)dictMetadata(de))-&gt;next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictEntryPrevInSlot</name><parameter_list>(<parameter><type><name>de</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((clusterDictEntryMetadata *)dictMetadata(de))-&gt;prev)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCVBUF_INIT_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCVBUF_MAX_PREALLOC</name></cpp:macro> <cpp:value>(1&lt;&lt;20)</cpp:value></cpp:define>



<decl_stmt><decl><type><name>dictType</name></type> <name>clusterNodesDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>dictType</name></type> <name>clusterNodesBlackListDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>











<function><type><name>int</name></type> <name>clusterLoadConfig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxline</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Loading the cluster node config from %s: %s"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>redis_fstat</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unable to obtain the cluster node config file stat %s: %s"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>maxline</name> <operator>=</operator> <literal type="number">1024</literal><operator>+</operator><name>CLUSTER_SLOTS</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>maxline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><name>maxline</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>sdssplitargs</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fmterr</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"vars"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>argc</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fmterr</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"currentEpoch"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name> <operator>=</operator>
<call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"lastVoteEpoch"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>lastVoteEpoch</name></name> <operator>=</operator>
<call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Skipping unknown cluster config variable '%s'"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fmterr</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>createClusterNode</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fmterr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>busp</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>port</name></expr></argument>,<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>busp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>busp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>busp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <ternary><condition><expr><name>busp</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>busp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>n</name><operator>-&gt;</operator><name>port</name></name> <operator>+</operator> <name>CLUSTER_PORT_INCR</name></expr></else></ternary></expr>;</expr_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hostname</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hostname</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"myself"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>myself</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_MYSELF</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_MASTER</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_SLAVE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"fail?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_PFAIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"fail"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_FAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>fail_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"handshake"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_HANDSHAKE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"noaddr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_NOADDR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"nofailover"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_NOFAILOVER</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"noflags"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown flag in redis cluster config file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>master</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>createClusterNode</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>=</operator> <name>master</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterNodeAddSlave</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>pong_received</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>direction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>cn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>direction</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>slot</name> <operator>&gt;=</operator> <name>CLUSTER_SLOTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fmterr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cn</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cn</name> <operator>=</operator> <call><name>createClusterNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>cn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>cn</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>cn</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stop</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>stop</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>start</name> <operator>&gt;=</operator> <name>CLUSTER_SLOTS</name> <operator>||</operator>
<name>stop</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>stop</name> <operator>&gt;=</operator> <name>CLUSTER_SLOTS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fmterr</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>start</name> <operator>&lt;=</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterAddSlot</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>start</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>

<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fmterr</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Node configuration loaded, I'm %.40s"</literal></expr></argument>, <argument><expr><name><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>clusterGetMaxEpoch</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name> <operator>=</operator> <call><name>clusterGetMaxEpoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>

<label><name>fmterr</name>:</label>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unrecoverable error: corrupted cluster config file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>clusterSaveConfig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>do_fsync</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>content_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>todo_before_sleep</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_TODO_SAVE_CONFIG</name></expr>;</expr_stmt>



<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>clusterGenNodesDescription</name><argument_list>(<argument><expr><name>CLUSTER_NODE_HANDSHAKE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">"vars currentEpoch %llu lastVoteEpoch %llu\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>lastVoteEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>content_size</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster_configfile</name></name></expr></argument>,<argument><expr><name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name></expr></argument>,<argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>redis_fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>&gt;</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name>content_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdsgrowzero</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><name><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ci</name><operator>+</operator><name>content_size</name></expr></argument>,<argument><expr><literal type="char">'\n'</literal></expr></argument>,<argument><expr><name><name>sb</name><operator>.</operator><name>st_size</name></name><operator>-</operator><name>content_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>ci</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_fsync</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>todo_before_sleep</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_TODO_FSYNC_CONFIG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>content_size</name> <operator>!=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>content_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clusterSaveConfigOrDie</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>do_fsync</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clusterSaveConfig</name><argument_list>(<argument><expr><name>do_fsync</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Fatal: can't update cluster config file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>clusterLockConfig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_CLOEXEC</name></expr></argument>,<argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Can't open %s in order to acquire a lock: %s"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>LOCK_EX</name><operator>|</operator><name>LOCK_NB</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Sorry, the cluster configuration file %s is already used "</literal>
<literal type="string">"by a different Redis Cluster node. Please make sure that "</literal>
<literal type="string">"different nodes use different cluster configuration "</literal>
<literal type="string">"files."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Impossible to lock %s: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_config_file_lock_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>deriveAnnouncedPorts</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>announced_port</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>announced_pport</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>announced_cport</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>tls_cluster</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>announced_port</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>announced_pport</name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>tls_cluster</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>announced_cport</name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>cluster_port</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>cluster_port</name></name></expr> </then><else>: <expr><name>port</name> <operator>+</operator> <name>CLUSTER_PORT_INCR</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>tls_cluster</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cluster_announce_tls_port</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>announced_port</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster_announce_tls_port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>announced_pport</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>announced_port</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>announced_cport</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>clusterUpdateMyselfFlags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>myself</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldflags</name> <init>= <expr><name><name>myself</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nofailover</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name></expr> ?</condition><then>
<expr><name>CLUSTER_NODE_NOFAILOVER</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_NOFAILOVER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>nofailover</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>flags</name></name> <operator>!=</operator> <name>oldflags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clusterUpdateMyselfIp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>myself</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>prev_ip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>curr_ip</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_ip</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>curr_ip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>prev_ip</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>curr_ip</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>prev_ip</name> <operator>&amp;&amp;</operator> <name>curr_ip</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>prev_ip</name></expr></argument>,<argument><expr><name>curr_ip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prev_ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>prev_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev_ip</name> <operator>=</operator> <name>curr_ip</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_ip</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>prev_ip</name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>prev_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>updateAnnouncedHostname</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>new</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>new</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>hostname</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clusterUpdateMyselfHostname</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>myself</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>updateAnnouncedHostname</name><argument_list>(<argument><expr><name>myself</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clusterInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saveconf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CLUSTER_FAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>todo_before_sleep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clusterNodesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes_black_list</name></name> <operator>=</operator>
<call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clusterNodesBlackListDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_rank</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>cant_failover_reason</name></name> <operator>=</operator> <name>CLUSTER_CANT_FAILOVER_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>lastVoteEpoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CLUSTERMSG_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_sent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_received</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_pfail_nodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stat_cluster_links_buffer_limit_exceeded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterCloseAllSlots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_config_file_lock_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>clusterLockConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster_configfile</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>clusterLoadConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster_configfile</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>myself</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name> <operator>=</operator>
<call><name>createClusterNode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>CLUSTER_NODE_MYSELF</name><operator>|</operator><name>CLUSTER_NODE_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"No cluster configuration found, I'm %.40s"</literal></expr></argument>,
<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saveconf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>saveconf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterSaveConfigOrDie</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cfd</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>tls_cluster</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_port</name></name> <operator>&amp;&amp;</operator> <name>port</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">65535</literal><operator>-</operator><name>CLUSTER_PORT_INCR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Redis port number too high. "</literal>
<literal type="string">"Cluster communication port is 10,000 port "</literal>
<literal type="string">"numbers higher than your Redis port. "</literal>
<literal type="string">"Your Redis port number must be 55535 or less."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No bind address is configured, but it is required for the Cluster bus."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cport</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>cluster_port</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>cluster_port</name></name></expr> </then><else>: <expr><name>port</name> <operator>+</operator> <name>CLUSTER_PORT_INCR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listenToPort</name><argument_list>(<argument><expr><name>cport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>cfd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed listening on port %u (cluster), aborting."</literal></expr></argument>, <argument><expr><name>cport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>createSocketAcceptHandler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>cfd</name></name></expr></argument>, <argument><expr><name>clusterAcceptHandler</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating Redis Cluster socket accept handler."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>slotToKeyInit</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots_to_channels</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>deriveAnnouncedPorts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>myself</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>myself</name><operator>-&gt;</operator><name>pport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>myself</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterUpdateMyselfFlags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterUpdateMyselfIp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterUpdateMyselfHostname</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>clusterReset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hard</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterSetNodeAsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationUnsetMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emptyData</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>EMPTYDB_NO_FLAGS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>clusterCloseAllSlots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterDelSlot</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>myself</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterDelNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>hard</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>oldname</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>lastVoteEpoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"configEpoch set to 0 via CLUSTER RESET HARD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>oldname</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>,<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Node hard reset, now I'm %.40s"</literal></expr></argument>, <argument><expr><name><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator>
<name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>clusterLink</name> <modifier>*</modifier></type><name>createClusterLink</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>link</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_alloc</name></name> <operator>=</operator> <name>RCVBUF_INIT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name> <operator>=</operator> <operator>(</operator><name>node</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>link</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>link</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>freeClusterLink</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>==</operator> <name>link</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name> <operator>==</operator> <name>link</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setClusterNodeToInboundClusterLink</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Replacing inbound link fd %d from node %s with fd %d"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name> <operator>=</operator> <name>link</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clusterConnAcceptHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Error accepting cluster node connection: %s"</literal></expr></argument>, <argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>link</name> <operator>=</operator> <call><name>createClusterLink</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>clusterReadHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CLUSTER_ACCEPTS_PER_CALL</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>clusterAcceptHandler</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cport</name></decl>, <decl><type ref="prev"/><name>cfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><name>MAX_CLUSTER_ACCEPTS_PER_CALL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>max</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cfd</name> <operator>=</operator> <call><name>anetTcpAccept</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cip</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cfd</name> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Error accepting cluster node: %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>tls_cluster</name></name></expr> ?</condition><then>
<expr><call><name>connCreateAcceptedTLS</name><argument_list>(<argument><expr><name>cfd</name></expr></argument>, <argument><expr><name>TLS_CLIENT_AUTH_YES</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>connCreateAcceptedSocket</name><argument_list>(<argument><expr><name>cfd</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_STATE_ACCEPTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Error creating an accepting connection for cluster node: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>connEnableTcpNoDelay</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connKeepAlive</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,<argument><expr><literal type="string">"Accepting cluster node connection from %s:%d"</literal></expr></argument>, <argument><expr><name>cip</name></expr></argument>, <argument><expr><name>cport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>connAccept</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>clusterConnAcceptHandler</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONN_STATE_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Error accepting cluster node connection: %s"</literal></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><name>unsigned</name> <name>long</name></type> <name>getClusterConnectionsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>



<return>return <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr> ?</condition><then>
<expr><operator>(</operator><operator>(</operator><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>











<function><type><name>unsigned</name> <name>int</name></type> <name>keyHashSlot</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>keylen</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>keylen</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>crc16</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3FFF</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>s</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>keylen</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><name>e</name></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>keylen</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>s</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>crc16</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3FFF</literal></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><call><name>crc16</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name><operator>-</operator><name>s</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3FFF</literal></expr>;</return>
</block_content>}</block></function>












<function><type><name>clusterNode</name> <modifier>*</modifier></type><name>createClusterNode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nodename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>slots_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>numslots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>numslaves</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>slaves</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>pong_received</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>data_received</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>fail_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pport</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>fail_reports</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>voted_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>orphaned_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>repl_offset_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>repl_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>fail_reports</name></name></expr></argument>,<argument><expr><name>zfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>clusterNodeAddFailureReport</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>failing</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>failing</name><operator>-&gt;</operator><name>fail_reports</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNodeFailReport</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>sender</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fr</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>sender</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fr</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>clusterNodeCleanupFailureReports</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>fail_reports</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNodeFailReport</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>maxtime</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>*</operator>
<name>CLUSTER_FAIL_REPORT_VALIDITY_MULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>fr</name><operator>-&gt;</operator><name>time</name></name> <operator>&gt;</operator> <name>maxtime</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>clusterNodeDelFailureReport</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>fail_reports</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNodeFailReport</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>sender</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ln</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterNodeCleanupFailureReports</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>clusterNodeFailureReportsCount</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>clusterNodeCleanupFailureReports</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>fail_reports</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clusterNodeRemoveSlave</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>slave</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>remaining_slaves</name> <init>= <expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name> <operator>-</operator> <name>j</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name><operator>+</operator><name>j</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name><operator>+</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>remaining_slaves</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_MIGRATE_TO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clusterNodeAddSlave</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>slave</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name></expr>]</index></name> <operator>=</operator> <name>slave</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_MIGRATE_TO</name></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clusterCountNonFailingSlaves</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>okslaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nodeFailed</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>okslaves</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>okslaves</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>freeClusterNode</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>nodename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>slaveof</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>n</name><operator>-&gt;</operator><name>slaveof</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterNodeRemoveSlave</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>,<argument><expr><name>nodename</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>inbound_link</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>inbound_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>fail_reports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clusterAddNode</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>,
<argument><expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>clusterDelNode</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>delnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>delnode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>delnode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>delnode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterDelSlot</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>delnode</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterNodeDelFailureReport</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>delnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>freeClusterNode</name><argument_list>(<argument><expr><name>delnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>clusterNode</name> <modifier>*</modifier></type><name>clusterLookupNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>de</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>list</name> <modifier>*</modifier></type><name>clusterGetNodesServingMySlots</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>nodes_for_slot</name> <init>= <expr><call><name>listCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>my_primary</name> <init>= <expr><ternary><condition><expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>node</name></expr> </then><else>: <expr><name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>nodes_for_slot</name></expr></argument>, <argument><expr><name>my_primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>my_primary</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>nodes_for_slot</name></expr></argument>, <argument><expr><name><name>my_primary</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>nodes_for_slot</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>clusterRenameNode</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Renaming node %.40s into %.40s"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>uint64_t</name></type> <name>clusterGetMaxEpoch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>configEpoch</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>max</name></expr>;</return>
</block_content>}</block></function>






























<function><type><name>int</name></type> <name>clusterBumpConfigEpochWithoutConsensus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxEpoch</name> <init>= <expr><call><name>clusterGetMaxEpoch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>!=</operator> <name>maxEpoch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"New configEpoch set to %llu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>















































<function><type><name>void</name></type> <name>clusterHandleConfigEpochCollision</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sender</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>!=</operator> <name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>||</operator>
<operator>!</operator><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSaveConfigOrDie</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"WARNING: configEpoch collision with node %.40s."</literal>
<literal type="string">" configEpoch set to %llu"</literal></expr></argument>,
<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_BLACKLIST_TTL</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>








<function><type><name>void</name></type> <name>clusterBlacklistCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes_black_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>expire</name> <init>= <expr><call><name>dictGetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes_black_list</name></name></expr></argument>,<argument><expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clusterBlacklistAddNode</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>id</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clusterBlacklistCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes_black_list</name></name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes_black_list</name></name></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>,<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>+</operator><name>CLUSTER_BLACKLIST_TTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>clusterBlacklistExists</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>id</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>nodeid</name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clusterBlacklistCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes_black_list</name></name></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


























<function><type><name>void</name></type> <name>markNodeAsFailingIfNeeded</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>failures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed_quorum</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nodeTimedOut</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nodeFailed</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>failures</name> <operator>=</operator> <call><name>clusterNodeFailureReportsCount</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>failures</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>failures</name> <operator>&lt;</operator> <name>needed_quorum</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Marking node %.40s as failing (quorum reached)."</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_PFAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_FAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>fail_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>clusterSendFail</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clearNodeFailureIfNeeded</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>nodeFailed</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>numslots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Clear FAIL state for node %.40s: %s is reachable again."</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"replica"</literal></expr> </then><else>: <expr><literal type="string">"master without slots"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_FAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>numslots</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>now</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>fail_time</name></name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>*</operator> <name>CLUSTER_FAIL_UNDO_TIME_MULT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Clear FAIL state for node %.40s: is reachable again and nobody is serving its slots after some time."</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_FAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>clusterHandshakeInProgress</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cport</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nodeInHandshake</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>port</name> <operator>&amp;&amp;</operator>
<name><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>==</operator> <name>cport</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>clusterStartHandshake</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cport</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>norm_ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;</operator> <literal type="number">65535</literal> <operator>||</operator> <name>cport</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>cport</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>norm_ip</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr></argument>,
<argument><expr><name>norm_ip</name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name><operator>)</operator></expr></argument>,
<argument><expr><name>norm_ip</name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clusterHandshakeInProgress</name><argument_list>(<argument><expr><name>norm_ip</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>cport</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>createClusterNode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>CLUSTER_NODE_HANDSHAKE</name><operator>|</operator><name>CLUSTER_NODE_MEET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name>norm_ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <name>cport</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>clusterProcessGossipSection</name><parameter_list>(<parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>count</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsgDataGossip</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>clusterMsgDataGossip</name><operator>*</operator><operator>)</operator> <name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ping</name><operator>.</operator><name>gossip</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender</name> <init>= <expr><ternary><condition><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr> ?</condition><then> <expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr> </then><else>: <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>ci</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>verbosity</name></name> <operator>==</operator> <name>LL_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>representClusterNodeFlags</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"GOSSIP %.40s %s:%d@%d %s"</literal></expr></argument>,
<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>,
<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>&amp;&amp;</operator> <call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>node</name> <operator>!=</operator> <name>myself</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_FAIL</name><operator>|</operator><name>CLUSTER_NODE_PFAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clusterNodeAddFailureReport</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Node %.40s reported node %.40s as not reachable."</literal></expr></argument>,
<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>markNodeAsFailingIfNeeded</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clusterNodeDelFailureReport</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Node %.40s reported node %.40s is back online."</literal></expr></argument>,
<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_FAIL</name><operator>|</operator><name>CLUSTER_NODE_PFAIL</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>clusterNodeFailureReportsCount</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>pongtime</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>pong_received</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pongtime</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>pongtime</name> <operator>&lt;=</operator> <operator>(</operator><name><name>server</name><operator>.</operator><name>mstime</name></name><operator>+</operator><literal type="number">500</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name>pongtime</name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>pong_received</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pong_received</name></name> <operator>=</operator> <name>pongtime</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_FAIL</name><operator>|</operator><name>CLUSTER_NODE_PFAIL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CLUSTER_NODE_NOADDR</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_FAIL</name><operator>|</operator><name>CLUSTER_NODE_PFAIL</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>!=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pport</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>pport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_NOADDR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CLUSTER_NODE_NOADDR</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>clusterBlacklistExists</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>createClusterNode</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pport</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>pport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>nodeIp2String</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>announced_ip</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>announced_ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>announced_ip</name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>NET_IP_STR_LEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>connPeerToString</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NET_IP_STR_LEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>nodeUpdateAddressIfNeeded</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>,
<parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pport</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>pport</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cport</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>link</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nodeIp2String</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>port</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>==</operator> <name>cport</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>pport</name></name> <operator>==</operator> <name>pport</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pport</name></name> <operator>=</operator> <name>pport</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <name>cport</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_NOADDR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Address updated for node %.40s, now %s:%d"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>replicationSetMaster</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clusterSetNodeAsMaster</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>slaveof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterNodeRemoveSlave</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>myself</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_MIGRATE_TO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_SLAVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_MASTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>clusterUpdateSlotsConfigWith</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>senderConfigEpoch</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>slots</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>curmaster</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newmaster</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>dirty_slots</name><index>[<expr><name>CLUSTER_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty_slots_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>sender_slots</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>migrated_our_slots</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>curmaster</name> <operator>=</operator> <ternary><condition><expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>myself</name></expr> </then><else>: <expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>==</operator> <name>myself</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Discarding UPDATE message about myself."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bitmapTestBit</name><argument_list>(<argument><expr><name>slots</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sender_slots</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>sender</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>configEpoch</name> <operator>&lt;</operator> <name>senderConfigEpoch</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>myself</name> <operator>&amp;&amp;</operator>
<call><name>countKeysInSlot</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>sender</name> <operator>!=</operator> <name>myself</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dirty_slots</name><index>[<expr><name>dirty_slots_count</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirty_slots_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>curmaster</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newmaster</name> <operator>=</operator> <name>sender</name></expr>;</expr_stmt>
<expr_stmt><expr><name>migrated_our_slots</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clusterDelSlot</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddSlot</name><argument_list>(<argument><expr><name>sender</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator>
<name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>&amp;</operator> <name>CLUSTER_MODULE_FLAG_NO_REDIRECTION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>newmaster</name> <operator>&amp;&amp;</operator> <name><name>curmaster</name><operator>-&gt;</operator><name>numslots</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_allow_replica_migration</name></name> <operator>||</operator>
<name>sender_slots</name> <operator>==</operator> <name>migrated_our_slots</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Configuration change detected. Reconfiguring myself "</literal>
<literal type="string">"as a replica of %.40s"</literal></expr></argument>, <argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSetMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator>
<name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dirty_slots_count</name></expr>)</condition> <block>{<block_content>







<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dirty_slots_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delKeysInSlot</name><argument_list>(<argument><expr><name><name>dirty_slots</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>getPingExtLength</name><parameter_list>(<parameter><decl><type><name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>getInitialPingExt</name><parameter_list>(<parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>initial</name> <init>= <expr><operator>(</operator><name>clusterMsgPingExt</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ping</name><operator>.</operator><name>gossip</name><index>[<expr><name>count</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>initial</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>getNextPingExt</name><parameter_list>(<parameter><decl><type><name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><operator>(</operator><name>clusterMsgPingExt</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ext</name><operator>)</operator> <operator>+</operator> <call><name>getPingExtLength</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>getHostnamePingExtSize</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>myself</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>totlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgPingExt</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>EIGHT_BYTE_ALIGN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>totlen</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>writeHostnamePingExt</name><parameter_list>(<parameter><decl><type><name>clusterMsgPingExt</name> <modifier>*</modifier><modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>myself</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>clusterMsgPingExtHostname</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>cursor</name><operator>)</operator><operator>-&gt;</operator><name>ext</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>hostname</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hostname_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>myself</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>hostname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>extension_size</name> <init>= <expr><call><name>getHostnamePingExtSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>cursor</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CLUSTERMSG_EXT_TYPE_HOSTNAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>cursor</name><operator>)</operator><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>extension_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <operator>(</operator><name>clusterMsgPingExt</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>hostname</name></name> <operator>+</operator> <call><name>EIGHT_BYTE_ALIGN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>extension_size</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>clusterProcessPingExtensions</name><parameter_list>(<parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender</name> <init>= <expr><ternary><condition><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr> ?</condition><then> <expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr> </then><else>: <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ext_hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>extensions</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>getInitialPingExt</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>extensions</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_EXT_TYPE_HOSTNAME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsgPingExtHostname</name> <modifier>*</modifier></type><name>hostname_ext</name> <init>= <expr><operator>(</operator><name>clusterMsgPingExtHostname</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>ext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>hostname</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ext_hostname</name> <operator>=</operator> <name><name>hostname_ext</name><operator>-&gt;</operator><name>hostname</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Received unknown extension type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>getNextPingExt</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><call><name>updateAnnouncedHostname</name><argument_list>(<argument><expr><name>sender</name></expr></argument>, <argument><expr><name>ext_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>clusterNode</name> <modifier>*</modifier></type><name>getNodeFromLinkAndMsg</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>nodeInHandshake</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>sender</name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sender</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setClusterNodeToInboundClusterLink</name><argument_list>(<argument><expr><name>sender</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>sender</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>clusterProcessPacket</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>totlen</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>CLUSTERMSG_TYPE_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_received</name><index>[<expr><name>type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"--- Processing packet of type %s, %lu bytes"</literal></expr></argument>,
<argument><expr><call><name>clusterGetMessageTypeString</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>totlen</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>totlen</name> <operator>&gt;</operator> <name><name>link</name><operator>-&gt;</operator><name>rcvbuf_len</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CLUSTER_PROTO_VER</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>cluster_drop_packet_filter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Dropping packet that matches debug drop filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>extensions</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>senderCurrentEpoch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>senderConfigEpoch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>explen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PING</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PONG</name> <operator>||</operator>
<name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MEET</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>count</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>explen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>explen</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataGossip</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>count</name><operator>)</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>mflags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLUSTERMSG_FLAG0_EXT_DATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>getInitialPingExt</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>extensions</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>extlen</name> <init>= <expr><call><name>getPingExtLength</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>extlen</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Received a %s packet without proper padding (%d bytes)"</literal></expr></argument>,
<argument><expr><call><name>clusterGetMessageTypeString</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>extlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>totlen</name> <operator>-</operator> <name>explen</name><operator>)</operator> <operator>&lt;</operator> <name>extlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Received invalid %s packet with extension data that exceeds "</literal>
<literal type="string">"total packet length (%lld)"</literal></expr></argument>, <argument><expr><call><name>clusterGetMessageTypeString</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>explen</name> <operator>+=</operator> <name>extlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>getNextPingExt</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>explen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>explen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataFail</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PUBLISH</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PUBLISHSHARD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>explen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>explen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataPublish</name></expr></argument>)</argument_list></sizeof> <operator>-</operator>
<literal type="number">8</literal> <operator>+</operator>
<call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>channel_len</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>message_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST</name> <operator>||</operator>
<name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK</name> <operator>||</operator>
<name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MFSTART</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>explen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_UPDATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>explen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>explen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataUpdate</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MODULE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>explen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>explen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgModule</name></expr></argument>)</argument_list></sizeof> <operator>-</operator>
<literal type="number">3</literal> <operator>+</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>explen</name> <operator>=</operator> <name>totlen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totlen</name> <operator>!=</operator> <name>explen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Received invalid %s packet of length %lld but expected length %lld"</literal></expr></argument>,
<argument><expr><call><name>clusterGetMessageTypeString</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>totlen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>explen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sender</name> <operator>=</operator> <call><name>getNodeFromLinkAndMsg</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>sender</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>data_received</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>nodeInHandshake</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>senderCurrentEpoch</name> <operator>=</operator> <call><name>ntohu64</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>senderConfigEpoch</name> <operator>=</operator> <call><name>ntohu64</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>senderCurrentEpoch</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name> <operator>=</operator> <name>senderCurrentEpoch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>senderConfigEpoch</name> <operator>&gt;</operator> <name><name>sender</name><operator>-&gt;</operator><name>configEpoch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <name>senderConfigEpoch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>repl_offset</name></name> <operator>=</operator> <call><name>ntohu64</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>repl_offset_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>&amp;&amp;</operator>
<call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>sender</name> <operator>&amp;&amp;</operator>
<name><name>hdr</name><operator>-&gt;</operator><name>mflags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLUSTERMSG_FLAG0_PAUSED</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_master_offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_master_offset</name></name> <operator>=</operator> <name><name>sender</name><operator>-&gt;</operator><name>repl_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_HANDLE_MANUALFAILOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Received replication offset for paused "</literal>
<literal type="string">"master manual failover: %lld"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_master_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PING</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MEET</name></expr>)</condition> <block>{<block_content>











<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MEET</name> <operator>||</operator> <name><name>myself</name><operator>-&gt;</operator><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connSockName</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"IP address for this node updated to %s"</literal></expr></argument>,
<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sender</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MEET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>createClusterNode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>CLUSTER_NODE_HANDSHAKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nodeIp2String</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pport</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>pport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sender</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MEET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterProcessGossipSection</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>clusterSendPing</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name>CLUSTERMSG_TYPE_PONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PING</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PONG</name> <operator>||</operator>
<name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MEET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"%s packet received: %s"</literal></expr></argument>,
<argument><expr><call><name>clusterGetMessageTypeString</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr> ?</condition><then> <expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nodeInHandshake</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>sender</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Handshake: we already know node %.40s, "</literal>
<literal type="string">"updating the address if needed."</literal></expr></argument>, <argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nodeUpdateAddressIfNeeded</name><argument_list>(<argument><expr><name>sender</name></expr></argument>,<argument><expr><name>link</name></expr></argument>,<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>clusterDelNode</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>clusterRenameNode</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Handshake with node %.40s completed."</literal></expr></argument>,
<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_HANDSHAKE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name><operator>&amp;</operator><operator>(</operator><name>CLUSTER_NODE_MASTER</name><operator>|</operator><name>CLUSTER_NODE_SLAVE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>,
<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"PONG contains mismatching sender ID. About node %.40s added %d ms ago, having flags %d"</literal></expr></argument>,
<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>now</name><operator>-</operator><operator>(</operator><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ctime</name></name><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_NOADDR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>pport</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>sender</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nofailover</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>CLUSTER_NODE_NOFAILOVER</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_NOFAILOVER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>nofailover</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PING</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>nodeInHandshake</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>nodeUpdateAddressIfNeeded</name><argument_list>(<argument><expr><name>sender</name></expr></argument>,<argument><expr><name>link</name></expr></argument>,<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PONG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>pong_received</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><call><name>nodeTimedOut</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_PFAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nodeFailed</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clearNodeFailureIfNeeded</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sender</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>,<argument><expr><name>CLUSTER_NODE_NULL_NAME</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>clusterSetNodeAsMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clusterDelNodeSlots</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLUSTER_NODE_MASTER</name><operator>|</operator>
<name>CLUSTER_NODE_MIGRATE_TO</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_SLAVE</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>master</name> <operator>&amp;&amp;</operator> <name><name>sender</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>!=</operator> <name>master</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sender</name><operator>-&gt;</operator><name>slaveof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterNodeRemoveSlave</name><argument_list>(<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>,<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterNodeAddSlave</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sender</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>=</operator> <name>master</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>










<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>sender_master</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty_slots</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sender</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sender_master</name> <operator>=</operator> <ternary><condition><expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>sender</name></expr> </then><else>: <expr><name><name>sender</name><operator>-&gt;</operator><name>slaveof</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sender_master</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dirty_slots</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>sender_master</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myslots</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myslots</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>&amp;&amp;</operator> <call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dirty_slots</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterUpdateSlotsConfigWith</name><argument_list>(<argument><expr><name>sender</name></expr></argument>,<argument><expr><name>senderConfigEpoch</name></expr></argument>,<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



















<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>&amp;&amp;</operator> <name>dirty_slots</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bitmapTestBit</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myslots</name></name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>sender</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>configEpoch</name> <operator>&gt;</operator>
<name>senderConfigEpoch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Node %.40s has old slots configuration, sending "</literal>
<literal type="string">"an UPDATE message about %.40s"</literal></expr></argument>,
<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSendUpdate</name><argument_list>(<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>sender</name> <operator>&amp;&amp;</operator>
<call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>senderConfigEpoch</name> <operator>==</operator> <name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clusterHandleConfigEpochCollision</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sender</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterProcessGossipSection</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterProcessPingExtensions</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_FAIL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>failing</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sender</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>failing</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>about</name><operator>.</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>failing</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>failing</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_FAIL</name><operator>|</operator><name>CLUSTER_NODE_MYSELF</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"FAIL message received from %.40s about %.40s"</literal></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>about</name><operator>.</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>failing</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_FAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>failing</name><operator>-&gt;</operator><name>fail_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>failing</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_PFAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Ignoring FAIL message from unknown node %.40s about %.40s"</literal></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>about</name><operator>.</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PUBLISH</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PUBLISHSHARD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sender</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>channel_len</name></decl>, <decl><type ref="prev"/><name>message_len</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PUBLISH</name>
<operator>&amp;&amp;</operator> <call><name>serverPubsubSubscriptionCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PUBLISHSHARD</name>
<operator>&amp;&amp;</operator> <call><name>serverPubsubShardSubscriptionCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>channel_len</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>channel_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>message_len</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>message_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>bulk_data</name></name></expr></argument>,<argument><expr><name>channel_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>bulk_data</name></name><operator>+</operator><name>channel_len</name></expr></argument>,
<argument><expr><name>message_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PUBLISHSHARD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pubsubPublishMessageShard</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pubsubPublishMessage</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sender</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterSendFailoverAuthIfNeeded</name><argument_list>(<argument><expr><name>sender</name></expr></argument>,<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sender</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>sender</name><operator>-&gt;</operator><name>numslots</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>senderCurrentEpoch</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_epoch</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_count</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_HANDLE_FAILOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MFSTART</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sender</name> <operator>||</operator> <name><name>sender</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>!=</operator> <name>myself</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>resetManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <name>CLUSTER_MF_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_slave</name></name> <operator>=</operator> <name>sender</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pauseClients</name><argument_list>(<argument><expr><name>PAUSE_DURING_FAILOVER</name></expr></argument>,
<argument><expr><name>now</name> <operator>+</operator> <operator>(</operator><name>CLUSTER_MF_TIMEOUT</name> <operator>*</operator> <name>CLUSTER_MF_PAUSE_MULT</name><operator>)</operator></expr></argument>,
<argument><expr><name>CLIENT_PAUSE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Manual failover requested by replica %.40s."</literal></expr></argument>,
<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>clusterSendPing</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>CLUSTERMSG_TYPE_PING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_UPDATE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reportedConfigEpoch</name> <init>=
<expr><call><name>ntohu64</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>update</name><operator>.</operator><name>nodecfg</name><operator>.</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sender</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>update</name><operator>.</operator><name>nodecfg</name><operator>.</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>&gt;=</operator> <name>reportedConfigEpoch</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterSetNodeAsMaster</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <name>reportedConfigEpoch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>clusterUpdateSlotsConfigWith</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>reportedConfigEpoch</name></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>update</name><operator>.</operator><name>nodecfg</name><operator>.</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_MODULE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sender</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>module_id</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>module_id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>bulk_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleCallClusterReceivers</name><argument_list>(<argument><expr><name><name>sender</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>module_id</name></expr></argument>,<argument><expr><name>type</name></expr></argument>,<argument><expr><name>payload</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Received unknown packet type: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>handleLinkIOError</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clusterWriteHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><call><name>connGetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwritten</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <call><name>connWrite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"I/O error writing to node link: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>nwritten</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"short write"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handleLinkIOError</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>,<argument><expr><name>nwritten</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>connSetWriteHandler</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clusterLinkConnectHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><call><name>connGetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Connection with Node %.40s at %s:%d failed: %s"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>,
<argument><expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>connSetReadHandler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>clusterReadHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<decl_stmt><decl><type><name>mstime_t</name></type> <name>old_ping_sent</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clusterSendPing</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_MEET</name></expr> ?</condition><then>
<expr><name>CLUSTERMSG_TYPE_MEET</name></expr> </then><else>: <expr><name>CLUSTERMSG_TYPE_PING</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_ping_sent</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>=</operator> <name>old_ping_sent</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_NODE_MEET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Connecting with Node %.40s at %s:%d"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clusterReadHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsg</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><call><name>connGetPrivateData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>readlen</name></decl>, <decl><type ref="prev"/><name>rcvbuflen</name></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcvbuflen</name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>rcvbuf_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rcvbuflen</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>readlen</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name>rcvbuflen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rcvbuflen</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>,<argument><expr><literal type="string">"RCmb"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>CLUSTERMSG_MIN_LEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Bad message length or signature received "</literal>
<literal type="string">"from Cluster bus."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handleLinkIOError</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>readlen</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>rcvbuflen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>readlen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>readlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>connRead</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>connGetState</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONN_STATE_CONNECTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"I/O error reading from node link: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>nread</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"connection closed"</literal></expr> </then><else>: <expr><call><name>connGetLastError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handleLinkIOError</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>unused</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_alloc</name></name> <operator>-</operator> <name><name>link</name><operator>-&gt;</operator><name>rcvbuf_len</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nread</name> <operator>&gt;</operator> <name>unused</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>required</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_len</name></name> <operator>+</operator> <name>nread</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_alloc</name></name> <operator>=</operator> <ternary><condition><expr><name>required</name> <operator>&lt;</operator> <name>RCVBUF_MAX_PREALLOC</name></expr> ?</condition><then> <expr><name>required</name> <operator>*</operator> <literal type="number">2</literal></expr></then><else>: <expr><name>required</name> <operator>+</operator> <name>RCVBUF_MAX_PREALLOC</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name> <operator>+</operator> <name><name>link</name><operator>-&gt;</operator><name>rcvbuf_len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_len</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rcvbuflen</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>rcvbuflen</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>rcvbuflen</name> <operator>==</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clusterProcessPacket</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_alloc</name></name> <operator>&gt;</operator> <name>RCVBUF_INIT_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_alloc</name></name> <operator>=</operator> <name>RCVBUF_INIT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>rcvbuf_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>clusterSendMessage</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>msglen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>msglen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>connSetWriteHandlerWithBarrier</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>clusterWriteHandler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>msg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>CLUSTERMSG_TYPE_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_sent</name><index>[<expr><name>type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>clusterBroadcastMessage</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_MYSELF</name><operator>|</operator><name>CLUSTER_NODE_HANDSHAKE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterSendMessage</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>clusterBuildMessageHdr</name><parameter_list>(<parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>totlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>





<expr_stmt><expr><name>master</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr> </then><else>: <expr><name>myself</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>CLUSTER_PROTO_VER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sender</name></name></expr></argument>,<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myip</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myip</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr></argument>,<argument><expr><name>NET_IP_STR_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>myip</name><index>[<expr><name>NET_IP_STR_LEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>announced_port</name></decl>, <decl><type ref="prev"/><name>announced_pport</name></decl>, <decl><type ref="prev"/><name>announced_cport</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>deriveAnnouncedPorts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>announced_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>announced_pport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>announced_cport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myslots</name></name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>myslots</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>,<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>announced_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>pport</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>announced_pport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>announced_cport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>currentEpoch</name></name> <operator>=</operator> <call><name>htonu64</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <call><name>htonu64</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>replicationGetSlaveOffset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>htonu64</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>mflags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>CLUSTERMSG_FLAG0_PAUSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>totlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataFail</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_UPDATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>totlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataUpdate</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>




<function><type><name>int</name></type> <name>clusterNodeIsInGossipSection</name><parameter_list>(<parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ping</name><operator>.</operator><name>gossip</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nodename</name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>j</name> <operator>!=</operator> <name>count</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>clusterSetGossipEntry</name><parameter_list>(<parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsgDataGossip</name> <modifier>*</modifier></type><name>gossip</name></decl>;</decl_stmt>
<expr_stmt><expr><name>gossip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ping</name><operator>.</operator><name>gossip</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>gossip</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gossip</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ping_sent</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gossip</name><operator>-&gt;</operator><name>pong_received</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>pong_received</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>gossip</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gossip</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gossip</name><operator>-&gt;</operator><name>cport</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gossip</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gossip</name><operator>-&gt;</operator><name>pport</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>pport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gossip</name><operator>-&gt;</operator><name>notused1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>clusterSendPing</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gossipcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wanted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>estlen</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>freshnodes</name> <init>= <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>



























<expr_stmt><expr><name>wanted</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wanted</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wanted</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wanted</name> <operator>&gt;</operator> <name>freshnodes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wanted</name> <operator>=</operator> <name>freshnodes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>pfail_wanted</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_pfail_nodes</name></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>estlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>estlen</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataGossip</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>wanted</name> <operator>+</operator> <name>pfail_wanted</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>estlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgPingExt</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>getHostnamePingExtSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>estlen</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>estlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><name>estlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>CLUSTERMSG_TYPE_PING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterBuildMessageHdr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>maxiterations</name> <init>= <expr><name>wanted</name><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>freshnodes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>gossipcount</name> <operator>&lt;</operator> <name>wanted</name> <operator>&amp;&amp;</operator> <name>maxiterations</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictGetRandomKey</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>myself</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_PFAIL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_HANDSHAKE</name><operator>|</operator><name>CLUSTER_NODE_NOADDR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>link</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>numslots</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>freshnodes</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>clusterNodeIsInGossipSection</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>gossipcount</name></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>clusterSetGossipEntry</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>gossipcount</name></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>freshnodes</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gossipcount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>pfail_wanted</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pfail_wanted</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_HANDSHAKE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_NOADDR</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_PFAIL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterSetGossipEntry</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>gossipcount</name></expr></argument>,<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>freshnodes</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gossipcount</name><operator>++</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>pfail_wanted</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>totlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extensions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>clusterMsgPingExt</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>getInitialPingExt</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>gossipcount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>mflags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>CLUSTERMSG_FLAG0_EXT_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <call><name>writeHostnamePingExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extensions</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataGossip</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>gossipcount</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>gossipcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>extensions</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSendMessage</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_BROADCAST_ALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_BROADCAST_LOCAL_SLAVES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>clusterBroadcastPong</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>myself</name> <operator>||</operator> <call><name>nodeInHandshake</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>CLUSTER_BROADCAST_LOCAL_SLAVES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>local_slave</name> <init>=
<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>myself</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_slave</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clusterSendPing</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name>CLUSTERMSG_TYPE_PONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<macro><name>REDIS_NO_SANITIZE</name><argument_list>(<argument><literal type="string">"bounds"</literal></argument>)</argument_list></macro>
<function><type><name>void</name></type> <name>clusterSendPublish</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>totlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>channel_len</name></decl>, <decl><type ref="prev"/><name>message_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>channel_len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>message_len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>message</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clusterBuildMessageHdr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgDataPublish</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">8</literal> <operator>+</operator> <name>channel_len</name> <operator>+</operator> <name>message_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>channel_len</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>channel_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>message_len</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>message_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>totlen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>payload</name></expr></argument>,<argument><expr><name>hdr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>payload</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>bulk_data</name></name></expr></argument>,<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>publish</name><operator>.</operator><name>msg</name><operator>.</operator><name>bulk_data</name></name><operator>+</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>message</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>message</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>link</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterSendMessage</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name>payload</name></expr></argument>,<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterBroadcastMessage</name><argument_list>(<argument><expr><name>payload</name></expr></argument>,<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>payload</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>clusterSendFail</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsg</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clusterBuildMessageHdr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>CLUSTERMSG_TYPE_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>about</name><operator>.</operator><name>nodename</name></name></expr></argument>,<argument><expr><name>nodename</name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterBroadcastMessage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clusterSendUpdate</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsg</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>link</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterBuildMessageHdr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>CLUSTERMSG_TYPE_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>update</name><operator>.</operator><name>nodecfg</name><operator>.</operator><name>nodename</name></name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>update</name><operator>.</operator><name>nodecfg</name><operator>.</operator><name>configEpoch</name></name> <operator>=</operator> <call><name>htonu64</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>update</name><operator>.</operator><name>nodecfg</name><operator>.</operator><name>slots</name></name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSendMessage</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clusterSendModule</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>module_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>heapbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>totlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clusterBuildMessageHdr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>CLUSTERMSG_TYPE_MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsgModule</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>module_id</name></name> <operator>=</operator> <name>module_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>totlen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>heapbuf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>heapbuf</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>heapbuf</name></expr></argument>,<argument><expr><name>hdr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>heapbuf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>module</name><operator>.</operator><name>msg</name><operator>.</operator><name>bulk_data</name></name></expr></argument>,<argument><expr><name>payload</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>link</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterSendMessage</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name>heapbuf</name></expr></argument>,<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterBroadcastMessage</name><argument_list>(<argument><expr><name>heapbuf</name></expr></argument>,<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>heapbuf</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>heapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>clusterSendModuleMessageToTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>module_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clusterSendModule</name><argument_list>(<argument><expr><ternary><condition><expr><name>target</name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><name>module_id</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>clusterPropagatePublish</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>clusterSendPublish</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>CLUSTERMSG_TYPE_PUBLISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>clusterPropagatePublishShard</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>nodes_for_slot</name> <init>= <expr><call><name>clusterGetNodesServingMySlots</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>nodes_for_slot</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>nodes_for_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <name>myself</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterSendPublish</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>CLUSTERMSG_TYPE_PUBLISHSHARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>nodes_for_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>clusterRequestFailoverAuth</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsg</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>totlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clusterBuildMessageHdr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>mflags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>CLUSTERMSG_FLAG0_FORCEACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>totlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterBroadcastMessage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clusterSendFailoverAuth</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsg</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>totlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterBuildMessageHdr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSendMessage</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clusterSendMFStart</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterMsg</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>clusterMsg</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>totlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterBuildMessageHdr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>,<argument><expr><name>CLUSTERMSG_TYPE_MFSTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>clusterMsg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr>union <name>clusterMsgData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>totlen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSendMessage</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clusterSendFailoverAuthIfNeeded</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>clusterMsg</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>requestCurrentEpoch</name> <init>= <expr><call><name>ntohu64</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>requestConfigEpoch</name> <init>= <expr><call><name>ntohu64</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>claimed_slots</name> <init>= <expr><name><name>request</name><operator>-&gt;</operator><name>myslots</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_ack</name> <init>= <expr><name><name>request</name><operator>-&gt;</operator><name>mflags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>CLUSTERMSG_FLAG0_FORCEACK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>myself</name><operator>-&gt;</operator><name>numslots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>requestCurrentEpoch</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failover auth denied to %.40s: reqEpoch (%llu) &lt; curEpoch(%llu)"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>requestCurrentEpoch</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>lastVoteEpoch</name></name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failover auth denied to %.40s: already voted for epoch %llu"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>master</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>nodeFailed</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_ack</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failover auth denied to %.40s: it is a master node"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>master</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failover auth denied to %.40s: I don't know its master"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>nodeFailed</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failover auth denied to %.40s: its master is up"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>voted_time</name></name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failover auth denied to %.40s: "</literal>
<literal type="string">"can't vote about this master before %lld milliseconds"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>-</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>voted_time</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bitmapTestBit</name><argument_list>(<argument><expr><name>claimed_slots</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>configEpoch</name> <operator>&lt;=</operator> <name>requestConfigEpoch</name></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failover auth denied to %.40s: "</literal>
<literal type="string">"slot %d epoch (%llu) &gt; reqEpoch (%llu)"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>configEpoch</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>requestConfigEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></for>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>lastVoteEpoch</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>voted_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator><name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSendFailoverAuth</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failover auth granted to %.40s for epoch %llu"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>clusterGetSlaveRank</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>myoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>rank</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>master</name> <operator>=</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>master</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>myoffset</name> <operator>=</operator> <call><name>replicationGetSlaveOffset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>master</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>myself</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>nodeCantFailover</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>master</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>repl_offset</name> <operator>&gt;</operator> <name>myoffset</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rank</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>rank</name></expr>;</return>
</block_content>}</block></function>























<function><type><name>void</name></type> <name>clusterLogCantFailover</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reason</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>lastlog_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>nolog_fail_time</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>+</operator> <literal type="number">5000</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>cant_failover_reason</name></name> <operator>&amp;&amp;</operator>
<call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name>lastlog_time</name> <operator>&lt;</operator> <name>CLUSTER_CANT_FAILOVER_RELOG_PERIOD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>cant_failover_reason</name></name> <operator>=</operator> <name>reason</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>&amp;&amp;</operator>
<call><name>nodeFailed</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>fail_time</name></name><operator>)</operator> <operator>&lt;</operator> <name>nolog_fail_time</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>reason</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLUSTER_CANT_FAILOVER_DATA_AGE</name></expr>:</case>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Disconnected from master for longer than allowed. "</literal>
<literal type="string">"Please check the 'cluster-replica-validity-factor' configuration "</literal>
<literal type="string">"option."</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLUSTER_CANT_FAILOVER_WAITING_DELAY</name></expr>:</case>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Waiting the delay before I can start a new failover."</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLUSTER_CANT_FAILOVER_EXPIRED</name></expr>:</case>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Failover attempt expired."</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLUSTER_CANT_FAILOVER_WAITING_VOTES</name></expr>:</case>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Waiting for votes, but majority still not reached."</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Unknown reason code."</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>lastlog_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Currently unable to failover: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>clusterFailoverReplaceYourMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>oldmaster</name> <init>= <expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>oldmaster</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>clusterSetNodeAsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationUnsetMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clusterNodeGetSlotBit</name><argument_list>(<argument><expr><name>oldmaster</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterDelSlot</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddSlot</name><argument_list>(<argument><expr><name>myself</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>clusterUpdateState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSaveConfigOrDie</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>clusterBroadcastPong</name><argument_list>(<argument><expr><name>CLUSTER_BROADCAST_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>resetManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>clusterHandleSlaveFailover</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>data_age</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>auth_age</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed_quorum</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>manual_failover</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_can_start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>auth_timeout</name></decl>, <decl><type ref="prev"/><name>auth_retry_time</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>todo_before_sleep</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_TODO_HANDLE_FAILOVER</name></expr>;</expr_stmt>








<expr_stmt><expr><name>auth_timeout</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>auth_timeout</name> <operator>&lt;</operator> <literal type="number">2000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>auth_timeout</name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>auth_retry_time</name> <operator>=</operator> <name>auth_timeout</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>nodeFailed</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>manual_failover</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>manual_failover</name><operator>)</operator> <operator>||</operator>
<name><name>myself</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>numslots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>cant_failover_reason</name></name> <operator>=</operator> <name>CLUSTER_CANT_FAILOVER_NONE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_age</name> <operator>=</operator> <operator>(</operator><name>mstime_t</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>lastinteraction</name></name><operator>)</operator>
<operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data_age</name> <operator>=</operator> <operator>(</operator><name>mstime_t</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>repl_down_since</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>data_age</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data_age</name> <operator>-=</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name> <operator>&amp;&amp;</operator>
<name>data_age</name> <operator>&gt;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>mstime_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>*</operator> <name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>manual_failover</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterLogCantFailover</name><argument_list>(<argument><expr><name>CLUSTER_CANT_FAILOVER_DATA_AGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>auth_age</name> <operator>&gt;</operator> <name>auth_retry_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>+</operator>
<literal type="number">500</literal> <operator>+</operator>
<call><name>random</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">500</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_rank</name></name> <operator>=</operator> <call><name>clusterGetSlaveRank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_time</name></name> <operator>+=</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_rank</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_rank</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_HANDLE_FAILOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Start of election delayed for %lld milliseconds "</literal>
<literal type="string">"(rank #%d, offset %lld)."</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_time</name></name> <operator>-</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_rank</name></name></expr></argument>,
<argument><expr><call><name>replicationGetSlaveOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>clusterBroadcastPong</name><argument_list>(<argument><expr><name>CLUSTER_BROADCAST_LOCAL_SLAVES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_sent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newrank</name> <init>= <expr><call><name>clusterGetSlaveRank</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newrank</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_rank</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>added_delay</name> <init>=
<expr><operator>(</operator><name>newrank</name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_rank</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_time</name></name> <operator>+=</operator> <name>added_delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_rank</name></name> <operator>=</operator> <name>newrank</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Replica rank updated to #%d, added %lld milliseconds of delay."</literal></expr></argument>,
<argument><expr><name>newrank</name></expr></argument>, <argument><expr><name>added_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_time</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterLogCantFailover</name><argument_list>(<argument><expr><name>CLUSTER_CANT_FAILOVER_WAITING_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>auth_age</name> <operator>&gt;</operator> <name>auth_timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterLogCantFailover</name><argument_list>(<argument><expr><name>CLUSTER_CANT_FAILOVER_EXPIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_epoch</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Starting a failover election for epoch %llu."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterRequestFailoverAuth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator>
<name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator>
<name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_count</name></name> <operator>&gt;=</operator> <name>needed_quorum</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failover election won: I'm the new master."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_epoch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>failover_auth_epoch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"configEpoch set to %llu after successful failover"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>clusterFailoverReplaceYourMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>clusterLogCantFailover</name><argument_list>(<argument><expr><name>CLUSTER_CANT_FAILOVER_WAITING_VOTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




























<function><type><name>void</name></type> <name>clusterHandleSlaveMigration</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_slaves</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>okslaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>mymaster</name> <init>= <expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>CLUSTER_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>mymaster</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mymaster</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nodeFailed</name><argument_list>(<argument><expr><name><name>mymaster</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>nodeTimedOut</name><argument_list>(<argument><expr><name><name>mymaster</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>okslaves</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>okslaves</name> <operator>&lt;=</operator> <name><name>server</name><operator>.</operator><name>cluster_migration_barrier</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>











<expr_stmt><expr><name>candidate</name> <operator>=</operator> <name>myself</name></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>okslaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_orphaned</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>nodeFailed</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_orphaned</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_MIGRATE_TO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_orphaned</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>okslaves</name> <operator>=</operator> <call><name>clusterCountNonFailingSlaves</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>okslaves</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_orphaned</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_orphaned</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>numslots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>target</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>orphaned_time</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>orphaned_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>orphaned_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>okslaves</name> <operator>==</operator> <name>max_slaves</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>candidate</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&amp;&amp;</operator> <name>candidate</name> <operator>==</operator> <name>myself</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>target</name><operator>-&gt;</operator><name>orphaned_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>CLUSTER_SLAVE_MIGRATION_DELAY</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>&amp;</operator> <name>CLUSTER_MODULE_FLAG_NO_FAILOVER</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Migrating to orphaned master %.40s"</literal></expr></argument>,
<argument><expr><name><name>target</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSetMaster</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



































<function><type><name>void</name></type> <name>resetManualFailover</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_slave</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>unpauseClients</name><argument_list>(<argument><expr><name>PAUSE_DURING_FAILOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_can_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_master_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>manualFailoverCheckTimeout</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>&lt;</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Manual failover timed out."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>clusterHandleManualFailover</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_can_start</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_master_offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_master_offset</name></name> <operator>==</operator> <call><name>replicationGetSlaveOffset</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_can_start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"All master replication stream processed, "</literal>
<literal type="string">"manual failover can start."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_HANDLE_FAILOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_HANDLE_MANUALFAILOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>clusterNodeCronHandleReconnect</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>handshake_timeout</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>now</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_MYSELF</name><operator>|</operator><name>CLUSTER_NODE_NOADDR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_PFAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_pfail_nodes</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>nodeInHandshake</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>now</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>ctime</name></name> <operator>&gt;</operator> <name>handshake_timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterDelNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><call><name>createClusterLink</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>tls_cluster</name></name></expr> ?</condition><then> <expr><call><name>connCreateTLS</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>connCreateSocket</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSetPrivateData</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connConnect</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>bind_source_addr</name></name></expr></argument>,
<argument><expr><name>clusterLinkConnectHandler</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unable to connect to "</literal>
<literal type="string">"Cluster Node [%s]:%d -&gt; %s"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resizeClusterLinkBuffer</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>link</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal> <operator>&gt;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name> <operator>=</operator> <call><name>sdsRemoveFreeSpace</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>clusterNodeCronResizeBuffers</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>resizeClusterLinkBuffer</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resizeClusterLinkBuffer</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeClusterLinkOnBufferLimitReached</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>link</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>cluster_link_sendbuf_limit_bytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>mem_link</name> <init>= <expr><call><name>sdsalloc</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mem_link</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster_link_sendbuf_limit_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Freeing cluster link(%s node %.40s, used memory: %llu) due to "</literal>
<literal type="string">"exceeding send buffer memory limit."</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name></expr> ?</condition><then> <expr><literal type="string">"from"</literal></expr> </then><else>: <expr><literal type="string">"to"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr> ?</condition><then> <expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>mem_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stat_cluster_links_buffer_limit_exceeded</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>clusterNodeCronFreeLinkOnBufferLimitReached</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>freeClusterLinkOnBufferLimitReached</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClusterLinkOnBufferLimitReached</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>getClusterLinkMemUsage</name><parameter_list>(<parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>link</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterLink</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>sdsalloc</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>link</name><operator>-&gt;</operator><name>rcvbuf_alloc</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>clusterNodeCronUpdateClusterLinksMemUsage</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_cluster_links_memory</name></name> <operator>+=</operator> <call><name>getClusterLinkMemUsage</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_cluster_links_memory</name></name> <operator>+=</operator> <call><name>getClusterLinkMemUsage</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clusterCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>update_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orphaned_masters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_slaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>this_slaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>min_pong</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>min_pong_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>iteration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>handshake_timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iteration</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>updateAnnouncedHostname</name><argument_list>(<argument><expr><name>myself</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>handshake_timeout</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handshake_timeout</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>handshake_timeout</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_pfail_nodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_cluster_links_memory</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><call><name>clusterNodeCronResizeBuffers</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterNodeCronFreeLinkOnBufferLimitReached</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterNodeCronUpdateClusterLinksMemUsage</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><call><name>clusterNodeCronHandleReconnect</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>handshake_timeout</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iteration</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictGetRandomKey</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>link</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>this</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_MYSELF</name><operator>|</operator><name>CLUSTER_NODE_HANDSHAKE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>min_pong_node</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>min_pong</name> <operator>&gt;</operator> <name><name>this</name><operator>-&gt;</operator><name>pong_received</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_pong_node</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_pong</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>pong_received</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>min_pong_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Pinging node %.40s"</literal></expr></argument>, <argument><expr><name><name>min_pong_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSendPing</name><argument_list>(<argument><expr><name><name>min_pong_node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>, <argument><expr><name>CLUSTERMSG_TYPE_PING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>orphaned_masters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_slaves</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>this_slaves</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator>
<operator>(</operator><name>CLUSTER_NODE_MYSELF</name><operator>|</operator><name>CLUSTER_NODE_NOADDR</name><operator>|</operator><name>CLUSTER_NODE_HANDSHAKE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>nodeFailed</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>okslaves</name> <init>= <expr><call><name>clusterCountNonFailingSlaves</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>okslaves</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>numslots</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_MIGRATE_TO</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>orphaned_masters</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>okslaves</name> <operator>&gt;</operator> <name>max_slaves</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max_slaves</name> <operator>=</operator> <name>okslaves</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_slaves</name> <operator>=</operator> <name>okslaves</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>mstime_t</name></type> <name>ping_delay</name> <init>= <expr><name>now</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>data_delay</name> <init>= <expr><name>now</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>data_received</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>&amp;&amp;</operator>
<name>now</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>ctime</name></name> <operator>&gt;</operator>
<name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>&amp;&amp;</operator>
<name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>&amp;&amp;</operator>

<name>ping_delay</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name><operator>/</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name>data_delay</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name><operator>/</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>freeClusterLink</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>&amp;&amp;</operator>
<name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>now</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>pong_received</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name><operator>/</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clusterSendPing</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>, <argument><expr><name>CLUSTERMSG_TYPE_PING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>&amp;&amp;</operator>
<call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_slave</name></name> <operator>==</operator> <name>node</name> <operator>&amp;&amp;</operator>
<name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clusterSendPing</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>, <argument><expr><name>CLUSTERMSG_TYPE_PING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>









<decl_stmt><decl><type><name>mstime_t</name></type> <name>node_delay</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ping_delay</name> <operator>&lt;</operator> <name>data_delay</name><operator>)</operator></expr> ?</condition><then> <expr><name>ping_delay</name></expr> </then><else>:
<expr><name>data_delay</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node_delay</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_PFAIL</name><operator>|</operator><name>CLUSTER_NODE_FAIL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"*** NODE %.40s possibly failing"</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_PFAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>update_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>&amp;&amp;</operator>
<call><name>nodeHasAddr</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>replicationSetMaster</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>manualFailoverCheckTimeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterHandleManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>&amp;</operator> <name>CLUSTER_MODULE_FLAG_NO_FAILOVER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterHandleSlaveFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>orphaned_masters</name> <operator>&amp;&amp;</operator> <name>max_slaves</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>this_slaves</name> <operator>==</operator> <name>max_slaves</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster_allow_replica_migration</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterHandleSlaveMigration</name><argument_list>(<argument><expr><name>max_slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>update_state</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>CLUSTER_FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterUpdateState</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>clusterBeforeSleep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>todo_before_sleep</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>todo_before_sleep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLUSTER_TODO_HANDLE_MANUALFAILOVER</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterHandleManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>&amp;</operator> <name>CLUSTER_MODULE_FLAG_NO_FAILOVER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterHandleSlaveFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLUSTER_TODO_HANDLE_FAILOVER</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>clusterHandleSlaveFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLUSTER_TODO_UPDATE_STATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterUpdateState</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLUSTER_TODO_SAVE_CONFIG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fsync</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>CLUSTER_TODO_FSYNC_CONFIG</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clusterSaveConfigOrDie</name><argument_list>(<argument><expr><name>fsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clusterDoBeforeSleep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>todo_before_sleep</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>bitmapTestBit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>byte</name> <init>= <expr><name>pos</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name>pos</name><operator>&amp;</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>bitmap</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>bitmapSetBit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>byte</name> <init>= <expr><name>pos</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name>pos</name><operator>&amp;</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>bitmapClearBit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>byte</name> <init>= <expr><name>pos</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name>pos</name><operator>&amp;</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>clusterMastersHaveSlaves</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>slaves</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>slaves</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>clusterNodeSetSlotBit</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><call><name>bitmapTestBit</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bitmapSetBit</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>numslots</name></name><operator>++</operator></expr>;</expr_stmt>













<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>numslots</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>clusterMastersHaveSlaves</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_MIGRATE_TO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>clusterNodeClearSlotBit</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><call><name>bitmapTestBit</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bitmapClearBit</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>numslots</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>clusterNodeGetSlotBit</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bitmapTestBit</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>clusterAddSlot</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clusterNodeSetSlotBit</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>clusterDelSlot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>nodes_for_slot</name> <init>= <expr><call><name>clusterGetNodesServingMySlots</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name>nodes_for_slot</name></expr></argument>, <argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>removeChannelsInSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>nodes_for_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>clusterNodeClearSlotBit</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>clusterDelNodeSlots</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clusterNodeGetSlotBit</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterDelSlot</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deleted</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>deleted</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>clusterCloseAllSlots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_MAX_REJOIN_DELAY</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_MIN_REJOIN_DELAY</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_WRITABLE_DELAY</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>clusterUpdateState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>new_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reachable_masters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>among_minority_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>first_call_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>todo_before_sleep</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLUSTER_TODO_UPDATE_STATE</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>first_call_time</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>first_call_time</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>CLUSTER_FAIL</name> <operator>&amp;&amp;</operator>
<call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>first_call_time</name> <operator>&lt;</operator> <name>CLUSTER_WRITABLE_DELAY</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>CLUSTER_OK</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_require_full_coverage</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_FAIL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>CLUSTER_FAIL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>






<block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>numslots</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLUSTER_NODE_FAIL</name><operator>|</operator><name>CLUSTER_NODE_PFAIL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reachable_masters</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>



<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>needed_quorum</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reachable_masters</name> <operator>&lt;</operator> <name>needed_quorum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>CLUSTER_FAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>among_minority_time</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><name>new_state</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>rejoin_delay</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>rejoin_delay</name> <operator>&gt;</operator> <name>CLUSTER_MAX_REJOIN_DELAY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rejoin_delay</name> <operator>=</operator> <name>CLUSTER_MAX_REJOIN_DELAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rejoin_delay</name> <operator>&lt;</operator> <name>CLUSTER_MIN_REJOIN_DELAY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rejoin_delay</name> <operator>=</operator> <name>CLUSTER_MIN_REJOIN_DELAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_state</name> <operator>==</operator> <name>CLUSTER_OK</name> <operator>&amp;&amp;</operator>
<call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>among_minority_time</name> <operator>&lt;</operator> <name>rejoin_delay</name></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Cluster state changed: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>new_state</name> <operator>==</operator> <name>CLUSTER_OK</name></expr> ?</condition><then> <expr><literal type="string">"ok"</literal></expr> </then><else>: <expr><literal type="string">"fail"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>new_state</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>























<function><type><name>int</name></type> <name>verifyClusterConfigWithData</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>update_config</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>&amp;</operator> <name>CLUSTER_MODULE_FLAG_NO_REDIRECTION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>C_OK</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_OK</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>countKeysInSlot</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>myself</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>





<expr_stmt><expr><name>update_config</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"I have keys for unassigned slot %d. "</literal>
<literal type="string">"Taking responsibility for it."</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddSlot</name><argument_list>(<argument><expr><name>myself</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"I have keys for slot %d, but the slot is "</literal>
<literal type="string">"assigned to another node. "</literal>
<literal type="string">"Setting it to importing state."</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>update_config</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterSaveConfigOrDie</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>clusterSetMaster</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>myself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>numslots</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLUSTER_NODE_MASTER</name><operator>|</operator><name>CLUSTER_NODE_MIGRATE_TO</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLUSTER_NODE_SLAVE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterCloseAllSlots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clusterNodeRemoveSlave</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>,<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterNodeAddSlave</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationSetMaster</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<struct>struct <name>redisNodeFlags</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>redisNodeFlags</name></name></type> <name><name>redisNodeFlagsTable</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>CLUSTER_NODE_MYSELF</name></expr>, <expr><literal type="string">"myself,"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CLUSTER_NODE_MASTER</name></expr>, <expr><literal type="string">"master,"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CLUSTER_NODE_SLAVE</name></expr>, <expr><literal type="string">"slave,"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CLUSTER_NODE_PFAIL</name></expr>, <expr><literal type="string">"fail?,"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CLUSTER_NODE_FAIL</name></expr>, <expr><literal type="string">"fail,"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CLUSTER_NODE_HANDSHAKE</name></expr>, <expr><literal type="string">"handshake,"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CLUSTER_NODE_NOADDR</name></expr>, <expr><literal type="string">"noaddr,"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CLUSTER_NODE_NOFAILOVER</name></expr>, <expr><literal type="string">"nofailover,"</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>sds</name></type> <name>representClusterNodeFlags</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>ci</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>orig_len</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisNodeFlagsTable</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>redisNodeFlags</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisNodeFlags</name></name> <modifier>*</modifier></type><name>nodeflag</name> <init>= <expr><name>redisNodeFlagsTable</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>nodeflag</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name><name>nodeflag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>orig_len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">"noflags,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsIncrLen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ci</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>sds</name></type> <name>clusterGenNodeDescription</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_pport</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><name>use_pport</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>pport</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>pport</name></name></expr> </then><else>: <expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">" %s:%i@%i,%s "</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
<argument><expr><name>port</name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">" %s:%i@%i "</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
<argument><expr><name>port</name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>cport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>representClusterNodeFlags</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">"-"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>nodeEpoch</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>slaveof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nodeEpoch</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>configEpoch</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">" %I %I %U %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ping_sent</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>pong_received</name></name></expr></argument>,
<argument><expr><name>nodeEpoch</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>link</name></name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_MYSELF</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"connected"</literal></expr> </then><else>: <expr><literal type="string">"disconnected"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>slots_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>slots_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>numslots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bit</name> <operator>=</operator> <call><name>clusterNodeGetSlotBit</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>bit</name> <operator>||</operator> <name>j</name> <operator>==</operator> <name>CLUSTER_SLOTS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>CLUSTER_SLOTS</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>j</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">" %i"</literal></expr></argument>,<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">" %i-%i"</literal></expr></argument>,<argument><expr><name>start</name></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_MYSELF</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">" [%d-&gt;-%.40s]"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">" [%d-&lt;-%.40s]"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ci</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>clusterGenNodesSlotsInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>CLUSTER_SLOTS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>CLUSTER_SLOTS</name> <operator>||</operator> <name>n</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>filter</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>slots_info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>slots_info</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>i</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>slots_info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slots_info</name></name></expr></argument>,<argument><expr><literal type="string">" %i"</literal></expr></argument>,<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>slots_info</name></name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slots_info</name></name></expr></argument>,<argument><expr><literal type="string">" %i-%i"</literal></expr></argument>,<argument><expr><name>start</name></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>CLUSTER_SLOTS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
















<function><type><name>sds</name></type> <name>clusterGenNodesDescription</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_pport</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>ci</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ni</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>clusterGenNodesSlotsInfo</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>filter</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ni</name> <operator>=</operator> <call><name>clusterGenNodeDescription</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>use_pport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>slots_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slots_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>slots_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ci</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>addReplyClusterLinkDescription</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"direction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>link</name><operator>-&gt;</operator><name>inbound</name></name></expr> ?</condition><then> <expr><literal type="string">"from"</literal></expr> </then><else>: <expr><literal type="string">"to"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>node_name</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"create-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>events</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connHasReadHandler</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connHasWriteHandler</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"send-buffer-allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>sdsalloc</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"send-buffer-used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>addReplyClusterLinksDescription</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arraylen_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_links</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>arraylen_ptr</name> <operator>=</operator> <call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_links</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyClusterLinkDescription</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_links</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyClusterLinkDescription</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>inbound_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>arraylen_ptr</name></expr></argument>, <argument><expr><name>num_links</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getPreferredEndpoint</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_preferred_endpoint_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLUSTER_ENDPOINT_TYPE_IP</name></expr>:</case> <return>return <expr><name><name>n</name><operator>-&gt;</operator><name>ip</name></name></expr>;</return>
<case>case <expr><name>CLUSTER_ENDPOINT_TYPE_HOSTNAME</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>hostname</name></name></expr> ?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>hostname</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr>;</return>
<case>case <expr><name>CLUSTER_ENDPOINT_TYPE_UNKNOWN_ENDPOINT</name></expr>:</case> <return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clusterGetMessageTypeString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLUSTERMSG_TYPE_PING</name></expr>:</case> <return>return <expr><literal type="string">"ping"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_PONG</name></expr>:</case> <return>return <expr><literal type="string">"pong"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_MEET</name></expr>:</case> <return>return <expr><literal type="string">"meet"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_FAIL</name></expr>:</case> <return>return <expr><literal type="string">"fail"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_PUBLISH</name></expr>:</case> <return>return <expr><literal type="string">"publish"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_PUBLISHSHARD</name></expr>:</case> <return>return <expr><literal type="string">"publishshard"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST</name></expr>:</case> <return>return <expr><literal type="string">"auth-req"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK</name></expr>:</case> <return>return <expr><literal type="string">"auth-ack"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_UPDATE</name></expr>:</case> <return>return <expr><literal type="string">"update"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_MFSTART</name></expr>:</case> <return>return <expr><literal type="string">"mfstart"</literal></expr>;</return>
<case>case <expr><name>CLUSTERMSG_TYPE_MODULE</name></expr>:</case> <return>return <expr><literal type="string">"module"</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getSlotOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>slot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name> <operator>||</operator>
<name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>slot</name> <operator>&gt;=</operator> <name>CLUSTER_SLOTS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid or out of range slot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>slot</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>isReplicaAvailable</name><parameter_list>(<parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nodeFailed</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>repl_offset</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>repl_offset</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLUSTER_NODE_MYSELF</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>repl_offset</name> <operator>=</operator> <call><name>replicationGetSlaveOffset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>repl_offset</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>checkSlotAssignmentsOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>slots</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_slot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>slot</name> <operator>=</operator> <name>start_slot</name></expr>;</init> <condition><expr><name>slot</name> <operator>&lt;=</operator> <name>end_slot</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>del</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Slot %d is already unassigned"</literal></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>del</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Slot %d is already busy"</literal></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name><operator>++</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Slot %d specified multiple times"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clusterUpdateSlots</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>slots</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>slots</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <ternary><condition><expr><name>del</name></expr> ?</condition><then> <expr><call><name>clusterDelSlot</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>clusterAddSlot</name><argument_list>(<argument><expr><name>myself</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addNodeToNodeReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_preferred_endpoint_type</name></name> <operator>==</operator> <name>CLUSTER_ENDPOINT_TYPE_IP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_preferred_endpoint_type</name></name> <operator>==</operator> <name>CLUSTER_ENDPOINT_TYPE_HOSTNAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_preferred_endpoint_type</name></name> <operator>==</operator> <name>CLUSTER_ENDPOINT_TYPE_UNKNOWN_ENDPOINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecognized preferred endpoint type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>use_pport</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>tls_cluster</name></name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <call><name>connGetType</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_TYPE_TLS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>use_pport</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>pport</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>pport</name></name></expr> </then><else>: <expr><name><name>node</name><operator>-&gt;</operator><name>port</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>deflen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_preferred_endpoint_type</name></name> <operator>!=</operator> <name>CLUSTER_ENDPOINT_TYPE_IP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"ip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_preferred_endpoint_type</name></name> <operator>!=</operator> <name>CLUSTER_ENDPOINT_TYPE_HOSTNAME</name>
<operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"hostname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>deflen</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addNodeReplyForClusterSlot</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_slot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nested_elements</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nested_replylen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>start_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>end_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addNodeToNodeReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isReplicaAvailable</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addNodeToNodeReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nested_elements</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>nested_replylen</name></expr></argument>, <argument><expr><name>nested_elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clusterReplyMultiBulkSlots</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>










<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_masters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>slot_replylen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>CLUSTER_SLOTS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>CLUSTER_SLOTS</name> <operator>||</operator> <name>n</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addNodeReplyForClusterSlot</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_masters</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>CLUSTER_SLOTS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>slot_replylen</name></expr></argument>, <argument><expr><name>num_masters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clusterCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"This instance has cluster support disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"ADDSLOTS &lt;slot&gt; [&lt;slot&gt; ...]"</literal></expr>,
<expr><literal type="string">" Assign slots to current node."</literal></expr>,
<expr><literal type="string">"ADDSLOTSRANGE &lt;start slot&gt; &lt;end slot&gt; [&lt;start slot&gt; &lt;end slot&gt; ...]"</literal></expr>,
<expr><literal type="string">" Assign slots which are between &lt;start-slot&gt; and &lt;end-slot&gt; to current node."</literal></expr>,
<expr><literal type="string">"BUMPEPOCH"</literal></expr>,
<expr><literal type="string">" Advance the cluster config epoch."</literal></expr>,
<expr><literal type="string">"COUNT-FAILURE-REPORTS &lt;node-id&gt;"</literal></expr>,
<expr><literal type="string">" Return number of failure reports for &lt;node-id&gt;."</literal></expr>,
<expr><literal type="string">"COUNTKEYSINSLOT &lt;slot&gt;"</literal></expr>,
<expr><literal type="string">" Return the number of keys in &lt;slot&gt;."</literal></expr>,
<expr><literal type="string">"DELSLOTS &lt;slot&gt; [&lt;slot&gt; ...]"</literal></expr>,
<expr><literal type="string">" Delete slots information from current node."</literal></expr>,
<expr><literal type="string">"DELSLOTSRANGE &lt;start slot&gt; &lt;end slot&gt; [&lt;start slot&gt; &lt;end slot&gt; ...]"</literal></expr>,
<expr><literal type="string">" Delete slots information which are between &lt;start-slot&gt; and &lt;end-slot&gt; from current node."</literal></expr>,
<expr><literal type="string">"FAILOVER [FORCE|TAKEOVER]"</literal></expr>,
<expr><literal type="string">" Promote current replica node to being a master."</literal></expr>,
<expr><literal type="string">"FORGET &lt;node-id&gt;"</literal></expr>,
<expr><literal type="string">" Remove a node from the cluster."</literal></expr>,
<expr><literal type="string">"GETKEYSINSLOT &lt;slot&gt; &lt;count&gt;"</literal></expr>,
<expr><literal type="string">" Return key names stored by current node in a slot."</literal></expr>,
<expr><literal type="string">"FLUSHSLOTS"</literal></expr>,
<expr><literal type="string">" Delete current node own slots information."</literal></expr>,
<expr><literal type="string">"INFO"</literal></expr>,
<expr><literal type="string">" Return information about the cluster."</literal></expr>,
<expr><literal type="string">"KEYSLOT &lt;key&gt;"</literal></expr>,
<expr><literal type="string">" Return the hash slot for &lt;key&gt;."</literal></expr>,
<expr><literal type="string">"MEET &lt;ip&gt; &lt;port&gt; [&lt;bus-port&gt;]"</literal></expr>,
<expr><literal type="string">" Connect nodes into a working cluster."</literal></expr>,
<expr><literal type="string">"MYID"</literal></expr>,
<expr><literal type="string">" Return the node id."</literal></expr>,
<expr><literal type="string">"NODES"</literal></expr>,
<expr><literal type="string">" Return cluster configuration seen by node. Output format:"</literal></expr>,
<expr><literal type="string">" &lt;id&gt; &lt;ip:port&gt; &lt;flags&gt; &lt;master&gt; &lt;pings&gt; &lt;pongs&gt; &lt;epoch&gt; &lt;link&gt; &lt;slot&gt; ..."</literal></expr>,
<expr><literal type="string">"REPLICATE &lt;node-id&gt;"</literal></expr>,
<expr><literal type="string">" Configure current node as replica to &lt;node-id&gt;."</literal></expr>,
<expr><literal type="string">"RESET [HARD|SOFT]"</literal></expr>,
<expr><literal type="string">" Reset current node (default: soft)."</literal></expr>,
<expr><literal type="string">"SET-CONFIG-EPOCH &lt;epoch&gt;"</literal></expr>,
<expr><literal type="string">" Set config epoch of current node."</literal></expr>,
<expr><literal type="string">"SETSLOT &lt;slot&gt; (IMPORTING|MIGRATING|STABLE|NODE &lt;node-id&gt;)"</literal></expr>,
<expr><literal type="string">" Set slot state."</literal></expr>,
<expr><literal type="string">"REPLICAS &lt;node-id&gt;"</literal></expr>,
<expr><literal type="string">" Return &lt;node-id&gt; replicas."</literal></expr>,
<expr><literal type="string">"SAVECONFIG"</literal></expr>,
<expr><literal type="string">" Force saving cluster configuration on disk."</literal></expr>,
<expr><literal type="string">"SLOTS"</literal></expr>,
<expr><literal type="string">" Return information about slots range mappings. Each range is made of:"</literal></expr>,
<expr><literal type="string">" start, end, master and replicas IP addresses, ports and ids"</literal></expr>,
<expr><literal type="string">"LINKS"</literal></expr>,
<expr><literal type="string">" Return information about all network links between this node and its peers."</literal></expr>,
<expr><literal type="string">" Output format is an array where each array element is a map containing attributes of a link"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"meet"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>cport</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid TCP base port specified: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cport</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid TCP bus port specified: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cport</name> <operator>=</operator> <name>port</name> <operator>+</operator> <name>CLUSTER_PORT_INCR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clusterStartHandshake</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>cport</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid node address specified: %s:%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"nodes"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>use_pport</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>tls_cluster</name></name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <call><name>connGetType</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_TYPE_TLS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>nodes</name> <init>= <expr><call><name>clusterGenNodesDescription</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>use_pport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyVerbatim</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>nodes</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"myid"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLUSTER_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"slots"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clusterReplyMultiBulkSlots</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"flushslots"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DB must be empty to perform CLUSTER FLUSHSLOTS."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clusterDelNodeSlots</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"addslots"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"delslots"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>slots</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>CLUSTER_SLOTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>del</name> <init>= <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"delslots"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slots</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CLUSTER_SLOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slot</name> <operator>=</operator> <call><name>getSlotOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>getSlotOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>checkSlotAssignmentsOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>slots</name></expr></argument>, <argument><expr><name>del</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>clusterUpdateSlots</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>slots</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"addslotsrange"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"delslotsrange"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorArity</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>startslot</name></decl>, <decl><type ref="prev"/><name>endslot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>slots</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>CLUSTER_SLOTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>del</name> <init>= <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"delslotsrange"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slots</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CLUSTER_SLOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>startslot</name> <operator>=</operator> <call><name>getSlotOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endslot</name> <operator>=</operator> <call><name>getSlotOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>startslot</name> <operator>&gt;</operator> <name>endslot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"start slot number %d is greater than end slot number %d"</literal></expr></argument>, <argument><expr><name>startslot</name></expr></argument>, <argument><expr><name>endslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkSlotAssignmentsOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>slots</name></expr></argument>, <argument><expr><name>del</name></expr></argument>, <argument><expr><name>startslot</name></expr></argument>, <argument><expr><name>endslot</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>clusterUpdateSlots</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>slots</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"setslot"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Please use SETSLOT only with masters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slot</name> <operator>=</operator> <call><name>getSlotOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"migrating"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>!=</operator> <name>myself</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"I'm not the owner of hash slot %u"</literal></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"I don't know about node %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Target node is not a master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"importing"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>myself</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"I'm already the owner of hash slot %u"</literal></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"I don't know about node %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Target node is not a master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"stable"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"node"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown node %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>myself</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <name>myself</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>countKeysInSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Can't assign hashslot %d to a different node "</literal>
<literal type="string">"while I still hold keys for this hash slot."</literal></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>countKeysInSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>slot</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clusterDelSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterAddSlot</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>myself</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>slot</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>









<if_stmt><if>if <condition>(<expr><call><name>clusterBumpConfigEpochWithoutConsensus</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"configEpoch updated after importing slot %d"</literal></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>clusterBroadcastPong</name><argument_list>(<argument><expr><name>CLUSTER_BROADCAST_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Invalid CLUSTER SETSLOT action or number of arguments. Try CLUSTER HELP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_SAVE_CONFIG</name><operator>|</operator><name>CLUSTER_TODO_UPDATE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"bumpepoch"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>clusterBumpConfigEpochWithoutConsensus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>reply</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"+%s %llu\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"BUMPED"</literal></expr> </then><else>: <expr><literal type="string">"STILL"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>statestr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"ok"</literal></expr>,<expr><literal type="string">"fail"</literal></expr>,<expr><literal type="string">"needhelp"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slots_assigned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slots_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slots_pfail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slots_fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>myepoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLUSTER_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>slots_assigned</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nodeFailed</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slots_fail</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nodeTimedOut</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slots_pfail</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>slots_ok</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>myepoch</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>configEpoch</name></name></expr> </then><else>: <expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>sds</name></type> <name>info</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"cluster_state:%s\r\n"</literal>
<literal type="string">"cluster_slots_assigned:%d\r\n"</literal>
<literal type="string">"cluster_slots_ok:%d\r\n"</literal>
<literal type="string">"cluster_slots_pfail:%d\r\n"</literal>
<literal type="string">"cluster_slots_fail:%d\r\n"</literal>
<literal type="string">"cluster_known_nodes:%lu\r\n"</literal>
<literal type="string">"cluster_size:%d\r\n"</literal>
<literal type="string">"cluster_current_epoch:%llu\r\n"</literal>
<literal type="string">"cluster_my_epoch:%llu\r\n"</literal></expr></argument>
, <argument><expr><name><name>statestr</name><index>[<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>slots_assigned</name></expr></argument>,
<argument><expr><name>slots_ok</name></expr></argument>,
<argument><expr><name>slots_pfail</name></expr></argument>,
<argument><expr><name>slots_fail</name></expr></argument>,
<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>myepoch</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tot_msg_sent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tot_msg_received</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CLUSTERMSG_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_sent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tot_msg_sent</name> <operator>+=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_sent</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"cluster_stats_messages_%s_sent:%lld\r\n"</literal></expr></argument>,
<argument><expr><call><name>clusterGetMessageTypeString</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_sent</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"cluster_stats_messages_sent:%lld\r\n"</literal></expr></argument>, <argument><expr><name>tot_msg_sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CLUSTERMSG_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_received</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tot_msg_received</name> <operator>+=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_received</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"cluster_stats_messages_%s_received:%lld\r\n"</literal></expr></argument>,
<argument><expr><call><name>clusterGetMessageTypeString</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stats_bus_messages_received</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"cluster_stats_messages_received:%lld\r\n"</literal></expr></argument>, <argument><expr><name>tot_msg_received</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"total_cluster_links_buffer_limit_exceeded:%llu\r\n"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>stat_cluster_links_buffer_limit_exceeded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>addReplyVerbatim</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>info</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"saveconfig"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>clusterSaveConfig</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"error saving the cluster node config: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"keyslot"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>keyHashSlot</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"countkeysinslot"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>slot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>slot</name> <operator>&gt;=</operator> <name>CLUSTER_SLOTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid slot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>countKeysInSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"getkeysinslot"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>maxkeys</name></decl>, <decl><type ref="prev"/><name>slot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>maxkeys</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>slot</name> <operator>&gt;=</operator> <name>CLUSTER_SLOTS</name> <operator>||</operator> <name>maxkeys</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid slot or number of keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>keys_in_slot</name> <init>= <expr><call><name>countKeysInSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numkeys</name> <init>= <expr><ternary><condition><expr><name>maxkeys</name> <operator>&gt;</operator> <name>keys_in_slot</name></expr> ?</condition><then> <expr><name>keys_in_slot</name></expr> </then><else>: <expr><name>maxkeys</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name><name>server</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name><operator>)</operator><operator>.</operator><name>by_slot</name></name><index>[<expr><name>slot</name></expr>]</index><operator>.</operator><name>head</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdskey</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sdskey</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictEntryNextInSlot</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"forget"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown node %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <name>myself</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"I tried hard but I can't forget myself..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Can't forget my master!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clusterBlacklistAddNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDelNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator>
<name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"replicate"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown node %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>myself</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Can't replicate myself"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"I can only replicate a master, not a replica."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>myself</name><operator>-&gt;</operator><name>numslots</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"To set a master the node must be empty and "</literal>
<literal type="string">"without assigned slots."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>clusterSetMaster</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator><name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"slaves"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"replicas"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown node %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The specified node is not a master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>use_pport</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>tls_cluster</name></name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <call><name>connGetType</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_TYPE_TLS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>numslaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>numslaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>ni</name> <init>= <expr><call><name>clusterGenNodeDescription</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>use_pport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"count-failure-reports"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>clusterLookupNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown node %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>clusterNodeFailureReportsCount</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"failover"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>takeover</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"force"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"takeover"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>takeover</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"You should send CLUSTER FAILOVER to a replica"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"I'm a replica but my master is unknown to me"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>nodeFailed</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>myself</name><operator>-&gt;</operator><name>slaveof</name><operator>-&gt;</operator><name>link</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Master is down or failed, "</literal>
<literal type="string">"please use CLUSTER FAILOVER FORCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>resetManualFailover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_end</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>+</operator> <name>CLUSTER_MF_TIMEOUT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>takeover</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Taking over the master (user request)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterBumpConfigEpochWithoutConsensus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterFailoverReplaceYourMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>force</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Forced failover user request accepted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>mf_can_start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Manual failover user request accepted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterSendMFStart</name><argument_list>(<argument><expr><name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"set-config-epoch"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>







<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>epoch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>epoch</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>epoch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid config epoch specified: %lld"</literal></expr></argument>,<argument><expr><name>epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The user can assign a config epoch only when the "</literal>
<literal type="string">"node does not know any other node."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Node config epoch is already non-zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name> <operator>=</operator> <name>epoch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"configEpoch set to %llu via CLUSTER SET-CONFIG-EPOCH"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>myself</name><operator>-&gt;</operator><name>configEpoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name> <operator>&lt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>epoch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>currentEpoch</name></name> <operator>=</operator> <name>epoch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>clusterDoBeforeSleep</name><argument_list>(<argument><expr><name>CLUSTER_TODO_UPDATE_STATE</name><operator>|</operator>
<name>CLUSTER_TODO_SAVE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hard</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"hard"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hard</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"soft"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hard</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>nodeIsMaster</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"CLUSTER RESET can't be called with "</literal>
<literal type="string">"master nodes containing keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clusterReset</name><argument_list>(<argument><expr><name>hard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"links"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>addReplyClusterLinksDescription</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>removeChannelsInSlot</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channelcount</name> <init>= <expr><call><name>countChannelsInSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>channelcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>channels</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>channelcount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>indexed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>indexed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>slot</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indexed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>slot</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots_to_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>,<argument><expr><literal type="string">"&gt;="</literal></expr></argument>,<argument><expr><name>indexed</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>.</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>indexed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>iter</name><operator>.</operator><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>indexed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>channels</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>iter</name><operator>.</operator><name>key</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>key_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pubsubUnsubscribeShardChannels</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>channelcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>createDumpPayload</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>crc</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>rioInitWithBuffer</name><argument_list>(<argument><expr><name>payload</name></expr></argument>,<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>rdbSaveObjectType</name><argument_list>(<argument><expr><name>payload</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>rdbSaveObject</name><argument_list>(<argument><expr><name>payload</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RDB_VERSION</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RDB_VERSION</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>payload</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>payload</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>crc64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>payload</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>payload</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>payload</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>payload</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>verifyDumpPayload</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>rdbver_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>footer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rdbver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>crc</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>footer</name> <operator>=</operator> <name>p</name><operator>+</operator><operator>(</operator><name>len</name><operator>-</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>rdbver</name> <operator>=</operator> <operator>(</operator><name><name>footer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>footer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbver_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rdbver_ptr</name> <operator>=</operator> <name>rdbver</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbver</name> <operator>&gt;</operator> <name>RDB_VERSION</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>skip_checksum_validation</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>C_OK</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>crc64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>,<argument><expr><name>footer</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>C_OK</name></expr> </then><else>: <expr><name>C_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>dumpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name></type> <name>payload</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookupKeyRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>createDumpPayload</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>restoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ttl</name></decl>, <decl><type ref="prev"/><name>lfu_freq</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>lru_idle</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>lru_clock</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name></type> <name>payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>replace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>absttl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>additional</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"absttl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>absttl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"idletime"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>additional</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>lfu_freq</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>lru_idle</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lru_idle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid IDLETIME value, must be &gt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lru_clock</name> <operator>=</operator> <call><name>LRU_CLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"freq"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>additional</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>lru_idle</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>lfu_freq</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lfu_freq</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>lfu_freq</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid FREQ value, must be &gt;= 0 and &lt;= 255"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>replace</name> <operator>&amp;&amp;</operator> <call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>busykeyerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid TTL value, must be &gt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>verifyDumpPayload</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DUMP payload version or checksum are wrong"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rioInitWithBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>type</name> <operator>=</operator> <call><name>rdbLoadObjectType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>rdbLoadObject</name><argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Bad data format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>replace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>deleted</name> <operator>=</operator> <call><name>dbDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>absttl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ttl</name><operator>+=</operator><call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&amp;&amp;</operator> <call><name>checkAlreadyExpired</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deleted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteClientCommandVector</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>del</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"del"</literal></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>absttl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ttl_obj</name> <init>= <expr><call><name>createStringObjectFromLongLong</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>ttl_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>ttl_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>absttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>objectSetLRUOrLFU</name><argument_list>(<argument><expr><name>obj</name></expr></argument>,<argument><expr><name>lfu_freq</name></expr></argument>,<argument><expr><name>lru_idle</name></expr></argument>,<argument><expr><name>lru_clock</name></expr></argument>,<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"restore"</literal></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIGRATE_SOCKET_CACHE_ITEMS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIGRATE_SOCKET_CACHE_TTL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>migrateCachedSocket</name> <block>{
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>last_dbid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>last_use_time</name></decl>;</decl_stmt>
}</block></struct></type> <name>migrateCachedSocket</name>;</typedef>












<function><type><name>migrateCachedSocket</name><modifier>*</modifier></type> <name>migrateGetSocket</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>migrateCachedSocket</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>


<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name><name>host</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><literal type="string">":"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>last_use_time</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<return>return <expr><name>cs</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MIGRATE_SOCKET_CACHE_ITEMS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictGetRandomKey</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>,<argument><expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>conn</name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>tls_cluster</name></name></expr> ?</condition><then> <expr><call><name>connCreateTLS</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>connCreateSocket</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connBlockingConnect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-IOERR error or timeout connecting to the client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>connEnableTcpNoDelay</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>last_dbid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>last_use_time</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>unixtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cs</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>migrateCloseSocket</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>migrateCachedSocket</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name><name>host</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><literal type="string">":"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>migrateCloseTimedoutSockets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>migrateCachedSocket</name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>cs</name><operator>-&gt;</operator><name>last_use_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>MIGRATE_SOCKET_CACHE_TTL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connClose</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>,<argument><expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>migrateCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>migrateCachedSocket</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>replace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dbid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>ov</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>kv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>newargv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>may_retry</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argv_rewritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>first_key</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_keys</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>moreargs</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>moreargs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>password</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redactClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"auth2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>moreargs</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redactClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>password</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redactClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"keys"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"When using MIGRATE KEYS option, the key argument"</literal>
<literal type="string">" must be set to the empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first_key</name> <operator>=</operator> <name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_keys</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name> <operator>||</operator>
<call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>dbid</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name>ov</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>ov</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>kv</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_keys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ov</name><index>[<expr><name>oi</name></expr>]</index></name> <operator>=</operator> <call><name>lookupKeyRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>first_key</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>kv</name><index>[<expr><name>oi</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>first_key</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>oi</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num_keys</name> <operator>=</operator> <name>oi</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_keys</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+NOKEY\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<label><name>try_again</name>:</label>
<expr_stmt><expr><name>write_error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>migrateGetSocket</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rioInitWithBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>password</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>arity</name> <init>= <expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="char">'*'</literal></expr></argument>,<argument><expr><name>arity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"AUTH"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>username</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>username</name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>password</name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>select</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>last_dbid</name></name> <operator>!=</operator> <name>dbid</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>select</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="char">'*'</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SELECT"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkLongLong</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>non_expired</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_keys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ttl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>expireat</name> <init>= <expr><call><name>getExpire</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expireat</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <name>expireat</name><operator>-</operator><call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ttl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>ov</name><index>[<expr><name>non_expired</name></expr>]</index></name> <operator>=</operator> <name><name>ov</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><index>[<expr><name>non_expired</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>rioWriteBulkCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="char">'*'</literal></expr></argument>,<argument><expr><ternary><condition><expr><name>replace</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"RESTORE-ASKING"</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"RESTORE"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkLongLong</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>createDumpPayload</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>,<argument><expr><name><name>ov</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>replace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"REPLACE"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>num_keys</name> <operator>=</operator> <name>non_expired</name></expr>;</expr_stmt>


<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>buf</name> <init>= <expr><name><name>cmd</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>towrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>towrite</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>-</operator><name>pos</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>towrite</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>towrite</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr> </then><else>: <expr><name>towrite</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <call><name>connSyncWrite</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>buf</name><operator>+</operator><name>pos</name></expr></argument>,<argument><expr><name>towrite</name></expr></argument>,<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>!=</operator> <operator>(</operator><name>signed</name><operator>)</operator><name>towrite</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>write_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>socket_err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf0</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>password</name> <operator>&amp;&amp;</operator> <call><name>connSyncReadLine</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>buf0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf0</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>socket_err</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>select</name> <operator>&amp;&amp;</operator> <call><name>connSyncReadLine</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>socket_err</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>error_from_target</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>socket_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>del_idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newargv</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>num_keys</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_keys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connSyncReadLine</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>socket_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>password</name> <operator>&amp;&amp;</operator> <name><name>buf0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>select</name> <operator>&amp;&amp;</operator> <name><name>buf1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator>
<name><name>buf2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error_from_target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>last_dbid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>password</name> <operator>&amp;&amp;</operator> <name><name>buf0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errbuf</name> <operator>=</operator> <name>buf0</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>select</name> <operator>&amp;&amp;</operator> <name><name>buf1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errbuf</name> <operator>=</operator> <name>buf1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>errbuf</name> <operator>=</operator> <name>buf2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>error_from_target</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Target instance replied with error: %s"</literal></expr></argument>,
<argument><expr><name>errbuf</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dbDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"del"</literal></expr></argument>,<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>newargv</name><index>[<expr><name>del_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name><name>kv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error_from_target</name> <operator>&amp;&amp;</operator> <name>socket_error</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>may_retry</name> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>!=</operator> <name>ETIMEDOUT</name></expr>)</condition>
<block>{<block_content>
<goto>goto <name>socket_err</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>socket_error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>migrateCloseSocket</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>del_idx</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"DEL"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replaceClientCommandVector</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>del_idx</name></expr></argument>,<argument><expr><name>newargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_rewritten</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>newargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>newargv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error_from_target</name> <operator>&amp;&amp;</operator> <name>socket_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>may_retry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>socket_err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error_from_target</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>last_dbid</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>newargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>




<label><name>socket_err</name>:</label>


<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv_rewritten</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>migrateCloseSocket</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>newargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newargv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ETIMEDOUT</name> <operator>&amp;&amp;</operator> <name>may_retry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>may_retry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>try_again</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyErrorSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"-IOERR error or timeout %s to target instance"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>write_error</name></expr> ?</condition><then> <expr><literal type="string">"writing"</literal></expr> </then><else>: <expr><literal type="string">"reading"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>askingCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"This instance has cluster support disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_ASKING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>readonlyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"This instance has cluster support disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_READONLY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>readwriteCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"This instance has cluster support disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_READONLY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

































<function><type><name>clusterNode</name> <modifier>*</modifier></type><name>getNodeByQuery</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>hashslot</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>firstkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>multiple_keys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>multiState</name> <modifier>*</modifier></type><name>ms</name></decl>, <decl><type ref="prev"/><name>_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>multiCmd</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>migrating_slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>importing_slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>missing_keys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>&amp;</operator> <name>CLUSTER_MODULE_FLAG_NO_REDIRECTION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>myself</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>error_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>myself</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ms</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>ms</name> <operator>=</operator> <operator>&amp;</operator><name>_ms</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_ms</name><operator>.</operator><name>commands</name></name> <operator>=</operator> <operator>&amp;</operator><name>mc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_ms</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name><operator>.</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_pubsubshard</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>ssubscribeCommand</name> <operator>||</operator>
<name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>sunsubscribeCommand</name> <operator>||</operator>
<name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>spublishCommand</name></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ms</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>mcmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>margv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>margc</name></decl>, <decl><type ref="prev"/><name>numkeys</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keyindex</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mcmd</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>margc</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>margv</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argv</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>getKeysResult</name></type> <name>result</name> <init>= <expr><name>GETKEYS_RESULT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>numkeys</name> <operator>=</operator> <call><name>getKeysFromCommand</name><argument_list>(<argument><expr><name>mcmd</name></expr></argument>,<argument><expr><name>margv</name></expr></argument>,<argument><expr><name>margc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keyindex</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>keys</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>thiskey</name> <init>= <expr><name><name>margv</name><index>[<expr><name><name>keyindex</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thisslot</name> <init>= <expr><call><name>keyHashSlot</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>thiskey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>thiskey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>firstkey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>firstkey</name> <operator>=</operator> <name>thiskey</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>thisslot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getKeysFreeResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error_code</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_DOWN_UNBOUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>myself</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>migrating_slot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>importing_slot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalStringObjects</name><argument_list>(<argument><expr><name>firstkey</name></expr></argument>,<argument><expr><name>thiskey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>!=</operator> <name>thisslot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getKeysFreeResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error_code</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_CROSS_SLOT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>multiple_keys</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>LOOKUP_NOTOUCH</name> <operator>|</operator> <name>LOOKUP_NOSTATS</name> <operator>|</operator> <name>LOOKUP_NONOTIFY</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>migrating_slot</name> <operator>||</operator> <name>importing_slot</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_pubsubshard</name> <operator>&amp;&amp;</operator>
<call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>thiskey</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>missing_keys</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>getKeysFreeResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>myself</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>CLUSTER_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_pubsubshard</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_allow_pubsubshard_when_down</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_DOWN_STATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_allow_reads_when_down</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>error_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_DOWN_STATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>error_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_DOWN_RO_STATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>



</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>hashslot</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>hashslot</name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>migrating_slot</name> <operator>||</operator> <name>importing_slot</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>migrateCommand</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>myself</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>migrating_slot</name> <operator>&amp;&amp;</operator> <name>missing_keys</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_ASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>migrating_slots_to</name><index>[<expr><name>slot</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>importing_slot</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_ASKING</name> <operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_ASKING</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>multiple_keys</name> <operator>&amp;&amp;</operator> <name>missing_keys</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_UNSTABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>myself</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>is_write_command</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name><operator>.</operator><name>cmd_flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_READONLY</name><operator>)</operator> <operator>||</operator> <name>is_pubsubshard</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name>is_write_command</name> <operator>&amp;&amp;</operator>
<call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>n</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>myself</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>myself</name> <operator>&amp;&amp;</operator> <name>error_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error_code</name> <operator>=</operator> <name>CLUSTER_REDIR_MOVED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>clusterRedirectClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashslot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_CROSS_SLOT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-CROSSSLOT Keys in request don't hash to the same slot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_UNSTABLE</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-TRYAGAIN Multiple keys request during rehashing of slot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_DOWN_STATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-CLUSTERDOWN The cluster is down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_DOWN_RO_STATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-CLUSTERDOWN The cluster is down and only accepts read commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_DOWN_UNBOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-CLUSTERDOWN Hash slot not served"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_MOVED</name> <operator>||</operator>
<name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_ASK</name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>use_pport</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>tls_cluster</name></name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <call><name>connGetType</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONN_TYPE_TLS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><name>use_pport</name> <operator>&amp;&amp;</operator> <name><name>n</name><operator>-&gt;</operator><name>pport</name></name></expr> ?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>pport</name></name></expr> </then><else>: <expr><name><name>n</name><operator>-&gt;</operator><name>port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyErrorSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"-%s %d %s:%d"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>error_code</name> <operator>==</operator> <name>CLUSTER_REDIR_ASK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"ASK"</literal></expr> </then><else>: <expr><literal type="string">"MOVED"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>hashslot</name></expr></argument>, <argument><expr><call><name>getPreferredEndpoint</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"getNodeByQuery() unknown error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>clusterRedirectBlockedClientIfNeeded</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_BLOCKED</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>btype</name></name> <operator>==</operator> <name>BLOCKED_LIST</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>btype</name></name> <operator>==</operator> <name>BLOCKED_ZSET</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>btype</name></name> <operator>==</operator> <name>BLOCKED_STREAM</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>btype</name></name> <operator>==</operator> <name>BLOCKED_MODULE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>CLUSTER_FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterRedirectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CLUSTER_REDIR_DOWN_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>btype</name></name> <operator>==</operator> <name>BLOCKED_MODULE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>moduleClientIsBlockedOnKeys</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><call><name>keyHashSlot</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_READONLY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>lastcmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>nodeIsSlave</name><argument_list>(<argument><expr><name>myself</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>myself</name><operator>-&gt;</operator><name>slaveof</name></name> <operator>==</operator> <name>node</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>myself</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <name>myself</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>importing_slots_from</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clusterRedirectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>CLUSTER_REDIR_DOWN_UNBOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>clusterRedirectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>node</name></expr></argument>,<argument><expr><name>slot</name></expr></argument>,
<argument><expr><name>CLUSTER_REDIR_MOVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>slotToKeyAddEntry</name><parameter_list>(<parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name> <init>= <expr><call><name>keyHashSlot</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slotToKeys</name> <modifier>*</modifier></type><name>slot_to_keys</name> <init>= <expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name><operator>)</operator><operator>.</operator><name>by_slot</name></name><index>[<expr><name>hashslot</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slot_to_keys</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><name><name>slot_to_keys</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dictEntryNextInSlot</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictEntryPrevInSlot</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictEntryPrevInSlot</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictEntryPrevInSlot</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot_to_keys</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>slotToKeyDelEntry</name><parameter_list>(<parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name> <init>= <expr><call><name>keyHashSlot</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slotToKeys</name> <modifier>*</modifier></type><name>slot_to_keys</name> <init>= <expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name><operator>)</operator><operator>.</operator><name>by_slot</name></name><index>[<expr><name>hashslot</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slot_to_keys</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>dictEntryNextInSlot</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>dictEntryPrevInSlot</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictEntryPrevInSlot</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictEntryNextInSlot</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>slot_to_keys</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot_to_keys</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>slotToKeyReplaceEntry</name><parameter_list>(<parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>dictEntryNextInSlot</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>dictEntryPrevInSlot</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictEntryPrevInSlot</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictEntryNextInSlot</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name> <init>= <expr><call><name>keyHashSlot</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slotToKeys</name> <modifier>*</modifier></type><name>slot_to_keys</name> <init>= <expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name><operator>)</operator><operator>.</operator><name>by_slot</name></name><index>[<expr><name>hashslot</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slot_to_keys</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>slotToKeyInit</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterSlotToKeyMapping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>slotToKeyFlush</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterSlotToKeyMapping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>slotToKeyDestroy</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>unsigned</name> <name>int</name></type> <name>delKeysInSlot</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name><name>server</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name><operator>)</operator><operator>.</operator><name>by_slot</name></name><index>[<expr><name>hashslot</name></expr>]</index><operator>.</operator><name>head</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sdskey</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictEntryNextInSlot</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>createStringObject</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dbDelete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>countKeysInSlot</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><operator>(</operator><operator>*</operator><name><name>server</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name><operator>)</operator><operator>.</operator><name>by_slot</name></name><index>[<expr><name>hashslot</name></expr>]</index><operator>.</operator><name>count</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>slotToChannelUpdate</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name> <init>= <expr><call><name>keyHashSlot</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>indexed</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name><operator>+</operator><literal type="number">2</literal> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>indexed</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>keylen</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>indexed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>hashslot</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indexed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hashslot</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>indexed</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>channel</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots_to_channels</name></name></expr></argument>,<argument><expr><name>indexed</name></expr></argument>,<argument><expr><name>keylen</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots_to_channels</name></name></expr></argument>,<argument><expr><name>indexed</name></expr></argument>,<argument><expr><name>keylen</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>indexed</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>indexed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>slotToChannelAdd</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>channel</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>slotToChannelUpdate</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>slotToChannelDel</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>channel</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>slotToChannelUpdate</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>int</name></type> <name>countChannelsInSlot</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hashslot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>indexed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>indexed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>hashslot</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indexed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hashslot</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>slots_to_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>,<argument><expr><literal type="string">"&gt;="</literal></expr></argument>,<argument><expr><name>indexed</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>.</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>indexed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>iter</name><operator>.</operator><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>indexed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>
</unit>
