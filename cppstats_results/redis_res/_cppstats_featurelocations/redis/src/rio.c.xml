<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/rio.c">














































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioBufferWrite</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioBufferRead</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>off_t</name></type> <name>rioBufferTell</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>rioBufferFlush</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rio</name></type> <name>rioBufferIO</name> <init>= <expr><block>{
<expr><name>rioBufferRead</name></expr>,
<expr><name>rioBufferWrite</name></expr>,
<expr><name>rioBufferTell</name></expr>,
<expr><name>rioBufferFlush</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>rioInitWithBuffer</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>rioBufferIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioFileWrite</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<while>while <condition>(<expr><name>len</name> <operator>!=</operator> <name>nwritten</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nalign</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>towrite</name> <init>= <expr><ternary><condition><expr><name>nalign</name> <operator>&gt;</operator> <name>len</name><operator>-</operator><name>nwritten</name></expr> ?</condition><then> <expr><name>len</name><operator>-</operator><name>nwritten</name></expr> </then><else>: <expr><name>nalign</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name><operator>+</operator><name>nwritten</name></expr></argument>,<argument><expr><name>towrite</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>towrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>+=</operator> <name>towrite</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>processed</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name> <operator>+</operator> <name>nwritten</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>processed</name> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYNC_FILE_RANGE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>sync_file_range</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>processed</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name></expr></argument>,
<argument><expr><name>SYNC_FILE_RANGE_WRITE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>processed</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>sync_file_range</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>processed</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name></expr></argument>, <argument><expr><name>SYNC_FILE_RANGE_WAIT_BEFORE</name><operator>|</operator>
<name>SYNC_FILE_RANGE_WRITE</name><operator>|</operator><name>SYNC_FILE_RANGE_WAIT_AFTER</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>redis_fsync</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioFileRead</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>off_t</name></type> <name>rioFileTell</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ftello</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>rioFileFlush</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rio</name></type> <name>rioFileIO</name> <init>= <expr><block>{
<expr><name>rioFileRead</name></expr>,
<expr><name>rioFileWrite</name></expr>,
<expr><name>rioFileTell</name></expr>,
<expr><name>rioFileFlush</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>rioInitWithFile</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>rioFileIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioConnWrite</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioConnRead</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>avail</name> <operator>&amp;&amp;</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <name>avail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_limit</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_limit</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_so_far</name></name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EOVERFLOW</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffered</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>needs</name> <init>= <expr><name>len</name> <operator>-</operator> <name>buffered</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>toread</name> <init>= <expr><ternary><condition><expr><name>needs</name> <operator>&lt;</operator> <name>PROTO_IOBUF_LEN</name></expr> ?</condition><then> <expr><name>PROTO_IOBUF_LEN</name></expr></then><else>: <expr><name>needs</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>toread</name> <operator>&gt;</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>toread</name> <operator>=</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_limit</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_so_far</name></name> <operator>+</operator> <name>buffered</name> <operator>+</operator> <name>toread</name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_limit</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>toread</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_limit</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_so_far</name></name> <operator>-</operator> <name>buffered</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>connRead</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>conn</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>toread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>retval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connLastErrorRetryable</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsIncrLen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_so_far</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>off_t</name></type> <name>rioConnTell</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_so_far</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>rioConnFlush</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>


<return>return <expr><call><name>rioConnWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rio</name></type> <name>rioConnIO</name> <init>= <expr><block>{
<expr><name>rioConnRead</name></expr>,
<expr><name>rioConnWrite</name></expr>,
<expr><name>rioConnTell</name></expr>,
<expr><name>rioConnFlush</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>void</name></type> <name>rioInitWithConn</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>read_limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>rioConnIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_limit</name></name> <operator>=</operator> <name>read_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>read_so_far</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROTO_IOBUF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsclear</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rioFreeConn</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>remaining</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>remaining</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>remaining</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>remaining</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>conn</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioFdWrite</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doflush</name> <init>= <expr><operator>(</operator><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>PROTO_IOBUF_LEN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rioFdWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PROTO_IOBUF_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>doflush</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doflush</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>nwritten</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>fd</name></name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>nwritten</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><name>nwritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsclear</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioFdRead</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>off_t</name></type> <name>rioFdTell</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>rioFdFlush</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>


<return>return <expr><call><name>rioFdWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rio</name></type> <name>rioFdIO</name> <init>= <expr><block>{
<expr><name>rioFdRead</name></expr>,
<expr><name>rioFdWrite</name></expr>,
<expr><name>rioFdTell</name></expr>,
<expr><name>rioFdFlush</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>rioInitWithFd</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>rioFdIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rioFreeFd</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fd</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>rioGenericUpdateChecksum</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cksum</name></name> <operator>=</operator> <call><name>crc64</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>cksum</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>rioSetAutoSync</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>write</name></name> <operator>!=</operator> <name><name>rioFileIO</name><operator>.</operator><name>write</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>size_t</name></type> <name>rioWriteBulkCount</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><call><name>ll2string</name><argument_list>(<argument><expr><name>cbuf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbuf</name><index>[<expr><name>clen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbuf</name><index>[<expr><name>clen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>cbuf</name></expr></argument>,<argument><expr><name>clen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>clen</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>rioWriteBulkString</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nwritten</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nwritten</name> <operator>=</operator> <call><name>rioWriteBulkCount</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="char">'$'</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>rioWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nwritten</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>rioWriteBulkLongLong</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>lbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>llen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>lbuf</name></expr></argument>,<argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>rioWriteBulkDouble</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>dbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dlen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%.17g"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>dbuf</name></expr></argument>,<argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
