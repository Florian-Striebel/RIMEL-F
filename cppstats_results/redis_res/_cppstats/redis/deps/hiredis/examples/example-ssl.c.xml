<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/examples/example-ssl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hiredis.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hiredis_ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;win32.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisSSLContext</name> <modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisSSLContextError</name></type> <name>ssl_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s &lt;host&gt; &lt;port&gt; &lt;cert&gt; &lt;key&gt; [ca]\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"127.0.0.1"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ca</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisInitOpenSSL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ssl</name> <operator>=</operator> <call><name>redisCreateSSLContext</name><argument_list>(<argument><expr><name>ca</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssl_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ssl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SSL Context error: %s\n"</literal></expr></argument>,
<argument><expr><call><name>redisSSLContextGetError</name><argument_list>(<argument><expr><name>ssl_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">500000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>REDIS_OPTIONS_SET_TCP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>connect_timeout</name></name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connection error: %s\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connection error: can't allocate redis context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redisInitiateSSLWithContext</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Couldn't initialize SSL!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"PING: %s\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SET: %s\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET %b %b"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SET (binary API): %s\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"GET foo: %s\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"INCR counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"INCR counter: %lld\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"INCR counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"INCR counter: %lld\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DEL mylist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"%u"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist element-%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>reply</name><operator>-&gt;</operator><name>elements</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%u) %s\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFreeSSLContext</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
