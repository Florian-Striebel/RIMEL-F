<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/async_private.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EL_ADD_READ</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { refreshTimeout(ctx); if ((ctx)-&gt;ev.addRead) (ctx)-&gt;ev.addRead((ctx)-&gt;ev.data); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EL_DEL_READ</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((ctx)-&gt;ev.delRead) (ctx)-&gt;ev.delRead((ctx)-&gt;ev.data); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EL_ADD_WRITE</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { refreshTimeout(ctx); if ((ctx)-&gt;ev.addWrite) (ctx)-&gt;ev.addWrite((ctx)-&gt;ev.data); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EL_DEL_WRITE</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((ctx)-&gt;ev.delWrite) (ctx)-&gt;ev.delWrite((ctx)-&gt;ev.data); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EL_CLEANUP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((ctx)-&gt;ev.cleanup) (ctx)-&gt;ev.cleanup((ctx)-&gt;ev.data); ctx-&gt;ev.cleanup = NULL; } while(0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>refreshTimeout</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_TIMER_ISSET</name><parameter_list>(<parameter><type><name>tvp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(tvp &amp;&amp; ((tvp)-&gt;tv_sec || (tvp)-&gt;tv_usec))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_EL_TIMER</name><parameter_list>(<parameter><type><name>ac</name></type></parameter>, <parameter><type><name>tvp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((ac)-&gt;ev.scheduleTimer &amp;&amp; REDIS_TIMER_ISSET(tvp)) { (ac)-&gt;ev.scheduleTimer((ac)-&gt;ev.data, *(tvp)); }</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>REDIS_EL_TIMER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>command_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>REDIS_EL_TIMER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>connect_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function_decl><type><name>void</name></type> <name>__redisAsyncDisconnect</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisProcessCallbacks</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
