<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/dict.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_ERR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_NOTUSED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) V)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>dictEntry</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dictEntry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dictEntry</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dictType</name> <block>{
<function_decl><type><name>unsigned</name> <name>int</name></type> (<modifier>*</modifier><name>hashFunction</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>keyDup</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>valDup</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>keyCompare</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>keyDestructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>valDestructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>dictType</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dict</name> <block>{
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sizemask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl>;</decl_stmt>
}</block></struct></type> <name>dict</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dictIterator</name> <block>{
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl>, <modifier>*</modifier><name>nextEntry</name>;</decl_stmt>
}</block></struct></type> <name>dictIterator</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_HT_INITIAL_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictFreeEntryVal</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((ht)-&gt;type-&gt;valDestructor) (ht)-&gt;type-&gt;valDestructor((ht)-&gt;privdata, (entry)-&gt;val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSetHashVal</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>_val_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((ht)-&gt;type-&gt;valDup) entry-&gt;val = (ht)-&gt;type-&gt;valDup((ht)-&gt;privdata, _val_); else entry-&gt;val = (_val_); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictFreeEntryKey</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((ht)-&gt;type-&gt;keyDestructor) (ht)-&gt;type-&gt;keyDestructor((ht)-&gt;privdata, (entry)-&gt;key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSetHashKey</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>_key_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((ht)-&gt;type-&gt;keyDup) entry-&gt;key = (ht)-&gt;type-&gt;keyDup((ht)-&gt;privdata, _key_); else entry-&gt;key = (_key_); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictCompareHashKeys</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>key1</name></type></parameter>, <parameter><type><name>key2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ht)-&gt;type-&gt;keyCompare) ? (ht)-&gt;type-&gt;keyCompare((ht)-&gt;privdata, key1, key2) : (key1) == (key2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictHashKey</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ht)-&gt;type-&gt;hashFunction(key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictGetEntryKey</name><parameter_list>(<parameter><type><name>he</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((he)-&gt;key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictGetEntryVal</name><parameter_list>(<parameter><type><name>he</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((he)-&gt;val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSlots</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ht)-&gt;size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSize</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ht)-&gt;used)</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>dictGenHashFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>dict</name> <modifier>*</modifier></type><name>dictCreate</name><parameter_list>(<parameter><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privDataPtr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dictExpand</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dictAdd</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dictReplace</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dictDelete</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dictRelease</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>dictEntry</name> <modifier>*</modifier></type> <name>dictFind</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>dictIterator</name> <modifier>*</modifier></type><name>dictGetIterator</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>dictNext</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dictReleaseIterator</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
