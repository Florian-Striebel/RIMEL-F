<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/adapters/libev.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ev.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../async.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>redisLibevEvents</name> <block>{
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reading</name></decl>, <name>writing</name>;</decl_stmt>
<decl_stmt><decl><type><name>ev_io</name></type> <name>rev</name></decl>, <name>wev</name>;</decl_stmt>
<decl_stmt><decl><type><name>ev_timer</name></type> <name>timer</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisLibevEvents</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevReadEvent</name><parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>ev_io</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_MULTIPLICITY</name></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>loop</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>revents</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name><name>watcher</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAsyncHandleRead</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevWriteEvent</name><parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>ev_io</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_MULTIPLICITY</name></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>loop</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>revents</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name><name>watcher</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAsyncHandleWrite</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevAddRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>loop</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>reading</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevDelRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>loop</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevAddWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>loop</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>wev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevDelWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>loop</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>wev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevStopTimer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>loop</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_timer_stop</name><argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisLibevDelRead</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisLibevDelWrite</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisLibevStopTimer</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevTimeout</name><parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>ev_timer</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>revents</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAsyncHandleTimeout</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibevSetTimeout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>loop</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ev_is_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ev_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>redisLibevTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000.00</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_timer_again</name><argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>redisLibevAttach</name><parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisLibevEvents</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>redisLibevEvents</name><operator>*</operator><operator>)</operator><call><name>hi_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_MULTIPLICITY</name></expr></cpp:if>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>rev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>wev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>redisLibevAddRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>redisLibevDelRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>redisLibevAddWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>redisLibevDelWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>redisLibevCleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>scheduleTimer</name></name> <operator>=</operator> <name>redisLibevSetTimeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>rev</name></name></expr></argument>,<argument><expr><name>redisLibevReadEvent</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>wev</name></name></expr></argument>,<argument><expr><name>redisLibevWriteEvent</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
