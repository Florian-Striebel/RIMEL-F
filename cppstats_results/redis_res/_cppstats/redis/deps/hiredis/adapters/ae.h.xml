<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/adapters/ae.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ae.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../async.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>redisAeEvents</name> <block>{
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reading</name></decl>, <name>writing</name>;</decl_stmt>
}</block></struct></type> <name>redisAeEvents</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeReadEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>el</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>fd</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAsyncHandleRead</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeWriteEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>el</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>fd</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAsyncHandleWrite</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeAddRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>reading</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>,<argument><expr><name>redisAeReadEvent</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeDelRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeAddWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>,<argument><expr><name>redisAeWriteEvent</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeDelWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAeDelRead</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAeDelWrite</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>redisAeAttach</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><call><name>hi_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>redisAeAddRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>redisAeDelRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>redisAeAddWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>redisAeDelWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>redisAeCleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
