<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/adapters/qt.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSocketNotifier&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../async.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RedisQtAddRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RedisQtDelRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RedisQtAddWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RedisQtDelWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RedisQtCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>class</name></type> <name>RedisQtAdapter</name> <range>: <expr><name>public</name> <name>QObject</name> <block>{
<expr><name>Q_OBJECT</name>
<name>friend</name>
<name>void</name> <macro><name>RedisQtAddRead</name><argument_list>(<argument>void * adapter</argument>)</argument_list></macro> <block>{
<expr><name>RedisQtAdapter</name> <operator>*</operator> <name>a</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>RedisQtAdapter</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>a</name><operator>-&gt;</operator><name>addRead</name></name><argument_list>()</argument_list></call></expr>;
}</block>
<name>friend</name>
<name>void</name> <macro><name>RedisQtDelRead</name><argument_list>(<argument>void * adapter</argument>)</argument_list></macro> <block>{
<expr><name>RedisQtAdapter</name> <operator>*</operator> <name>a</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>RedisQtAdapter</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>a</name><operator>-&gt;</operator><name>delRead</name></name><argument_list>()</argument_list></call></expr>;
}</block>
<name>friend</name>
<name>void</name> <macro><name>RedisQtAddWrite</name><argument_list>(<argument>void * adapter</argument>)</argument_list></macro> <block>{
<expr><name>RedisQtAdapter</name> <operator>*</operator> <name>a</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>RedisQtAdapter</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>a</name><operator>-&gt;</operator><name>addWrite</name></name><argument_list>()</argument_list></call></expr>;
}</block>
<name>friend</name>
<name>void</name> <macro><name>RedisQtDelWrite</name><argument_list>(<argument>void * adapter</argument>)</argument_list></macro> <block>{
<expr><name>RedisQtAdapter</name> <operator>*</operator> <name>a</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>RedisQtAdapter</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>a</name><operator>-&gt;</operator><name>delWrite</name></name><argument_list>()</argument_list></call></expr>;
}</block>
<name>friend</name>
<name>void</name> <macro><name>RedisQtCleanup</name><argument_list>(<argument>void * adapter</argument>)</argument_list></macro> <block>{
<expr><name>RedisQtAdapter</name> <operator>*</operator> <name>a</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>RedisQtAdapter</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>a</name><operator>-&gt;</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;
}</block>
<name>public</name><operator>:</operator>
<call><name>RedisQtAdapter</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator> <name>parent</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>QObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_ctx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>m_write</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block>
<operator>~</operator><macro><name>RedisQtAdapter</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>m_ctx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m_ctx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
int setContext(redisAsyncContext * ac</block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
<expr_stmt/>}</block_content>
m_ctx = ac</block><empty_stmt>;</empty_stmt></if></if_stmt>
<name><name>m_ctx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>this</name></block></block></expr>;
<expr><name><name>m_ctx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>RedisQtAddRead</name></expr>;
<expr><name><name>m_ctx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>RedisQtDelRead</name></expr>;
<expr><name><name>m_ctx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>RedisQtAddWrite</name></expr>;
<expr><name><name>m_ctx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>RedisQtDelWrite</name></expr>;
<expr><name><name>m_ctx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>RedisQtCleanup</name></expr>;
<return>return <expr><name>REDIS_OK</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>
<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>addRead</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_read</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m_read</name> <operator>=</operator> <name>new</name> <call><name>QSocketNotifier</name><argument_list>(<argument><expr><name><name>m_ctx</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>QSocketNotifier</name><operator>::</operator><name>Read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>m_read</name></expr></argument>, <argument><expr><call><name>SIGNAL</name><argument_list>(<argument><expr><call><name>activated</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>SLOT</name><argument_list>(<argument><expr><call><name>read</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>delRead</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_read</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>delete</name></type> <name>m_read</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>addWrite</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_write</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m_write</name> <operator>=</operator> <name>new</name> <call><name>QSocketNotifier</name><argument_list>(<argument><expr><name><name>m_ctx</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>QSocketNotifier</name><operator>::</operator><name>Write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>m_write</name></expr></argument>, <argument><expr><call><name>SIGNAL</name><argument_list>(<argument><expr><call><name>activated</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>SLOT</name><argument_list>(<argument><expr><call><name>write</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>delWrite</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_write</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>delete</name></type> <name>m_write</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m_write</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>delRead</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delWrite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>private</name></type> <name>slots</name><range>:
<expr><name>void</name> <macro><name>read</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>redisAsyncHandleRead</name><argument_list>(<argument><expr><name>m_ctx</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>write</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>redisAsyncHandleWrite</name><argument_list>(<argument><expr><name>m_ctx</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>private</name><operator>:</operator>
<name>redisAsyncContext</name> <operator>*</operator> <name>m_ctx</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSocketNotifier</name> <modifier>*</modifier></type> <name>m_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSocketNotifier</name> <modifier>*</modifier></type> <name>m_write</name></decl>;</decl_stmt>
};
</unit>
