<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/adapters/macosx.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../async.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFSocketRef</name></type> <name>socketRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFRunLoopSourceRef</name></type> <name>sourceRef</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisRunLoop</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>freeRedisRunLoop</name><parameter_list>(<parameter><decl><type><name>RedisRunLoop</name><modifier>*</modifier></type> <name>redisRunLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>redisRunLoop</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>sourceRef</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CFRunLoopSourceInvalidate</name><argument_list>(<argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>sourceRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>sourceRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CFSocketInvalidate</name><argument_list>(<argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>redisRunLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisMacOSAddRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisRunLoop</name> <modifier>*</modifier></type><name>redisRunLoop</name> <init>= <expr><operator>(</operator><name>RedisRunLoop</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFSocketEnableCallBacks</name><argument_list>(<argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name></expr></argument>, <argument><expr><name>kCFSocketReadCallBack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisMacOSDelRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisRunLoop</name> <modifier>*</modifier></type><name>redisRunLoop</name> <init>= <expr><operator>(</operator><name>RedisRunLoop</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFSocketDisableCallBacks</name><argument_list>(<argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name></expr></argument>, <argument><expr><name>kCFSocketReadCallBack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisMacOSAddWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisRunLoop</name> <modifier>*</modifier></type><name>redisRunLoop</name> <init>= <expr><operator>(</operator><name>RedisRunLoop</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFSocketEnableCallBacks</name><argument_list>(<argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name></expr></argument>, <argument><expr><name>kCFSocketWriteCallBack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisMacOSDelWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisRunLoop</name> <modifier>*</modifier></type><name>redisRunLoop</name> <init>= <expr><operator>(</operator><name>RedisRunLoop</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFSocketDisableCallBacks</name><argument_list>(<argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name></expr></argument>, <argument><expr><name>kCFSocketWriteCallBack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisMacOSCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisRunLoop</name> <modifier>*</modifier></type><name>redisRunLoop</name> <init>= <expr><operator>(</operator><name>RedisRunLoop</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>freeRedisRunLoop</name><argument_list>(<argument><expr><name>redisRunLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisMacOSAsyncCallback</name><parameter_list>(<parameter><decl><type><name>CFSocketRef</name> <name>__unused</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>CFSocketCallBackType</name></type> <name>callbackType</name></decl></parameter>, <parameter><decl><type><name>CFDataRef</name> <name>__unused</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <name>__unused</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAsyncContext</name><modifier>*</modifier></type> <name>context</name> <init>= <expr><operator>(</operator><name>redisAsyncContext</name><operator>*</operator><operator>)</operator> <name>info</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>callbackType</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kCFSocketReadCallBack</name></expr>:</case>
<expr_stmt><expr><call><name>redisAsyncHandleRead</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kCFSocketWriteCallBack</name></expr>:</case>
<expr_stmt><expr><call><name>redisAsyncHandleWrite</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>redisMacOSAttach</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncCtx</name></decl></parameter>, <parameter><decl><type><name>CFRunLoopRef</name></type> <name>runLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>redisCtx</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>redisAsyncCtx</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>redisAsyncCtx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RedisRunLoop</name><modifier>*</modifier></type> <name>redisRunLoop</name> <init>= <expr><operator>(</operator><name>RedisRunLoop</name><operator>*</operator><operator>)</operator> <call><name>hi_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RedisRunLoop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>redisRunLoop</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>redisAsyncCtx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redisAsyncCtx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>redisMacOSAddRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redisAsyncCtx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>redisMacOSDelRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redisAsyncCtx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>redisMacOSAddWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redisAsyncCtx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>redisMacOSDelWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redisAsyncCtx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>redisMacOSCleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redisAsyncCtx</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>redisRunLoop</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CFSocketContext</name></type> <name>socketCtx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>redisAsyncCtx</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name> <operator>=</operator> <call><name>CFSocketCreateWithNative</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>redisCtx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
<argument><expr><name>kCFSocketReadCallBack</name> <operator>|</operator> <name>kCFSocketWriteCallBack</name></expr></argument>,
<argument><expr><name>redisMacOSAsyncCallback</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>socketCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>freeRedisRunLoop</name><argument_list>(<argument><expr><name>redisRunLoop</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>sourceRef</name></name> <operator>=</operator> <call><name>CFSocketCreateRunLoopSource</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>socketRef</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>redisRunLoop</name><operator>-&gt;</operator><name>sourceRef</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>freeRedisRunLoop</name><argument_list>(<argument><expr><name>redisRunLoop</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CFRunLoopAddSource</name><argument_list>(<argument><expr><name>runLoop</name></expr></argument>, <argument><expr><name><name>redisRunLoop</name><operator>-&gt;</operator><name>sourceRef</name></name></expr></argument>, <argument><expr><name>kCFRunLoopDefaultMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
