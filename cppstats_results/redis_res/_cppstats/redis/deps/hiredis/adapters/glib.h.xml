<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/adapters/glib.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../async.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>GSource</name></type> <name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GPollFD</name></type> <name>poll_fd</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisSource</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>redis_source_add_read</name> <parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>G_IO_IN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_main_context_wakeup</name><argument_list>(<argument><expr><call><name>g_source_get_context</name><argument_list>(<argument><expr><operator>(</operator><name>GSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>redis_source_del_read</name> <parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>events</name></name> <operator>&amp;=</operator> <operator>~</operator><name>G_IO_IN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_main_context_wakeup</name><argument_list>(<argument><expr><call><name>g_source_get_context</name><argument_list>(<argument><expr><operator>(</operator><name>GSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>redis_source_add_write</name> <parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>G_IO_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_main_context_wakeup</name><argument_list>(<argument><expr><call><name>g_source_get_context</name><argument_list>(<argument><expr><operator>(</operator><name>GSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>redis_source_del_write</name> <parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>events</name></name> <operator>&amp;=</operator> <operator>~</operator><name>G_IO_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_main_context_wakeup</name><argument_list>(<argument><expr><call><name>g_source_get_context</name><argument_list>(<argument><expr><operator>(</operator><name>GSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>redis_source_cleanup</name> <parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redis_source_del_read</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redis_source_del_write</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>g_source_remove_poll</name><argument_list>(<argument><expr><operator>(</operator><name>GSource</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>redis_source_prepare</name> <parameter_list>(<parameter><decl><type><name>GSource</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>timeout_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>redis</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>source</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>timeout_</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>events</name></name> <operator>&amp;</operator> <name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>revents</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>redis_source_check</name> <parameter_list>(<parameter><decl><type><name>GSource</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>redis</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>source</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>events</name></name> <operator>&amp;</operator> <name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>revents</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>redis_source_dispatch</name> <parameter_list>(<parameter><decl><type><name>GSource</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>GSourceFunc</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>redis</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>source</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>G_IO_OUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisAsyncHandleWrite</name><argument_list>(<argument><expr><name><name>redis</name><operator>-&gt;</operator><name>ac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>revents</name></name> <operator>&amp;=</operator> <operator>~</operator><name>G_IO_OUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>G_IO_IN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisAsyncHandleRead</name><argument_list>(<argument><expr><name><name>redis</name><operator>-&gt;</operator><name>ac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>revents</name></name> <operator>&amp;=</operator> <operator>~</operator><name>G_IO_IN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>callback</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>redis_source_finalize</name> <parameter_list>(<parameter><decl><type><name>GSource</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>redis</name> <init>= <expr><operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><name>source</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>g_source_remove_poll</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redis</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GSource</name> <modifier>*</modifier></type>
<name>redis_source_new</name> <parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>GSourceFuncs</name></type> <name>source_funcs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>prepare</name> <operator>=</operator> <name>redis_source_prepare</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>redis_source_check</name></expr>,
<expr><operator>.</operator><name>dispatch</name> <operator>=</operator> <name>redis_source_dispatch</name></expr>,
<expr><operator>.</operator><name>finalize</name> <operator>=</operator> <name>redis_source_finalize</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisSource</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>ac</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>(</operator><name>RedisSource</name> <operator>*</operator><operator>)</operator><call><name>g_source_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source_funcs</name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>ac</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name><operator>.</operator><name>revents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_source_add_poll</name><argument_list>(<argument><expr><operator>(</operator><name>GSource</name> <operator>*</operator><operator>)</operator><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>poll_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>redis_source_add_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>redis_source_del_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>redis_source_add_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>redis_source_del_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>redis_source_cleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>GSource</name> <operator>*</operator><operator>)</operator><name>source</name></expr>;</return>
</block_content>}</block></function>
</unit>
