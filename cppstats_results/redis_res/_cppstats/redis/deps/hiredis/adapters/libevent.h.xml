<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/adapters/libevent.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../async.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_LIBEVENT_DELETED</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_LIBEVENT_ENTERED</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>redisLibeventEvents</name> <block>{
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisLibeventEvents</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventDestroy</name><parameter_list>(<parameter><decl><type><name>redisLibeventEvents</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>fd</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisLibeventEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibeventEvents</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>REDIS_LIBEVENT_ENTERED</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DELETED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (e-&gt;state &amp; REDIS_LIBEVENT_DELETED) {redisLibeventDestroy(e);return; }</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event</name> <operator>&amp;</operator> <name>EV_TIMEOUT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>REDIS_LIBEVENT_DELETED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisAsyncHandleTimeout</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_DELETED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event</name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>context</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>REDIS_LIBEVENT_DELETED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisAsyncHandleRead</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_DELETED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>context</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>REDIS_LIBEVENT_DELETED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisAsyncHandleWrite</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_DELETED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_LIBEVENT_ENTERED</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_DELETED</name></cpp:undef>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventUpdate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isRemove</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibeventEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibeventEvents</name> <operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>tv</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>isRemove</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flag</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_assign</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>,
<argument><expr><name>redisLibeventHandler</name></expr></argument>, <argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventAddRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>redisLibeventUpdate</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventDelRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>redisLibeventUpdate</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventAddWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>redisLibeventUpdate</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventDelWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>redisLibeventUpdate</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibeventEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibeventEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>ev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>REDIS_LIBEVENT_ENTERED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>REDIS_LIBEVENT_DELETED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>redisLibeventDestroy</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisLibeventSetTimeout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisLibeventEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisLibeventEvents</name> <operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>flags</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>tv</name></name> <operator>=</operator> <name>tv</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisLibeventUpdate</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>redisLibeventAttach</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisLibeventEvents</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>redisLibeventEvents</name><operator>*</operator><operator>)</operator><call><name>hi_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>redisLibeventAddRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>redisLibeventDelRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>redisLibeventAddWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>redisLibeventDelWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>redisLibeventCleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>scheduleTimer</name></name> <operator>=</operator> <name>redisLibeventSetTimeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>ev</name></name> <operator>=</operator> <call><name>event_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name></expr></argument>, <argument><expr><name>redisLibeventHandler</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
