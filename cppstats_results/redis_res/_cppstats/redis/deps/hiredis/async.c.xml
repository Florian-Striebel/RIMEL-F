<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hiredis/async.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async_private.h"</cpp:file></cpp:include>
<function_decl><type><name>int</name></type> <name>__redisAppendCommand</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__redisSetError</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>callbackHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>,
<argument><expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>hisds</name><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>callbackValDup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>privdata</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>dup</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dup</name> <operator>=</operator> <call><name>hi_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dup</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>callbackKeyCompare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>privdata</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <call><name>hi_sdslen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>hisds</name><operator>)</operator><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>hi_sdslen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>hisds</name><operator>)</operator><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key1</name></expr></argument>,<argument><expr><name>key2</name></expr></argument>,<argument><expr><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>callbackKeyDestructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>privdata</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><operator>(</operator><name>hisds</name><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>callbackValDestructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>privdata</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>dictType</name></type> <name>callbackDict</name> <init>= <expr><block>{
<expr><name>callbackHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>callbackValDup</name></expr>,
<expr><name>callbackKeyCompare</name></expr>,
<expr><name>callbackKeyDestructor</name></expr>,
<expr><name>callbackValDestructor</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncInitialize</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>channels</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>patterns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>callbackDict</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>patterns</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>callbackDict</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>patterns</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>hi_realloc</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisAsyncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_CONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>errstr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>dataCleanup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>scheduleTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>onDisconnect</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>replies</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>replies</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>invalid</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>invalid</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>patterns</name></name> <operator>=</operator> <name>patterns</name></expr>;</expr_stmt>
<return>return <expr><name>ac</name></expr>;</return>
<label><name>oom</name>:</label>
<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>patterns</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisAsyncCopyError</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ac</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>errstr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnectWithOptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>myOptions</name> <init>= <expr><operator>*</operator><name>options</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>myOptions</name><operator>.</operator><name>push_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myOptions</name><operator>.</operator><name>options</name></name> <operator>|=</operator> <name>REDIS_OPT_NO_PUSH_AUTOFREE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myOptions</name><operator>.</operator><name>options</name></name> <operator>|=</operator> <name>REDIS_OPT_NONBLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>myOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>redisAsyncInitialize</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redisAsyncSetPushCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>myOptions</name><operator>.</operator><name>async_push_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__redisAsyncCopyError</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ac</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>REDIS_OPTIONS_SET_TCP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>redisAsyncConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnectBind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>REDIS_OPTIONS_SET_TCP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>endpoint</name><operator>.</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <name>source_addr</name></expr>;</expr_stmt>
<return>return <expr><call><name>redisAsyncConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnectBindWithReuse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>REDIS_OPTIONS_SET_TCP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>options</name></name> <operator>|=</operator> <name>REDIS_OPT_REUSEADDR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>endpoint</name><operator>.</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <name>source_addr</name></expr>;</expr_stmt>
<return>return <expr><call><name>redisAsyncConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnectUnix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>REDIS_OPTIONS_SET_UNIX</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>redisAsyncConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>redisAsyncSetConnectCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisConnectCallback</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_EL_ADD_WRITE</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>redisAsyncSetDisconnectCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisDisconnectCallback</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>onDisconnect</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>onDisconnect</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__redisPushCallback</name><parameter_list>(<parameter><decl><type><name>redisCallbackList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>hi_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR_OOM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>source</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cb</name></expr></argument>,<argument><expr><name>source</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__redisShiftCallback</name><parameter_list>(<parameter><decl><type><name>redisCallbackList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target</name></expr></argument>,<argument><expr><name>cb</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisRunCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>fn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_IN_CALLBACK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>privdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_IN_CALLBACK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisRunPushCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>push_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_IN_CALLBACK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>push_cb</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_IN_CALLBACK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisAsyncFree</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCallback</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>__redisShiftCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>replies</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisRunCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><call><name>__redisShiftCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>invalid</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisRunCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisRunCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><call><name>dictGetEntryVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>patterns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisRunCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><call><name>dictGetEntryVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_EL_CLEANUP</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>onDisconnect</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_CONNECTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_FREEING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>onDisconnect</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>onDisconnect</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>REDIS_OK</name></expr> </then><else>: <expr><name>REDIS_ERR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>dataCleanup</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>dataCleanup</name></name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>redisAsyncFree</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_FREEING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_IN_CALLBACK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisAsyncFree</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>__redisAsyncDisconnect</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__redisAsyncCopyError</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>__redisShiftCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>replies</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_DISCONNECTING</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>_EL_CLEANUP</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_NO_AUTO_FREE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncFree</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>redisAsyncDisconnect</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_DISCONNECTING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_NO_AUTO_FREE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_IN_CALLBACK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>replies</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__redisGetSubscribeCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>dstcb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pvariant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hisds</name></type> <name>sname</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_PUSH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>elements</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stype</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pvariant</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>tolower</name><argument_list>(<argument><expr><name><name>stype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pvariant</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>callbacks</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>patterns</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>callbacks</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>,<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>dictGetEntryVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>stype</name><operator>+</operator><name>pvariant</name></expr></argument>,<argument><expr><literal type="string">"subscribe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>pending_subs</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstcb</name></expr></argument>,<argument><expr><name>cb</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dstcb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>stype</name><operator>+</operator><name>pvariant</name></expr></argument>,<argument><expr><literal type="string">"unsubscribe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>pending_subs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>,<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>patterns</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_SUBSCRIBED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>__redisShiftCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>invalid</name></name></expr></argument>,<argument><expr><name>dstcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
<label><name>oom</name>:</label>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></argument>, <argument><expr><name>REDIS_ERR_OOM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>redisIsSpontaneousPushReply</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(redisIsPushReply(r) &amp;&amp; !redisIsSubscribeReply(r))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>redisIsSubscribeReply</name><parameter_list>(<parameter><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>elements</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>REDIS_REPLY_STRING</name> <operator>||</operator>
<name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"subscribe"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>redisProcessCallbacks</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCallback</name></type> <name>cb</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reply</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_DISCONNECTING</name> <operator>&amp;&amp;</operator> <call><name>hi_sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>replies</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_MONITORING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisPushCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>replies</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redisIsSpontaneousPushReply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisRunPushCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>freeObject</name></name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__redisShiftCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>replies</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>REDIS_ERR_OTHER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>freeObject</name></name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_SUBSCRIBED</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_MONITORING</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_SUBSCRIBED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisGetSubscribeCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>.</operator><name>fn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisRunCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>freeObject</name></name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_FREEING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncFree</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>freeObject</name></name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisAsyncHandleConnectFailure</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>REDIS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__redisAsyncHandleConnect</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>completed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redisCheckConnectDone</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>completed</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisCheckSocketError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__redisAsyncHandleConnectFailure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>completed</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>connection_type</name></name> <operator>==</operator> <name>REDIS_CONN_TCP</name> <operator>&amp;&amp;</operator>
<call><name>redisSetTcpNoDelay</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncHandleConnectFailure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_CONNECTED</name></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>redisAsyncRead</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redisBufferRead</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>_EL_ADD_READ</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisProcessCallbacks</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>redisAsyncHandleRead</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_CONNECTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__redisAsyncHandleConnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_CONNECTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>async_read</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>redisAsyncWrite</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redisBufferWrite</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_EL_ADD_WRITE</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_EL_DEL_WRITE</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>_EL_ADD_READ</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>redisAsyncHandleWrite</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_CONNECTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__redisAsyncHandleConnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_CONNECTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>async_write</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>redisAsyncHandleTimeout</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCallback</name></type> <name>cb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_CONNECTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>replies</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_TIMEOUT</name></expr></argument>, <argument><expr><literal type="string">"Timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_CONNECTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>onConnect</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>REDIS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>__redisShiftCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>replies</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisRunCallback</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nextArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__redisAsyncCommand</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCallback</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dict</name></name> <modifier>*</modifier></type><name>cbdict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>existcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pvariant</name></decl>, <decl><type ref="prev"/><name>hasnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>astr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>, <decl><type ref="prev"/><name>alen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hisds</name></type> <name>sname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>REDIS_DISCONNECTING</name> <operator>|</operator> <name>REDIS_FREEING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>privdata</name></name> <operator>=</operator> <name>privdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>pending_subs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>nextArgument</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasnext</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pvariant</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>tolower</name><argument_list>(<argument><expr><name><name>cstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cstr</name> <operator>+=</operator> <name>pvariant</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>-=</operator> <name>pvariant</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hasnext</name> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>,<argument><expr><literal type="string">"subscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_SUBSCRIBED</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>nextArgument</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>astr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>alen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><name>astr</name></expr></argument>,<argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pvariant</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbdict</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>patterns</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cbdict</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name>cbdict</name></expr></argument>,<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>existcb</name> <operator>=</operator> <call><name>dictGetEntryVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>pending_subs</name></name> <operator>=</operator> <name><name>existcb</name><operator>-&gt;</operator><name>pending_subs</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dictReplace</name><argument_list>(<argument><expr><name>cbdict</name></expr></argument>,<argument><expr><name>sname</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>,<argument><expr><literal type="string">"unsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_SUBSCRIBED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>,<argument><expr><literal type="string">"monitor\r\n"</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_MONITORING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__redisPushCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>replies</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_SUBSCRIBED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisPushCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>invalid</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__redisPushCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>replies</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>__redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_EL_ADD_WRITE</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
<label><name>oom</name>:</label>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></argument>, <argument><expr><name>REDIS_ERR_OOM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>redisvAsyncCommand</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisvFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>format</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>__redisAsyncCommand</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><name>fn</name></expr></argument>,<argument><expr><name>privdata</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>redisAsyncCommand</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>redisvAsyncCommand</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><name>fn</name></expr></argument>,<argument><expr><name>privdata</name></expr></argument>,<argument><expr><name>format</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>redisAsyncCommandArgv</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>argvlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>hisds</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatSdsCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>__redisAsyncCommand</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><name>fn</name></expr></argument>,<argument><expr><name>privdata</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>redisAsyncFormattedCommand</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>__redisAsyncCommand</name><argument_list>(<argument><expr><name>ac</name></expr></argument>,<argument><expr><name>fn</name></expr></argument>,<argument><expr><name>privdata</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>redisAsyncPushFn</name> <modifier>*</modifier></type><name>redisAsyncSetPushCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisAsyncPushFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAsyncPushFn</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>push_cb</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>push_cb</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>redisAsyncSetTimeout</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>command_timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>command_timeout</name></name> <operator>=</operator> <call><name>hi_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>command_timeout</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>REDIS_ERR_OOM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__redisAsyncCopyError</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>!=</operator> <name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>command_timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>||</operator>
<name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>!=</operator> <name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>command_timeout</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>command_timeout</name></name> <operator>=</operator> <name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
