<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hdr_histogram/hdr_histogram.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<struct>struct <name>hdr_histogram</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>lowest_trackable_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>highest_trackable_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>unit_magnitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>significant_figures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sub_bucket_half_count_magnitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sub_bucket_half_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sub_bucket_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sub_bucket_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>bucket_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>min_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>normalizing_index_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>conversion_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>counts_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>counts</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>int</name></type> <name>hdr_init</name><parameter_list>(
<parameter><decl><type><name>int64_t</name></type> <name>lowest_trackable_value</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>highest_trackable_value</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>significant_figures</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hdr_alloc</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>highest_trackable_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>significant_figures</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>hdr_get_memory_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_record_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_record_value_atomic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_record_values</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_record_values_atomic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_record_corrected_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>expexcted_interval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_record_corrected_value_atomic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>expexcted_interval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_record_corrected_values</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>expected_interval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_record_corrected_values_atomic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>expected_interval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>from</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_add_while_correcting_for_coordinated_omission</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>expected_interval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_min</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_max</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_value_at_percentile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>percentile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>hdr_stddev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>hdr_mean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_values_are_equivalent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_lowest_equivalent_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_count_at_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_count_at_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_value_at_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<struct>struct <name>hdr_iter_percentiles</name>
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>seen_last_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ticks_per_half_distance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>percentile_to_iterate_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>percentile</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>hdr_iter_recorded</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>count_added_in_this_iteration_step</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>hdr_iter_linear</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>value_units_per_bucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>count_added_in_this_iteration_step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_value_reporting_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_value_reporting_level_lowest_equivalent</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>hdr_iter_log</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>log_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>count_added_in_this_iteration_step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_value_reporting_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_value_reporting_level_lowest_equivalent</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>hdr_iter</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>counts_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cumulative_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>highest_equivalent_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lowest_equivalent_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>median_equivalent_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>value_iterated_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>value_iterated_to</name></decl>;</decl_stmt>
<union>union
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hdr_iter_percentiles</name></name></type> <name>percentiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hdr_iter_recorded</name></name></type> <name>recorded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hdr_iter_linear</name></name></type> <name>linear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hdr_iter_log</name></name></type> <name>log</name></decl>;</decl_stmt>
}</block> <decl><name>specifics</name></decl>;</union>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier> <name>_next_fp</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_iter</name></name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>
<function_decl><type><name>void</name></type> <name>hdr_iter_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_iter</name></name><modifier>*</modifier></type> <name>iter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_iter_percentile_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_iter</name></name><modifier>*</modifier></type> <name>iter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ticks_per_half_distance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_iter_recorded_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_iter</name></name><modifier>*</modifier></type> <name>iter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_iter_linear_init</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>hdr_iter</name></name><modifier>*</modifier></type> <name>iter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>value_units_per_bucket</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_iter_linear_set_value_units_per_bucket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_iter</name></name><modifier>*</modifier></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value_units_per_bucket</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_iter_log_init</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>hdr_iter</name></name><modifier>*</modifier></type> <name>iter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>value_units_first_bucket</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>log_base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hdr_iter_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_iter</name></name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <type><enum>enum
<block>{
<decl><name>CLASSIC</name></decl>,
<decl><name>CSV</name></decl>
}</block></enum></type> <name>format_type</name>;</typedef>
<function_decl><type><name>int</name></type> <name>hdr_percentiles_print</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ticks_per_half_distance</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>value_scale</name></decl></parameter>, <parameter><decl><type><name>format_type</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl>
<struct>struct <name>hdr_histogram_bucket_config</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>lowest_trackable_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>highest_trackable_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>unit_magnitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>significant_figures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sub_bucket_half_count_magnitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sub_bucket_half_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sub_bucket_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sub_bucket_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>bucket_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>counts_len</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>int</name></type> <name>hdr_calculate_bucket_config</name><parameter_list>(
<parameter><decl><type><name>int64_t</name></type> <name>lowest_trackable_value</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>highest_trackable_value</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>significant_figures</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>hdr_histogram_bucket_config</name></name><modifier>*</modifier></type> <name>cfg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_init_preallocated</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hdr_histogram_bucket_config</name></name><modifier>*</modifier></type> <name>cfg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_size_of_equivalent_value_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_next_non_equivalent_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>hdr_median_equivalent_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdr_reset_internal_counters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
