<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/hdr_histogram/hdr_atomic.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name> <name>__inline</name> <modifier>*</modifier></type> <name>hdr_atomic_load_pointer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_ReadBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>pointer</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hdr_atomic_store_pointer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pointer</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_WriteBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pointer</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int64_t</name> <name>__inline</name></type> <name>hdr_atomic_load_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_ReadBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>field</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <name>__inline</name></type> <name>hdr_atomic_store_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_WriteBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>field</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int64_t</name> <name>__inline</name></type> <name>hdr_atomic_exchange_64</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_InterlockedExchange64</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int64_t</name></type> <name>comparand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>initial_value</name> <init>= <expr><operator>*</operator><name>field</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>comparand</name> <operator>=</operator> <name>initial_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initial_value</name> <operator>=</operator> <call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>comparand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>comparand</name> <operator>!=</operator> <name>initial_value</name></expr>)</condition>;</do>
<return>return <expr><name>initial_value</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int64_t</name> <name>__inline</name></type> <name>hdr_atomic_add_fetch_64</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_InterlockedExchangeAdd64</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>value</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int64_t</name></type> <name>comparand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>initial_value</name> <init>= <expr><operator>*</operator><name>field</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>comparand</name> <operator>=</operator> <name>initial_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initial_value</name> <operator>=</operator> <call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>comparand</name> <operator>+</operator> <name>value</name></expr></argument>, <argument><expr><name>comparand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>comparand</name> <operator>!=</operator> <name>initial_value</name></expr>)</condition>;</do>
<return>return <expr><name>initial_value</name> <operator>+</operator> <name>value</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name> <name>__inline</name></type> <name>hdr_atomic_compare_exchange_64</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>desired</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><name>expected</name> <operator>==</operator> <call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>desired</name></expr></argument>, <argument><expr><operator>*</operator><name>expected</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hdr_atomic_load_pointer</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_load_n(x, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hdr_atomic_store_pointer</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_store_n(f,v, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hdr_atomic_load_64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_load_n(x, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hdr_atomic_store_64</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_store_n(f,v, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hdr_atomic_exchange_64</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_exchange_n(f,i, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hdr_atomic_add_fetch_64</name><parameter_list>(<parameter><type><name>field</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_add_fetch(field, value, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hdr_atomic_compare_exchange_64</name><parameter_list>(<parameter><type><name>field</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_compare_exchange_n(field, expected, desired, false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name><modifier>*</modifier></type> <name>hdr_atomic_load_pointer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<asm>asm <specifier>volatile</specifier> ("" ::: "memory");</asm>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hdr_atomic_store_pointer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pointer</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<asm>asm <specifier>volatile</specifier> ("lock; xchgq %0, %1" : "+q" (value), "+m" (*pointer));</asm>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>hdr_atomic_load_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>field</name></expr></init></decl>;</decl_stmt>
<asm>asm <specifier>volatile</specifier> ("" ::: "memory");</asm>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hdr_atomic_store_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<asm>asm <specifier>volatile</specifier> ("lock; xchgq %0, %1" : "+q" (value), "+m" (*field));</asm>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>hdr_atomic_exchange_64</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<asm>asm <specifier>volatile</specifier> ("lock; xchgq %1, %2" : "=r" (result), "+q" (value), "+m" (*field));</asm>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>hdr_atomic_add_fetch_64</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>hdr_atomic_compare_exchange_64</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>desired</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>original</name></decl>;</decl_stmt>
<asm>asm <specifier>volatile</specifier>( "lock; cmpxchgq %2, %1" : "=a"(original), "+m"(*field) : "q"(desired), "0"(*expected));</asm>
<return>return <expr><name>original</name> <operator>==</operator> <operator>*</operator><name>expected</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unable to determine atomic operations for your platform"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
