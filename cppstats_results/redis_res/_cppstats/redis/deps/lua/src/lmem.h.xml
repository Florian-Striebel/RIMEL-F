<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/lua/src/lmem.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llimits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMERRMSG</name></cpp:macro> <cpp:value>"not enough memory"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_reallocv</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>on</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cast(size_t, (n)+1) &lt;= MAX_SIZET/(e)) ? luaM_realloc_(L, (b), (on)*(e), (n)*(e)) : luaM_toobig(L))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_freemem</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaM_realloc_(L, (b), (s), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_free</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaM_realloc_(L, (b), sizeof(*(b)), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_freearray</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaM_reallocv(L, (b), n, 0, sizeof(t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_malloc</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaM_realloc_(L, NULL, 0, (t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_new</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cast(t *, luaM_malloc(L, sizeof(t)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_newvector</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cast(t *, luaM_reallocv(L, NULL, 0, n, sizeof(t)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_growvector</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>nelems</name></type></parameter>,<parameter><type><name>size</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>limit</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((nelems)+1 &gt; (size)) ((v)=cast(t *, luaM_growaux_(L,v,&amp;(size),sizeof(t),limit,e)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaM_reallocvector</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>v</name></type></parameter>,<parameter><type><name>oldn</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v)=cast(t *, luaM_reallocv(L, v, oldn, n, sizeof(t))))</cpp:value></cpp:define>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name> <modifier>*</modifier></type><name>luaM_realloc_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oldsize</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name> <modifier>*</modifier></type><name>luaM_toobig</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name> <modifier>*</modifier></type><name>luaM_growaux_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size_elem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errormsg</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
