<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/lua/src/lstate.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzio.h"</cpp:file></cpp:include>
<struct_decl>struct <name>lua_longjmp</name>;</struct_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gt</name><parameter_list>(<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;L-&gt;l_gt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>registry</name><parameter_list>(<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;G(L)-&gt;l_registry)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_STACK</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASIC_CI_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASIC_STACK_SIZE</name></cpp:macro> <cpp:value>(2*LUA_MINSTACK)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>stringtable</name> <block>{
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_int32</name></type> <name>nuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>stringtable</name>;</typedef>
<typedef>typedef <type><struct>struct <name>CallInfo</name> <block>{
<decl_stmt><decl><type><name>StkId</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StkId</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StkId</name></type> <name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Instruction</name> <modifier>*</modifier></type><name>savedpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nresults</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tailcalls</name></decl>;</decl_stmt>
}</block></struct></type> <name>CallInfo</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curr_func</name><parameter_list>(<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(clvalue(L-&gt;ci-&gt;func))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ci_func</name><parameter_list>(<parameter><type><name>ci</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(clvalue((ci)-&gt;func))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_isLua</name><parameter_list>(<parameter><type><name>ci</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!ci_func(ci)-&gt;c.isC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isLua</name><parameter_list>(<parameter><type><name>ci</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttisfunction((ci)-&gt;func) &amp;&amp; f_isLua(ci))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>global_State</name> <block>{
<decl_stmt><decl><type><name>stringtable</name></type> <name>strt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_Alloc</name></type> <name>frealloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>currentwhite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>gcstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sweepstrgc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>rootgc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>sweepgc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>gray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>grayagain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>weak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>tmudata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mbuffer</name></type> <name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_mem</name></type> <name>GCthreshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_mem</name></type> <name>totalbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_mem</name></type> <name>estimate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_mem</name></type> <name>gcdept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gcpause</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gcstepmul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_CFunction</name></type> <name>panic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TValue</name></type> <name>l_registry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_State</name></name> <modifier>*</modifier></type><name>mainthread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UpVal</name></type> <name>uvhead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Table</name></name> <modifier>*</modifier></type><name><name>mt</name><index>[<expr><name>NUM_TAGS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name><name>tmname</name><index>[<expr><name>TM_N</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>global_State</name>;</typedef>
<struct>struct <name>lua_State</name> <block>{
<expr_stmt><expr><name>CommonHeader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StkId</name></type> <name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StkId</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>l_G</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Instruction</name> <modifier>*</modifier></type><name>savedpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StkId</name></type> <name>stack_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StkId</name></type> <name>stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>end_ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>base_ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stacksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>nCcalls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>baseCcalls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>hookmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>allowhook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>basehookcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hookcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_Hook</name></type> <name>hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TValue</name></type> <name>l_gt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TValue</name></type> <name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>openupval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>gclist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_longjmp</name></name> <modifier>*</modifier></type><name>errorJmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>errfunc</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(L-&gt;l_G)</cpp:value></cpp:define>
<union>union <name>GCObject</name> <block>{
<decl_stmt><decl><type><name>GCheader</name></type> <name>gch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>TString</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>Udata</name></name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>Closure</name></name></type> <name>cl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Table</name></name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Proto</name></name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>UpVal</name></name></type> <name>uv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_State</name></name></type> <name>th</name></decl>;</decl_stmt>
}</block>;</union>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rawgco2ts</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp((o)-&gt;gch.tt == LUA_TSTRING, &amp;((o)-&gt;ts))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gco2ts</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;rawgco2ts(o)-&gt;tsv)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rawgco2u</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp((o)-&gt;gch.tt == LUA_TUSERDATA, &amp;((o)-&gt;u))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gco2u</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;rawgco2u(o)-&gt;uv)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gco2cl</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp((o)-&gt;gch.tt == LUA_TFUNCTION, &amp;((o)-&gt;cl))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gco2h</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp((o)-&gt;gch.tt == LUA_TTABLE, &amp;((o)-&gt;h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gco2p</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp((o)-&gt;gch.tt == LUA_TPROTO, &amp;((o)-&gt;p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gco2uv</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp((o)-&gt;gch.tt == LUA_TUPVAL, &amp;((o)-&gt;uv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ngcotouv</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp((o) == NULL || (o)-&gt;gch.tt == LUA_TUPVAL, &amp;((o)-&gt;uv))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gco2th</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp((o)-&gt;gch.tt == LUA_TTHREAD, &amp;((o)-&gt;th))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obj2gco</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(GCObject *, (v)))</cpp:value></cpp:define>
<function_decl><type><name>LUAI_FUNC</name> <name>lua_State</name> <modifier>*</modifier></type><name>luaE_newthread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaE_freethread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
