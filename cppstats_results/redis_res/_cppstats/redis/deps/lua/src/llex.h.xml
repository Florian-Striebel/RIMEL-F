<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/lua/src/llex.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzio.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_RESERVED</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_LEN</name></cpp:macro> <cpp:value>(sizeof("function")/sizeof(char))</cpp:value></cpp:define>
<enum>enum <name>RESERVED</name> <block>{
<decl><name>TK_AND</name> <init>= <expr><name>FIRST_RESERVED</name></expr></init></decl>, <decl><name>TK_BREAK</name></decl>,
<decl><name>TK_DO</name></decl>, <decl><name>TK_ELSE</name></decl>, <decl><name>TK_ELSEIF</name></decl>, <decl><name>TK_END</name></decl>, <decl><name>TK_FALSE</name></decl>, <decl><name>TK_FOR</name></decl>, <decl><name>TK_FUNCTION</name></decl>,
<decl><name>TK_IF</name></decl>, <decl><name>TK_IN</name></decl>, <decl><name>TK_LOCAL</name></decl>, <decl><name>TK_NIL</name></decl>, <decl><name>TK_NOT</name></decl>, <decl><name>TK_OR</name></decl>, <decl><name>TK_REPEAT</name></decl>,
<decl><name>TK_RETURN</name></decl>, <decl><name>TK_THEN</name></decl>, <decl><name>TK_TRUE</name></decl>, <decl><name>TK_UNTIL</name></decl>, <decl><name>TK_WHILE</name></decl>,
<decl><name>TK_CONCAT</name></decl>, <decl><name>TK_DOTS</name></decl>, <decl><name>TK_EQ</name></decl>, <decl><name>TK_GE</name></decl>, <decl><name>TK_LE</name></decl>, <decl><name>TK_NE</name></decl>, <decl><name>TK_NUMBER</name></decl>,
<decl><name>TK_NAME</name></decl>, <decl><name>TK_STRING</name></decl>, <decl><name>TK_EOS</name></decl>
}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_RESERVED</name></cpp:macro> <cpp:value>(cast(int, TK_WHILE-FIRST_RESERVED+1))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>LUAI_DATA</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaX_tokens</name> <index>[]</index></name></decl>;</decl_stmt>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>lua_Number</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
}</block></union></type> <name>SemInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>Token</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SemInfo</name></type> <name>seminfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>Token</name>;</typedef>
<typedef>typedef <type><struct>struct <name>LexState</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Token</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Token</name></type> <name>lookahead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FuncState</name></name> <modifier>*</modifier></type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_State</name></name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mbuffer</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>decpoint</name></decl>;</decl_stmt>
}</block></struct></type> <name>LexState</name>;</typedef>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaX_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaX_setinput</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>,
<parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>TString</name> <modifier>*</modifier></type><name>luaX_newstring</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaX_next</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaX_lookahead</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaX_lexerror</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaX_syntaxerror</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaX_token2str</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
