<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/lua/src/lualib.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_FILEHANDLE</name></cpp:macro> <cpp:value>"FILE*"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_COLIBNAME</name></cpp:macro> <cpp:value>"coroutine"</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_base</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_TABLIBNAME</name></cpp:macro> <cpp:value>"table"</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_table</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_IOLIBNAME</name></cpp:macro> <cpp:value>"io"</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_io</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_OSLIBNAME</name></cpp:macro> <cpp:value>"os"</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_os</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_STRLIBNAME</name></cpp:macro> <cpp:value>"string"</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_string</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_MATHLIBNAME</name></cpp:macro> <cpp:value>"math"</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_math</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_DBLIBNAME</name></cpp:macro> <cpp:value>"debug"</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_debug</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LOADLIBNAME</name></cpp:macro> <cpp:value>"package"</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_package</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_openlibs</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lua_assert</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_assert</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
