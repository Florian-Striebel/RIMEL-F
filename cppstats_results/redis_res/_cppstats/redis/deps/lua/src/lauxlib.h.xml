<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/lua/src/lauxlib.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_COMPAT_GETN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_getn</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_setn</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_getn</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)lua_objlen(L, i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_setn</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_COMPAT_OPENLIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaI_openlib</name></cpp:macro> <cpp:value>luaL_openlib</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_ERRFILE</name></cpp:macro> <cpp:value>(LUA_ERRERR+1)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>luaL_Reg</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_CFunction</name></type> <name>func</name></decl>;</decl_stmt>
}</block></struct></type> <name>luaL_Reg</name>;</typedef>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaI_openlib</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>luaL_Reg</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_register</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>luaL_Reg</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_getmetafield</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_callmeta</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_typerror</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_argerror</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numarg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extramsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<name>luaL_checklstring</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numArg</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<name>luaL_optlstring</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numArg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>lua_Number</name></type> (<name>luaL_checknumber</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>lua_Number</name></type> (<name>luaL_optnumber</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>def</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>lua_Integer</name></type> (<name>luaL_checkinteger</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>lua_Integer</name></type> (<name>luaL_optinteger</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,
<parameter><decl><type><name>lua_Integer</name></type> <name>def</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_checkstack</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_checktype</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_checkany</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_newmetatable</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name> <modifier>*</modifier></type>(<name>luaL_checkudata</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ud</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_where</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_error</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_checkoption</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>lst</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_ref</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_unref</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_loadfile</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_loadbuffer</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaL_loadstring</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>lua_State</name> <modifier>*</modifier></type>(<name>luaL_newstate</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<name>luaL_gsub</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<name>luaL_findtable</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>szhint</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_argcheck</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>,<parameter><type><name>numarg</name></type></parameter>,<parameter><type><name>extramsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)((cond) || luaL_argerror(L, (numarg), (extramsg))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_checkstring</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(luaL_checklstring(L, (n), NULL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_optstring</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(luaL_optlstring(L, (n), (d), NULL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_checkint</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)luaL_checkinteger(L, (n)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_optint</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)luaL_optinteger(L, (n), (d)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_checklong</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long)luaL_checkinteger(L, (n)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_optlong</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long)luaL_optinteger(L, (n), (d)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_typename</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_typename(L, lua_type(L,(i)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_dofile</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_dostring</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_getmetatable</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lua_getfield(L, LUA_REGISTRYINDEX, (n)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_opt</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lua_isnoneornil(L,(n)) ? (d) : f(L,(n)))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>luaL_Buffer</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lvl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>LUAL_BUFFERSIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>luaL_Buffer</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_addchar</name><parameter_list>(<parameter><type><name>B</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)((B)-&gt;p &lt; ((B)-&gt;buffer+LUAL_BUFFERSIZE) || luaL_prepbuffer(B)), (*(B)-&gt;p++ = (char)(c)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_putchar</name><parameter_list>(<parameter><type><name>B</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaL_addchar(B,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_addsize</name><parameter_list>(<parameter><type><name>B</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((B)-&gt;p += (n))</cpp:value></cpp:define>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_buffinit</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>char</name> <modifier>*</modifier></type>(<name>luaL_prepbuffer</name>) <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_addlstring</name>) <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_addstring</name>) <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_addvalue</name>) <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>void</name></type> (<name>luaL_pushresult</name>) <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_NOREF</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_REFNIL</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_ref</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lock) ? luaL_ref(L, LUA_REGISTRYINDEX) : (lua_pushstring(L, "unlocked references are obsolete"), lua_error(L), 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_unref</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaL_unref(L, LUA_REGISTRYINDEX, (ref))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_getref</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_rawgeti(L, LUA_REGISTRYINDEX, (ref))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_reg</name></cpp:macro> <cpp:value>luaL_Reg</cpp:value></cpp:define>
</unit>
