<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/lua/src/lopcodes.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llimits.h"</cpp:file></cpp:include>
<enum>enum <name>OpMode</name> <block>{<decl><name>iABC</name></decl>, <decl><name>iABx</name></decl>, <decl><name>iAsBx</name></decl>}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_C</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_B</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_Bx</name></cpp:macro> <cpp:value>(SIZE_C + SIZE_B)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_A</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_OP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_A</name></cpp:macro> <cpp:value>(POS_OP + SIZE_OP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_C</name></cpp:macro> <cpp:value>(POS_A + SIZE_A)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_B</name></cpp:macro> <cpp:value>(POS_C + SIZE_C)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_Bx</name></cpp:macro> <cpp:value>POS_C</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZE_Bx</name> <operator>&lt;</operator> <name>LUAI_BITSINT</name><operator>-</operator><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARG_Bx</name></cpp:macro> <cpp:value>((1&lt;&lt;SIZE_Bx)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARG_sBx</name></cpp:macro> <cpp:value>(MAXARG_Bx&gt;&gt;1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARG_Bx</name></cpp:macro> <cpp:value>MAX_INT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARG_sBx</name></cpp:macro> <cpp:value>MAX_INT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARG_A</name></cpp:macro> <cpp:value>((1&lt;&lt;SIZE_A)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARG_B</name></cpp:macro> <cpp:value>((1&lt;&lt;SIZE_B)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARG_C</name></cpp:macro> <cpp:value>((1&lt;&lt;SIZE_C)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((~((~(Instruction)0)&lt;&lt;n))&lt;&lt;p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(~MASK1(n,p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OPCODE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(OpCode, ((i)&gt;&gt;POS_OP) &amp; MASK1(SIZE_OP,0)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_OPCODE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) = (((i)&amp;MASK0(SIZE_OP,POS_OP)) | ((cast(Instruction, o)&lt;&lt;POS_OP)&amp;MASK1(SIZE_OP,POS_OP))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETARG_A</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(int, ((i)&gt;&gt;POS_A) &amp; MASK1(SIZE_A,0)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETARG_A</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) = (((i)&amp;MASK0(SIZE_A,POS_A)) | ((cast(Instruction, u)&lt;&lt;POS_A)&amp;MASK1(SIZE_A,POS_A))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETARG_B</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(int, ((i)&gt;&gt;POS_B) &amp; MASK1(SIZE_B,0)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETARG_B</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) = (((i)&amp;MASK0(SIZE_B,POS_B)) | ((cast(Instruction, b)&lt;&lt;POS_B)&amp;MASK1(SIZE_B,POS_B))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETARG_C</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(int, ((i)&gt;&gt;POS_C) &amp; MASK1(SIZE_C,0)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETARG_C</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) = (((i)&amp;MASK0(SIZE_C,POS_C)) | ((cast(Instruction, b)&lt;&lt;POS_C)&amp;MASK1(SIZE_C,POS_C))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETARG_Bx</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(int, ((i)&gt;&gt;POS_Bx) &amp; MASK1(SIZE_Bx,0)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETARG_Bx</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) = (((i)&amp;MASK0(SIZE_Bx,POS_Bx)) | ((cast(Instruction, b)&lt;&lt;POS_Bx)&amp;MASK1(SIZE_Bx,POS_Bx))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETARG_sBx</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GETARG_Bx(i)-MAXARG_sBx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETARG_sBx</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SETARG_Bx((i),cast(unsigned int, (b)+MAXARG_sBx))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_ABC</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cast(Instruction, o)&lt;&lt;POS_OP) | (cast(Instruction, a)&lt;&lt;POS_A) | (cast(Instruction, b)&lt;&lt;POS_B) | (cast(Instruction, c)&lt;&lt;POS_C))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_ABx</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>bc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cast(Instruction, o)&lt;&lt;POS_OP) | (cast(Instruction, a)&lt;&lt;POS_A) | (cast(Instruction, bc)&lt;&lt;POS_Bx))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITRK</name></cpp:macro> <cpp:value>(1 &lt;&lt; (SIZE_B - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; BITRK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEXK</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(r) &amp; ~BITRK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXINDEXRK</name></cpp:macro> <cpp:value>(BITRK - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RKASK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) | BITRK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_REG</name></cpp:macro> <cpp:value>MAXARG_A</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>OP_MOVE</name></decl>,
<decl><name>OP_LOADK</name></decl>,
<decl><name>OP_LOADBOOL</name></decl>,
<decl><name>OP_LOADNIL</name></decl>,
<decl><name>OP_GETUPVAL</name></decl>,
<decl><name>OP_GETGLOBAL</name></decl>,
<decl><name>OP_GETTABLE</name></decl>,
<decl><name>OP_SETGLOBAL</name></decl>,
<decl><name>OP_SETUPVAL</name></decl>,
<decl><name>OP_SETTABLE</name></decl>,
<decl><name>OP_NEWTABLE</name></decl>,
<decl><name>OP_SELF</name></decl>,
<decl><name>OP_ADD</name></decl>,
<decl><name>OP_SUB</name></decl>,
<decl><name>OP_MUL</name></decl>,
<decl><name>OP_DIV</name></decl>,
<decl><name>OP_MOD</name></decl>,
<decl><name>OP_POW</name></decl>,
<decl><name>OP_UNM</name></decl>,
<decl><name>OP_NOT</name></decl>,
<decl><name>OP_LEN</name></decl>,
<decl><name>OP_CONCAT</name></decl>,
<decl><name>OP_JMP</name></decl>,
<decl><name>OP_EQ</name></decl>,
<decl><name>OP_LT</name></decl>,
<decl><name>OP_LE</name></decl>,
<decl><name>OP_TEST</name></decl>,
<decl><name>OP_TESTSET</name></decl>,
<decl><name>OP_CALL</name></decl>,
<decl><name>OP_TAILCALL</name></decl>,
<decl><name>OP_RETURN</name></decl>,
<decl><name>OP_FORLOOP</name></decl>,
<decl><name>OP_FORPREP</name></decl>,
<decl><name>OP_TFORLOOP</name></decl>,
<decl><name>OP_SETLIST</name></decl>,
<decl><name>OP_CLOSE</name></decl>,
<decl><name>OP_CLOSURE</name></decl>,
<decl><name>OP_VARARG</name></decl>
}</block></enum></type> <name>OpCode</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_OPCODES</name></cpp:macro> <cpp:value>(cast(int, OP_VARARG) + 1)</cpp:value></cpp:define>
<enum>enum <name>OpArgMask</name> <block>{
<decl><name>OpArgN</name></decl>,
<decl><name>OpArgU</name></decl>,
<decl><name>OpArgR</name></decl>,
<decl><name>OpArgK</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><name>LUAI_DATA</name> <specifier>const</specifier> <name>lu_byte</name></type> <name><name>luaP_opmodes</name><index>[<expr><name>NUM_OPCODES</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getOpMode</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(enum OpMode, luaP_opmodes[m] &amp; 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getBMode</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(enum OpArgMask, (luaP_opmodes[m] &gt;&gt; 4) &amp; 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getCMode</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cast(enum OpArgMask, (luaP_opmodes[m] &gt;&gt; 2) &amp; 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testAMode</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(luaP_opmodes[m] &amp; (1 &lt;&lt; 6))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testTMode</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(luaP_opmodes[m] &amp; (1 &lt;&lt; 7))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>LUAI_DATA</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaP_opnames</name><index>[<expr><name>NUM_OPCODES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFIELDS_PER_FLUSH</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
</unit>
