<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/lua/src/lparser.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llimits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzio.h"</cpp:file></cpp:include>
<typedef>typedef <type><enum>enum <block>{
<decl><name>VVOID</name></decl>,
<decl><name>VNIL</name></decl>,
<decl><name>VTRUE</name></decl>,
<decl><name>VFALSE</name></decl>,
<decl><name>VK</name></decl>,
<decl><name>VKNUM</name></decl>,
<decl><name>VLOCAL</name></decl>,
<decl><name>VUPVAL</name></decl>,
<decl><name>VGLOBAL</name></decl>,
<decl><name>VINDEXED</name></decl>,
<decl><name>VJMP</name></decl>,
<decl><name>VRELOCABLE</name></decl>,
<decl><name>VNONRELOC</name></decl>,
<decl><name>VCALL</name></decl>,
<decl><name>VVARARG</name></decl>
}</block></enum></type> <name>expkind</name>;</typedef>
<typedef>typedef <type><struct>struct <name>expdesc</name> <block>{
<decl_stmt><decl><type><name>expkind</name></type> <name>k</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>info</name></decl>, <name>aux</name>;</decl_stmt> }</block> <decl><name>s</name></decl>;</struct>
<decl_stmt><decl><type><name>lua_Number</name></type> <name>nval</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>
}</block></struct></type> <name>expdesc</name>;</typedef>
<typedef>typedef <type><struct>struct <name>upvaldesc</name> <block>{
<decl_stmt><decl><type><name>lu_byte</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>info</name></decl>;</decl_stmt>
}</block></struct></type> <name>upvaldesc</name>;</typedef>
<struct_decl>struct <name>BlockCnt</name>;</struct_decl>
<typedef>typedef <type><struct>struct <name>FuncState</name> <block>{
<decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FuncState</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>LexState</name></name> <modifier>*</modifier></type><name>ls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lua_State</name></name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>BlockCnt</name></name> <modifier>*</modifier></type><name>bl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lasttarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>freereg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>nlocvars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>nactvar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>upvaldesc</name></type> <name><name>upvalues</name><index>[<expr><name>LUAI_MAXUPVALUES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>actvar</name><index>[<expr><name>LUAI_MAXVARS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>FuncState</name>;</typedef>
<function_decl><type><name>LUAI_FUNC</name> <name>Proto</name> <modifier>*</modifier></type><name>luaY_parser</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>Mbuffer</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
