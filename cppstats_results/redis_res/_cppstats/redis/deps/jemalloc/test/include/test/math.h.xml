<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/test/include/test/math.h"><function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>ln_gamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">7.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">7.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>*=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><call><name>log</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>f</name> <operator>+</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>x</name> <operator>+</operator> <literal type="number">0.918938533204673</literal> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">0.000595238095238</literal> <operator>*</operator> <name>z</name> <operator>+</operator> <literal type="number">0.000793650793651</literal><operator>)</operator> <operator>*</operator> <name>z</name> <operator>-</operator>
<literal type="number">0.002777777777778</literal><operator>)</operator> <operator>*</operator> <name>z</name> <operator>+</operator> <literal type="number">0.083333333333333</literal><operator>)</operator> <operator>/</operator> <name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>i_gamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ln_gamma_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>acu</name></decl>, <decl><type ref="prev"/><name>factor</name></decl>, <decl><type ref="prev"/><name>oflo</name></decl>, <decl><type ref="prev"/><name>gin</name></decl>, <decl><type ref="prev"/><name>term</name></decl>, <decl><type ref="prev"/><name>rn</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>an</name></decl>, <decl><type ref="prev"/><name>dif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>pn</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>acu</name> <operator>=</operator> <literal type="number">1.0e-10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oflo</name> <operator>=</operator> <literal type="number">1.0e30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gin</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>p</name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>x</name> <operator>-</operator> <name>ln_gamma_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">1.0</literal> <operator>||</operator> <name>x</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gin</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rn</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rn</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>term</name> <operator>*=</operator> <name>x</name> <operator>/</operator> <name>rn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gin</name> <operator>+=</operator> <name>term</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>&lt;=</operator> <name>acu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gin</name> <operator>*=</operator> <name>factor</name> <operator>/</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>gin</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pn</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gin</name> <operator>=</operator> <name><name>pn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <name><name>pn</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>term</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>an</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>term</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>*</operator> <name><name>pn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>an</name> <operator>*</operator> <name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>pn</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rn</name> <operator>=</operator> <name><name>pn</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>/</operator> <name><name>pn</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dif</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>gin</name> <operator>-</operator> <name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dif</name> <operator>&lt;=</operator> <name>acu</name> <operator>&amp;&amp;</operator> <name>dif</name> <operator>&lt;=</operator> <name>acu</name> <operator>*</operator> <name>rn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gin</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>factor</name> <operator>*</operator> <name>gin</name></expr>;</expr_stmt>
<return>return <expr><name>gin</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>gin</name> <operator>=</operator> <name>rn</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>pn</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>oflo</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/=</operator> <name>oflo</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>pt_norm</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0.425</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0.180625</literal> <operator>-</operator> <name>q</name> <operator>*</operator> <name>q</name></expr>;</expr_stmt>
<return>return <expr><name>q</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2.5090809287301226727e3</literal> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">3.3430575583588128105e4</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">6.7265770927008700853e4</literal><operator>)</operator> <operator>*</operator> <name>r</name>
<operator>+</operator> <literal type="number">4.5921953931549871457e4</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1.3731693765509461125e4</literal><operator>)</operator> <operator>*</operator>
<name>r</name> <operator>+</operator> <literal type="number">1.9715909503065514427e3</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1.3314166789178437745e2</literal><operator>)</operator>
<operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">3.3871328727963666080e0</literal><operator>)</operator> <operator>/</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">5.2264952788528545610e3</literal> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">2.8729085735721942674e4</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">3.9307895800092710610e4</literal><operator>)</operator> <operator>*</operator> <name>r</name>
<operator>+</operator> <literal type="number">2.1213794301586595867e4</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">5.3941960214247511077e3</literal><operator>)</operator> <operator>*</operator>
<name>r</name> <operator>+</operator> <literal type="number">6.8718700749205790830e2</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">4.2313330701600911252e1</literal><operator>)</operator>
<operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>-</operator><call><name>log</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">5.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>-=</operator> <literal type="number">1.6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">7.74545014278341407640e-4</literal> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">2.27238449892691845833e-2</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">2.41780725177450611770e-1</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.27045825245236838258e0</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">3.64784832476320460504e0</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">5.76949722146069140550e0</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">4.63033784615654529590e0</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.42343711074968357734e0</literal><operator>)</operator> <operator>/</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1.05075007164441684324e-9</literal> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">5.47593808499534494600e-4</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.51986665636164571966e-2</literal><operator>)</operator>
<operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1.48103976427480074590e-1</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">6.89767334985100004550e-1</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.67638483018380384940e0</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">2.05319162663775882187e0</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>-=</operator> <literal type="number">5.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2.01033439929228813265e-7</literal> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">2.71155556874348757815e-5</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.24266094738807843860e-3</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">2.65321895265761230930e-2</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">2.96560571828504891230e-1</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.78482653991729133580e0</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">5.46378491116411436990e0</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">6.65790464350110377720e0</literal><operator>)</operator> <operator>/</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2.04426310338993978564e-15</literal> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.42151175831644588870e-7</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.84631831751005468180e-5</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">7.86869131145613259100e-4</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.48753612908506148525e-2</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">1.36929880922735805310e-1</literal><operator>)</operator> <operator>*</operator> <name>r</name> <operator>+</operator>
<literal type="number">5.99832206555887937690e-1</literal><operator>)</operator>
<operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name>ret</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>pt_chi2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>df</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ln_gamma_df_2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>aa</name></decl>, <decl><type ref="prev"/><name>xx</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>s6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>df</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">5.0e-7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>aa</name> <operator>=</operator> <literal type="number">0.6931471805</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xx</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>df</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>xx</name> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.24</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>p</name> <operator>*</operator> <name>xx</name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><name>ln_gamma_df_2</name> <operator>+</operator> <name>xx</name> <operator>*</operator> <name>aa</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>-</operator> <name>e</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&gt;</operator> <literal type="number">0.32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>pt_norm</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="number">0.222222</literal> <operator>/</operator> <name>df</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>df</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>p1</name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="number">2.2</literal> <operator>*</operator> <name>df</name> <operator>+</operator> <literal type="number">6.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <operator>(</operator><call><name>log</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>c</name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>ch</name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>ln_gamma_df_2</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0.4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <name>ch</name> <operator>*</operator> <operator>(</operator><literal type="number">4.67</literal> <operator>+</operator> <name>ch</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>ch</name> <operator>*</operator> <operator>(</operator><literal type="number">6.73</literal> <operator>+</operator> <name>ch</name> <operator>*</operator> <operator>(</operator><literal type="number">6.66</literal> <operator>+</operator> <name>ch</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><literal type="number">0.5</literal> <operator>+</operator> <operator>(</operator><literal type="number">4.67</literal> <operator>+</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>/</operator> <name>p1</name> <operator>-</operator> <operator>(</operator><literal type="number">6.73</literal> <operator>+</operator> <name>ch</name>
<operator>*</operator> <operator>(</operator><literal type="number">13.32</literal> <operator>+</operator> <literal type="number">3.0</literal> <operator>*</operator> <name>ch</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>-=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <call><name>exp</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>ln_gamma_df_2</name> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>ch</name> <operator>+</operator>
<name>c</name> <operator>*</operator> <name>aa</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>p2</name> <operator>/</operator> <name>p1</name><operator>)</operator> <operator>/</operator> <name>t</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>q</name> <operator>/</operator> <name>ch</name> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.01</literal> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1.0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p</name> <operator>-</operator> <call><name>i_gamma</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>ln_gamma_df_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p2</name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><name>xx</name> <operator>*</operator> <name>aa</name> <operator>+</operator> <name>ln_gamma_df_2</name> <operator>+</operator> <name>p1</name> <operator>-</operator> <name>c</name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>t</name> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>t</name> <operator>-</operator> <name>b</name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><literal type="number">210.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">140.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">105.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">84.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">70.0</literal> <operator>+</operator>
<literal type="number">60.0</literal> <operator>*</operator> <name>a</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">420.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>(</operator><literal type="number">420.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">735.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">966.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">1141.0</literal> <operator>+</operator> <literal type="number">1278.0</literal> <operator>*</operator>
<name>a</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2520.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <operator>(</operator><literal type="number">210.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">462.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">707.0</literal> <operator>+</operator> <literal type="number">932.0</literal> <operator>*</operator> <name>a</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2520.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <operator>(</operator><literal type="number">252.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">672.0</literal> <operator>+</operator> <literal type="number">1182.0</literal> <operator>*</operator> <name>a</name><operator>)</operator> <operator>+</operator> <name>c</name> <operator>*</operator> <operator>(</operator><literal type="number">294.0</literal> <operator>+</operator> <name>a</name> <operator>*</operator>
<operator>(</operator><literal type="number">889.0</literal> <operator>+</operator> <literal type="number">1740.0</literal> <operator>*</operator> <name>a</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">5040.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <operator>(</operator><literal type="number">84.0</literal> <operator>+</operator> <literal type="number">264.0</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <name>c</name> <operator>*</operator> <operator>(</operator><literal type="number">175.0</literal> <operator>+</operator> <literal type="number">606.0</literal> <operator>*</operator> <name>a</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2520.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s6</name> <operator>=</operator> <operator>(</operator><literal type="number">120.0</literal> <operator>+</operator> <name>c</name> <operator>*</operator> <operator>(</operator><literal type="number">346.0</literal> <operator>+</operator> <literal type="number">127.0</literal> <operator>*</operator> <name>c</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">5040.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>+=</operator> <name>t</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>t</name> <operator>*</operator> <name>s1</name> <operator>-</operator> <name>b</name> <operator>*</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name>s1</name> <operator>-</operator> <name>b</name> <operator>*</operator> <operator>(</operator><name>s2</name> <operator>-</operator> <name>b</name> <operator>*</operator> <operator>(</operator><name>s3</name>
<operator>-</operator> <name>b</name> <operator>*</operator> <operator>(</operator><name>s4</name> <operator>-</operator> <name>b</name> <operator>*</operator> <operator>(</operator><name>s5</name> <operator>-</operator> <name>b</name> <operator>*</operator> <name>s6</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>q</name> <operator>/</operator> <name>ch</name> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>pt_gamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>shape</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ln_gamma_shape</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>pt_chi2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>shape</name> <operator>*</operator> <literal type="number">2.0</literal></expr></argument>, <argument><expr><name>ln_gamma_shape</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>scale</name></expr>;</return>
</block_content>}</block></function>
</unit>
