<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/test/include/test/SFMT-sse2.h"><function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>__m128i</name></type> <name>mm_recursion</name><parameter_list>(<parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>__m128i</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m128i</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>SR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>_mm_srli_si128</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>SR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>SL1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>SL2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gen_rand_all</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name>MSK4</name></expr></argument>, <argument><expr><name>MSK3</name></expr></argument>, <argument><expr><name>MSK2</name></expr></argument>, <argument><expr><name>MSK1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name> <operator>-</operator> <name>POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mm_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mm_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gen_rand_array</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><name>MSK4</name></expr></argument>, <argument><expr><name>MSK3</name></expr></argument>, <argument><expr><name>MSK2</name></expr></argument>, <argument><expr><name>MSK1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name> <operator>-</operator> <name>POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mm_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mm_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mm_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>N</name> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mm_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>si</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
