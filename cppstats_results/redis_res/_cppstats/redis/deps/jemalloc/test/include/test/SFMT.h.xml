<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/test/include/test/SFMT.h"><typedef>typedef <type><name><name>struct</name> <name>sfmt_s</name></name></type> <name>sfmt_t</name>;</typedef>
<function_decl><type><name>uint32_t</name></type> <name>gen_rand32</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>gen_rand32_range</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>gen_rand64</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>gen_rand64_range</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fill_array32</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fill_array64</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>init_gen_rand</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>init_by_array</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>init_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fini_gen_rand</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_idstring</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>get_min_array_size32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>get_min_array_size64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>to_real1</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>v</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">4294967295.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>genrand_real1</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>to_real1</name><argument_list>(<argument><expr><call><name>gen_rand32</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>to_real2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>v</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">4294967296.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>genrand_real2</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>to_real2</name><argument_list>(<argument><expr><call><name>gen_rand32</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>to_real3</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>v</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">4294967296.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>genrand_real3</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>to_real3</name><argument_list>(<argument><expr><call><name>gen_rand32</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>to_res53</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>v</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">18446744073709551616.0L</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>to_res53_mix</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>to_res53</name><argument_list>(<argument><expr><name>x</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>genrand_res53</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>to_res53</name><argument_list>(<argument><expr><call><name>gen_rand64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>genrand_res53_mix</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>gen_rand32</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>gen_rand32</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>to_res53_mix</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
