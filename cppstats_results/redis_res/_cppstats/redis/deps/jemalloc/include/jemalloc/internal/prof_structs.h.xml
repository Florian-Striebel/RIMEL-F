<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/prof_structs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ckh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/prng.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/rb.h"</cpp:file></cpp:include>
<struct>struct <name>prof_bt_s</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_PROF_LIBGCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>prof_bt_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max</name></decl>;</decl_stmt>
}</block></struct></type> <name>prof_unwind_data_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <name>prof_accum_s</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>atomic_u64_t</name></type> <name>accumbytes</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<struct>struct <name>prof_cnt_s</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>curobjs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>curbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>accumobjs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><enum>enum <block>{
<decl><name>prof_tctx_state_initializing</name></decl>,
<decl><name>prof_tctx_state_nominal</name></decl>,
<decl><name>prof_tctx_state_dumping</name></decl>,
<decl><name>prof_tctx_state_purgatory</name></decl>
}</block></enum></type> <name>prof_tctx_state_t</name>;</typedef>
<struct>struct <name>prof_tctx_s</name> <block>{
<decl_stmt><decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>tdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>thr_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>thr_discrim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>cnts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_gctx_t</name> <modifier>*</modifier></type><name>gctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tctx_uid</name></decl>;</decl_stmt>
<macro><name>rb_node</name><argument_list>(<argument>prof_tctx_t</argument>)</argument_list></macro> <expr_stmt><expr><name>tctx_link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>prepared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_tctx_state_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>dump_cnts</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <macro><name>rb_tree</name><argument_list>(<argument>prof_tctx_t</argument>)</argument_list></macro> <expr_stmt><expr><name>prof_tctx_tree_t</name></expr>;</expr_stmt></typedef>
<struct>struct <name>prof_gctx_s</name> <block>{
<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nlimbo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_tctx_tree_t</name></type> <name>tctxs</name></decl>;</decl_stmt>
<macro><name>rb_node</name><argument_list>(<argument>prof_gctx_t</argument>)</argument_list></macro> <expr_stmt><expr><name>dump_link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>cnt_summed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_bt_t</name></type> <name>bt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <macro><name>rb_tree</name><argument_list>(<argument>prof_gctx_t</argument>)</argument_list></macro> <expr_stmt><expr><name>prof_gctx_tree_t</name></expr>;</expr_stmt></typedef>
<struct>struct <name>prof_tdata_s</name> <block>{
<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>thr_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>thr_discrim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>thread_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>attached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>expired</name></decl>;</decl_stmt>
<macro><name>rb_node</name><argument_list>(<argument>prof_tdata_t</argument>)</argument_list></macro> <expr_stmt><expr><name>tdata_link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tctx_uid_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ckh_t</name></type> <name>bt2tctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>prng_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enq_idump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enq_gdump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dumping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>cnt_summed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>vec</name><index>[<expr><name>PROF_BT_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <macro><name>rb_tree</name><argument_list>(<argument>prof_tdata_t</argument>)</argument_list></macro> <expr_stmt><expr><name>prof_tdata_tree_t</name></expr>;</expr_stmt></typedef>
</unit>
