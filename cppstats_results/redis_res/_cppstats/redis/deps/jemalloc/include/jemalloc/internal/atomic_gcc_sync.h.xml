<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INIT</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{__VA_ARGS__}</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>atomic_memory_order_relaxed</name></decl>,
<decl><name>atomic_memory_order_acquire</name></decl>,
<decl><name>atomic_memory_order_release</name></decl>,
<decl><name>atomic_memory_order_acq_rel</name></decl>,
<decl><name>atomic_memory_order_seq_cst</name></decl>
}</block></enum></type> <name>atomic_memory_order_t</name>;</typedef>
<function><type><name>ATOMIC_INLINE</name> <name>void</name></type>
<name>atomic_fence</name><parameter_list>(<parameter><decl><type><name>atomic_memory_order_t</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>atomic_memory_order_relaxed</name></expr>)</condition> <block>{<block_content>
<asm>asm <specifier>volatile</specifier>("" ::: "memory");</asm>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>atomic_memory_order_seq_cst</name></expr>)</condition> <block>{<block_content>
<asm>asm <specifier>volatile</specifier>("" ::: "memory");</asm>
<expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<asm>asm <specifier>volatile</specifier>("" ::: "memory");</asm>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<asm>asm <specifier>volatile</specifier>("" ::: "memory");</asm>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>asm <specifier>volatile</specifier>("lwsync");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>asm <specifier>volatile</specifier>("sync");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>atomic_memory_order_acquire</name></expr>)</condition> <block>{<block_content>
<asm>asm <specifier>volatile</specifier>("membar #LoadLoad | #LoadStore");</asm>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mo</name> <operator>==</operator> <name>atomic_memory_order_release</name></expr>)</condition> <block>{<block_content>
<asm>asm <specifier>volatile</specifier>("membar #LoadStore | #StoreStore");</asm>
</block_content>}</block></if> <else>else <block>{<block_content>
<asm>asm <specifier>volatile</specifier>("membar #LoadLoad | #LoadStore | #StoreStore");</asm>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<asm>asm <specifier>volatile</specifier>("" ::: "memory");</asm>
</block_content>}</block></function>
<function><type><name>ATOMIC_INLINE</name> <name>void</name></type>
<name>atomic_pre_sc_load_fence</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>atomic_fence</name><argument_list>(<argument><expr><name>atomic_memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>atomic_fence</name><argument_list>(<argument><expr><name>atomic_memory_order_seq_cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>ATOMIC_INLINE</name> <name>void</name></type>
<name>atomic_post_sc_store_fence</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>atomic_fence</name><argument_list>(<argument><expr><name>atomic_memory_order_seq_cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>atomic_fence</name><argument_list>(<argument><expr><name>atomic_memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_GENERATE_ATOMICS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { type volatile repr; } atomic_##short_type##_t; ATOMIC_INLINE type atomic_load_##short_type(const atomic_##short_type##_t *a, atomic_memory_order_t mo) { if (mo == atomic_memory_order_seq_cst) { atomic_pre_sc_load_fence(); } type result = a-&gt;repr; if (mo != atomic_memory_order_relaxed) { atomic_fence(atomic_memory_order_acquire); } return result; } ATOMIC_INLINE void atomic_store_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { if (mo != atomic_memory_order_relaxed) { atomic_fence(atomic_memory_order_release); } a-&gt;repr = val; if (mo == atomic_memory_order_seq_cst) { atomic_post_sc_store_fence(); } } ATOMIC_INLINE type atomic_exchange_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { while (true) { type old = a-&gt;repr; if (__sync_bool_compare_and_swap(&amp;a-&gt;repr, old, val)) { return old; } } } ATOMIC_INLINE bool atomic_compare_exchange_weak_##short_type(atomic_##short_type##_t *a, type *expected, type desired, atomic_memory_order_t success_mo, atomic_memory_order_t failure_mo) { type prev = __sync_val_compare_and_swap(&amp;a-&gt;repr, *expected, desired); if (prev == *expected) { return true; } else { *expected = prev; return false; } } ATOMIC_INLINE bool atomic_compare_exchange_strong_##short_type(atomic_##short_type##_t *a, type *expected, type desired, atomic_memory_order_t success_mo, atomic_memory_order_t failure_mo) { type prev = __sync_val_compare_and_swap(&amp;a-&gt;repr, *expected, desired); if (prev == *expected) { return true; } else { *expected = prev; return false; } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_GENERATE_ATOMICS(type, short_type, lg_size) ATOMIC_INLINE type atomic_fetch_add_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __sync_fetch_and_add(&amp;a-&gt;repr, val); } ATOMIC_INLINE type atomic_fetch_sub_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __sync_fetch_and_sub(&amp;a-&gt;repr, val); } ATOMIC_INLINE type atomic_fetch_and_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __sync_fetch_and_and(&amp;a-&gt;repr, val); } ATOMIC_INLINE type atomic_fetch_or_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __sync_fetch_and_or(&amp;a-&gt;repr, val); } ATOMIC_INLINE type atomic_fetch_xor_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __sync_fetch_and_xor(&amp;a-&gt;repr, val); }</cpp:value></cpp:define>
</unit>
