<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/sz.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bit_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/pages.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/util.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name><name>sz_pind2sz_tab</name><index>[<expr><name>SC_NPSIZES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name><name>sz_index2size_tab</name><index>[<expr><name>SC_NSIZES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint8_t</name></type> <name><name>sz_size2index_tab</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>sz_large_pad</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_CACHE_OBLIVIOUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>PAGE</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sz_boot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>pszind_t</name></type>
<name>sz_psz2ind</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>psz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psz</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SC_NPSIZES</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>pszind_t</name></type> <name>x</name> <init>= <expr><call><name>lg_floor</name><argument_list>(<argument><expr><operator>(</operator><name>psz</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pszind_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>SC_LG_NGROUP</name> <operator>+</operator> <name>LG_PAGE</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>x</name> <operator>-</operator> <operator>(</operator><name>SC_LG_NGROUP</name> <operator>+</operator> <name>LG_PAGE</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pszind_t</name></type> <name>grp</name> <init>= <expr><name>shift</name> <operator>&lt;&lt;</operator> <name>SC_LG_NGROUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pszind_t</name></type> <name>lg_delta</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>SC_LG_NGROUP</name> <operator>+</operator> <name>LG_PAGE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>LG_PAGE</name></expr> </then><else>: <expr><name>x</name> <operator>-</operator> <name>SC_LG_NGROUP</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>delta_inverse_mask</name> <init>= <expr><call><name>ZU</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pszind_t</name></type> <name>mod</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>psz</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>delta_inverse_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>lg_delta</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SC_LG_NGROUP</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pszind_t</name></type> <name>ind</name> <init>= <expr><name>grp</name> <operator>+</operator> <name>mod</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ind</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>sz_pind2sz_compute</name><parameter_list>(<parameter><decl><type><name>pszind_t</name></type> <name>pind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pind</name> <operator>==</operator> <name>SC_NPSIZES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SC_LARGE_MAXCLASS</name> <operator>+</operator> <name>PAGE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>grp</name> <init>= <expr><name>pind</name> <operator>&gt;&gt;</operator> <name>SC_LG_NGROUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mod</name> <init>= <expr><name>pind</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SC_LG_NGROUP</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>grp_size_mask</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><name>grp</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>grp_size</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>LG_PAGE</name> <operator>+</operator> <operator>(</operator><name>SC_LG_NGROUP</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>grp</name><operator>)</operator>
<operator>&amp;</operator> <name>grp_size_mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>grp</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>grp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lg_delta</name> <init>= <expr><name>shift</name> <operator>+</operator> <operator>(</operator><name>LG_PAGE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mod_size</name> <init>= <expr><operator>(</operator><name>mod</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>lg_delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><name>grp_size</name> <operator>+</operator> <name>mod_size</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>sz_pind2sz_lookup</name><parameter_list>(<parameter><decl><type><name>pszind_t</name></type> <name>pind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>sz_pind2sz_tab</name><index>[<expr><name>pind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <call><name>sz_pind2sz_compute</name><argument_list>(<argument><expr><name>pind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>sz_pind2sz</name><parameter_list>(<parameter><decl><type><name>pszind_t</name></type> <name>pind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pind</name> <operator>&lt;</operator> <name>SC_NPSIZES</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sz_pind2sz_lookup</name><argument_list>(<argument><expr><name>pind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>sz_psz2u</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>psz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psz</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SC_LARGE_MAXCLASS</name> <operator>+</operator> <name>PAGE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>x</name> <init>= <expr><call><name>lg_floor</name><argument_list>(<argument><expr><operator>(</operator><name>psz</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lg_delta</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>SC_LG_NGROUP</name> <operator>+</operator> <name>LG_PAGE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>LG_PAGE</name></expr> </then><else>: <expr><name>x</name> <operator>-</operator> <name>SC_LG_NGROUP</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>delta</name> <init>= <expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>delta_mask</name> <init>= <expr><name>delta</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>usize</name> <init>= <expr><operator>(</operator><name>psz</name> <operator>+</operator> <name>delta_mask</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>delta_mask</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>usize</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>szind_t</name></type>
<name>sz_size2index_compute</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SC_NSIZES</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SC_NTINY</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SC_LG_TINY_MAXCLASS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>szind_t</name></type> <name>lg_tmin</name> <init>= <expr><name>SC_LG_TINY_MAXCLASS</name> <operator>-</operator> <name>SC_NTINY</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>szind_t</name></type> <name>lg_ceil</name> <init>= <expr><call><name>lg_floor</name><argument_list>(<argument><expr><call><name>pow2_ceil_zu</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>lg_ceil</name> <operator>&lt;</operator> <name>lg_tmin</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>lg_ceil</name> <operator>-</operator> <name>lg_tmin</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>szind_t</name></type> <name>x</name> <init>= <expr><call><name>lg_floor</name><argument_list>(<argument><expr><operator>(</operator><name>size</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>szind_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>SC_LG_NGROUP</name> <operator>+</operator> <name>LG_QUANTUM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><name>x</name> <operator>-</operator> <operator>(</operator><name>SC_LG_NGROUP</name> <operator>+</operator> <name>LG_QUANTUM</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>szind_t</name></type> <name>grp</name> <init>= <expr><name>shift</name> <operator>&lt;&lt;</operator> <name>SC_LG_NGROUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>szind_t</name></type> <name>lg_delta</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>SC_LG_NGROUP</name> <operator>+</operator> <name>LG_QUANTUM</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>
?</condition><then> <expr><name>LG_QUANTUM</name></expr> </then><else>: <expr><name>x</name> <operator>-</operator> <name>SC_LG_NGROUP</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>delta_inverse_mask</name> <init>= <expr><call><name>ZU</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>szind_t</name></type> <name>mod</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>delta_inverse_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>lg_delta</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SC_LG_NGROUP</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>szind_t</name></type> <name>index</name> <init>= <expr><name>SC_NTINY</name> <operator>+</operator> <name>grp</name> <operator>+</operator> <name>mod</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>szind_t</name></type>
<name>sz_size2index_lookup</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>SC_LOOKUP_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>szind_t</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name><name>sz_size2index_tab</name><index>[<expr><operator>(</operator><name>size</name> <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SC_LG_TINY_MIN</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&gt;&gt;</operator> <name>SC_LG_TINY_MIN</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <call><name>sz_size2index_compute</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>szind_t</name></type>
<name>sz_size2index</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>SC_LOOKUP_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sz_size2index_lookup</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>sz_size2index_compute</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>sz_index2size_compute</name><parameter_list>(<parameter><decl><type><name>szind_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SC_NTINY</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>SC_NTINY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>SC_LG_TINY_MAXCLASS</name> <operator>-</operator> <name>SC_NTINY</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>index</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>reduced_index</name> <init>= <expr><name>index</name> <operator>-</operator> <name>SC_NTINY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>grp</name> <init>= <expr><name>reduced_index</name> <operator>&gt;&gt;</operator> <name>SC_LG_NGROUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mod</name> <init>= <expr><name>reduced_index</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SC_LG_NGROUP</name><operator>)</operator> <operator>-</operator>
<literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>grp_size_mask</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><name>grp</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>grp_size</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>LG_QUANTUM</name> <operator>+</operator>
<operator>(</operator><name>SC_LG_NGROUP</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>grp</name><operator>)</operator> <operator>&amp;</operator> <name>grp_size_mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>grp</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>grp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lg_delta</name> <init>= <expr><name>shift</name> <operator>+</operator> <operator>(</operator><name>LG_QUANTUM</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mod_size</name> <init>= <expr><operator>(</operator><name>mod</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>lg_delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>usize</name> <init>= <expr><name>grp_size</name> <operator>+</operator> <name>mod_size</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>usize</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>sz_index2size_lookup</name><parameter_list>(<parameter><decl><type><name>szind_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>sz_index2size_tab</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <call><name>sz_index2size_compute</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>sz_index2size</name><parameter_list>(<parameter><decl><type><name>szind_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sz_index2size_lookup</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>sz_s2u_compute</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SC_NTINY</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SC_LG_TINY_MAXCLASS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>lg_tmin</name> <init>= <expr><name>SC_LG_TINY_MAXCLASS</name> <operator>-</operator> <name>SC_NTINY</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lg_ceil</name> <init>= <expr><call><name>lg_floor</name><argument_list>(<argument><expr><call><name>pow2_ceil_zu</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>lg_ceil</name> <operator>&lt;</operator> <name>lg_tmin</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_tmin</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_ceil</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>x</name> <init>= <expr><call><name>lg_floor</name><argument_list>(<argument><expr><operator>(</operator><name>size</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lg_delta</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>SC_LG_NGROUP</name> <operator>+</operator> <name>LG_QUANTUM</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>
?</condition><then> <expr><name>LG_QUANTUM</name></expr> </then><else>: <expr><name>x</name> <operator>-</operator> <name>SC_LG_NGROUP</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>delta</name> <init>= <expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>delta_mask</name> <init>= <expr><name>delta</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>usize</name> <init>= <expr><operator>(</operator><name>size</name> <operator>+</operator> <name>delta_mask</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>delta_mask</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>usize</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>sz_s2u_lookup</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>sz_index2size_lookup</name><argument_list>(<argument><expr><call><name>sz_size2index_lookup</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <call><name>sz_s2u_compute</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>sz_s2u</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>SC_LOOKUP_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sz_s2u_lookup</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>sz_s2u_compute</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>sz_sa2u</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>usize</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>alignment</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>alignment</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>SC_SMALL_MAXCLASS</name> <operator>&amp;&amp;</operator> <name>alignment</name> <operator>&lt;</operator> <name>PAGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>usize</name> <operator>=</operator> <call><name>sz_s2u</name><argument_list>(<argument><expr><call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>usize</name> <operator>&lt;</operator> <name>SC_LARGE_MINCLASS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>usize</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>alignment</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>SC_LARGE_MINCLASS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>usize</name> <operator>=</operator> <name>SC_LARGE_MINCLASS</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>usize</name> <operator>=</operator> <call><name>sz_s2u</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>usize</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>usize</name> <operator>+</operator> <name>sz_large_pad</name> <operator>+</operator> <call><name>PAGE_CEILING</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>PAGE</name> <operator>&lt;</operator> <name>usize</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>usize</name></expr>;</return>
</block_content>}</block></function>
</unit>
