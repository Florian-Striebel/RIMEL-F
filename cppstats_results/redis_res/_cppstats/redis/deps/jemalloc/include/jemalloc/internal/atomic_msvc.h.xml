<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/atomic_msvc.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INIT</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{__VA_ARGS__}</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>atomic_memory_order_relaxed</name></decl>,
<decl><name>atomic_memory_order_acquire</name></decl>,
<decl><name>atomic_memory_order_release</name></decl>,
<decl><name>atomic_memory_order_acq_rel</name></decl>,
<decl><name>atomic_memory_order_seq_cst</name></decl>
}</block></enum></type> <name>atomic_memory_order_t</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>atomic_repr_0_t</name>;</typedef>
<typedef>typedef <type><name>short</name></type> <name>atomic_repr_1_t</name>;</typedef>
<typedef>typedef <type><name>long</name></type> <name>atomic_repr_2_t</name>;</typedef>
<typedef>typedef <type><name>__int64</name></type> <name>atomic_repr_3_t</name>;</typedef>
<function><type><name>ATOMIC_INLINE</name> <name>void</name></type>
<name>atomic_fence</name><parameter_list>(<parameter><decl><type><name>atomic_memory_order_t</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_ReadWriteBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>!=</operator> <name>atomic_memory_order_relaxed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>atomic_memory_order_seq_cst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Don't know how to create atomics for this platform for MSVC."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>_ReadWriteBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INTERLOCKED_REPR</name><parameter_list>(<parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_repr_ ##lg_size ##_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CONCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_RAW_CONCAT(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_RAW_CONCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INTERLOCKED_NAME</name><parameter_list>(<parameter><type><name>base_name</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_CONCAT( base_name, ATOMIC_INTERLOCKED_SUFFIX(lg_size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INTERLOCKED_SUFFIX</name><parameter_list>(<parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_CONCAT(ATOMIC_INTERLOCKED_SUFFIX_, lg_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INTERLOCKED_SUFFIX_0</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INTERLOCKED_SUFFIX_1</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INTERLOCKED_SUFFIX_2</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INTERLOCKED_SUFFIX_3</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_GENERATE_ATOMICS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { ATOMIC_INTERLOCKED_REPR(lg_size) repr; } atomic_##short_type##_t; ATOMIC_INLINE type atomic_load_##short_type(const atomic_##short_type##_t *a, atomic_memory_order_t mo) { ATOMIC_INTERLOCKED_REPR(lg_size) ret = a-&gt;repr; if (mo != atomic_memory_order_relaxed) { atomic_fence(atomic_memory_order_acquire); } return (type) ret; } ATOMIC_INLINE void atomic_store_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { if (mo != atomic_memory_order_relaxed) { atomic_fence(atomic_memory_order_release); } a-&gt;repr = (ATOMIC_INTERLOCKED_REPR(lg_size)) val; if (mo == atomic_memory_order_seq_cst) { atomic_fence(atomic_memory_order_seq_cst); } } ATOMIC_INLINE type atomic_exchange_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return (type)ATOMIC_INTERLOCKED_NAME(_InterlockedExchange, lg_size)(&amp;a-&gt;repr, (ATOMIC_INTERLOCKED_REPR(lg_size))val); } ATOMIC_INLINE bool atomic_compare_exchange_weak_##short_type(atomic_##short_type##_t *a, type *expected, type desired, atomic_memory_order_t success_mo, atomic_memory_order_t failure_mo) { ATOMIC_INTERLOCKED_REPR(lg_size) e = (ATOMIC_INTERLOCKED_REPR(lg_size))*expected; ATOMIC_INTERLOCKED_REPR(lg_size) d = (ATOMIC_INTERLOCKED_REPR(lg_size))desired; ATOMIC_INTERLOCKED_REPR(lg_size) old = ATOMIC_INTERLOCKED_NAME(_InterlockedCompareExchange, lg_size)(&amp;a-&gt;repr, d, e); if (old == e) { return true; } else { *expected = (type)old; return false; } } ATOMIC_INLINE bool atomic_compare_exchange_strong_##short_type(atomic_##short_type##_t *a, type *expected, type desired, atomic_memory_order_t success_mo, atomic_memory_order_t failure_mo) { return atomic_compare_exchange_weak_##short_type(a, expected, desired, success_mo, failure_mo); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_GENERATE_ATOMICS(type, short_type, lg_size) ATOMIC_INLINE type atomic_fetch_add_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return (type)ATOMIC_INTERLOCKED_NAME(_InterlockedExchangeAdd, lg_size)(&amp;a-&gt;repr, (ATOMIC_INTERLOCKED_REPR(lg_size))val); } ATOMIC_INLINE type atomic_fetch_sub_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { __pragma(warning(push)) __pragma(warning(disable: 4146)) return atomic_fetch_add_##short_type(a, -val, mo); __pragma(warning(pop)) } ATOMIC_INLINE type atomic_fetch_and_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return (type)ATOMIC_INTERLOCKED_NAME(_InterlockedAnd, lg_size)( &amp;a-&gt;repr, (ATOMIC_INTERLOCKED_REPR(lg_size))val); } ATOMIC_INLINE type atomic_fetch_or_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return (type)ATOMIC_INTERLOCKED_NAME(_InterlockedOr, lg_size)( &amp;a-&gt;repr, (ATOMIC_INTERLOCKED_REPR(lg_size))val); } ATOMIC_INLINE type atomic_fetch_xor_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return (type)ATOMIC_INTERLOCKED_NAME(_InterlockedXor, lg_size)( &amp;a-&gt;repr, (ATOMIC_INTERLOCKED_REPR(lg_size))val); }</cpp:value></cpp:define>
</unit>
