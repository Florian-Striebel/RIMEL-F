<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/emitter.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ql.h"</cpp:file></cpp:include>
<typedef>typedef <type><name><name>enum</name> <name>emitter_output_e</name></name></type> <name>emitter_output_t</name>;</typedef>
<enum>enum <name>emitter_output_e</name> <block>{
<decl><name>emitter_output_json</name></decl>,
<decl><name>emitter_output_table</name></decl>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>emitter_justify_e</name></name></type> <name>emitter_justify_t</name>;</typedef>
<enum>enum <name>emitter_justify_e</name> <block>{
<decl><name>emitter_justify_left</name></decl>,
<decl><name>emitter_justify_right</name></decl>,
<decl><name>emitter_justify_none</name></decl>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>emitter_type_e</name></name></type> <name>emitter_type_t</name>;</typedef>
<enum>enum <name>emitter_type_e</name> <block>{
<decl><name>emitter_type_bool</name></decl>,
<decl><name>emitter_type_int</name></decl>,
<decl><name>emitter_type_unsigned</name></decl>,
<decl><name>emitter_type_uint32</name></decl>,
<decl><name>emitter_type_uint64</name></decl>,
<decl><name>emitter_type_size</name></decl>,
<decl><name>emitter_type_ssize</name></decl>,
<decl><name>emitter_type_string</name></decl>,
<decl><name>emitter_type_title</name></decl>,
}</block>;</enum>
<typedef>typedef <type><name><name>struct</name> <name>emitter_col_s</name></name></type> <name>emitter_col_t</name>;</typedef>
<struct>struct <name>emitter_col_s</name> <block>{
<decl_stmt><decl><type><name>emitter_justify_t</name></type> <name>justify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>emitter_type_t</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>bool_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>int_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>unsigned_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uint32_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uint32_t_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>uint64_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>uint64_t_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ssize_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_val</name></decl>;</decl_stmt>
}</block>;</union>
<macro><name>ql_elm</name><argument_list>(<argument>emitter_col_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>emitter_row_s</name></name></type> <name>emitter_row_t</name>;</typedef>
<struct>struct <name>emitter_row_s</name> <block>{
<macro><name>ql_head</name><argument_list>(<argument>emitter_col_t</argument>)</argument_list></macro> <expr_stmt><expr><name>cols</name></expr>;</expr_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>emitter_s</name></name></type> <name>emitter_t</name>;</typedef>
<struct>struct <name>emitter_s</name> <block>{
<decl_stmt><decl><type><name>emitter_output_t</name></type> <name>output</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>write_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbopaque</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nesting_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>item_at_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>emitted_key</name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>JEMALLOC_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_printf</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_vcprintf</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_cb</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>cbopaque</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>JEMALLOC_FORMAT_ARG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list>
<name>emitter_gen_fmt</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>out_fmt</name></expr></argument>, <argument><expr><name>size_t</name> <name>out_size</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt_specifier</name></expr></argument>,
<argument><expr><name>emitter_justify_t</name> <name>justify</name></expr></argument>, <argument><expr><name>int</name> <name>width</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fmt_specifier</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>justify</name> <operator>==</operator> <name>emitter_justify_none</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>,
<argument><expr><literal type="string">"%%%s"</literal></expr></argument>, <argument><expr><name>fmt_specifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>justify</name> <operator>==</operator> <name>emitter_justify_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>,
<argument><expr><literal type="string">"%%-%d%s"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>fmt_specifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>,
<argument><expr><literal type="string">"%%%d%s"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>fmt_specifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>written</name> <operator>&lt;</operator> <name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out_fmt</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_print_value</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>emitter_justify_t</name></type> <name>justify</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>emitter_type_t</name></type> <name>value_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>str_written</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>fmt</name><index>[<expr><name>FMT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_SIMPLE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>format</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>emitter_printf(emitter, emitter_gen_fmt(fmt, FMT_SIZE, format, justify, width), *(const type *)value);</cpp:value></cpp:define>
<switch>switch <condition>(<expr><name>value_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>emitter_type_bool</name></expr>:</case>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><call><name>emitter_gen_fmt</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>FMT_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>justify</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>bool</name> <operator>*</operator><operator>)</operator><name>value</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>emitter_type_int</name></expr>:</case>
<macro><name>EMIT_SIMPLE</name><argument_list>(<argument>int</argument>, <argument><literal type="string">"%d"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><name>emitter_type_unsigned</name></expr>:</case>
<macro><name>EMIT_SIMPLE</name><argument_list>(<argument>unsigned</argument>, <argument><literal type="string">"%u"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><name>emitter_type_ssize</name></expr>:</case>
<macro><name>EMIT_SIMPLE</name><argument_list>(<argument>ssize_t</argument>, <argument><literal type="string">"%zd"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><name>emitter_type_size</name></expr>:</case>
<macro><name>EMIT_SIMPLE</name><argument_list>(<argument>size_t</argument>, <argument><literal type="string">"%zu"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><name>emitter_type_string</name></expr>:</case>
<expr_stmt><expr><name>str_written</name> <operator>=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str_written</name> <operator>&lt;</operator> <name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><call><name>emitter_gen_fmt</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>FMT_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>justify</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>emitter_type_uint32</name></expr>:</case>
<macro><name>EMIT_SIMPLE</name><argument_list>(<argument>uint32_t</argument>, <argument><literal type="string">"%"</literal> FMTu32</argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><name>emitter_type_uint64</name></expr>:</case>
<macro><name>EMIT_SIMPLE</name><argument_list>(<argument>uint64_t</argument>, <argument><literal type="string">"%"</literal> FMTu64</argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><name>emitter_type_title</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT_SIMPLE</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><specifier>const</specifier></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUF_SIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FMT_SIZE</name></cpp:undef>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_nest_inc</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>nesting_depth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>item_at_depth</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_nest_dec</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>nesting_depth</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>item_at_depth</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_indent</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>amount</name> <init>= <expr><name><name>emitter</name><operator>-&gt;</operator><name>nesting_depth</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indent_str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>indent_str</name> <operator>=</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>amount</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>indent_str</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>amount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>indent_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_key_prefix</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>emitted_key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>emitted_key</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>emitter</name><operator>-&gt;</operator><name>item_at_depth</name></name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_init</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>emitter_output_t</name></type> <name>emitter_output</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>write_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbopaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>emitter_output</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_cb</name></name> <operator>=</operator> <name>write_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>cbopaque</name></name> <operator>=</operator> <name>cbopaque</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>item_at_depth</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>emitted_key</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>nesting_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_key</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key_prefix</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"\"%s\": "</literal></expr></argument>, <argument><expr><name>json_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>emitted_key</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_value</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>emitter_type_t</name></type> <name>value_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key_prefix</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_print_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>emitter_justify_none</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>item_at_depth</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_kv</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_key</name></decl></parameter>,
<parameter><decl><type><name>emitter_type_t</name></type> <name>value_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>json_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_json_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_array_begin</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key_prefix</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_nest_inc</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_array_kv_begin</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>json_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_json_array_begin</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_array_end</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>nesting_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_nest_dec</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_object_begin</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key_prefix</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_nest_inc</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_object_kv_begin</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>json_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_json_object_begin</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_json_object_end</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>nesting_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_nest_dec</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_table_dict_begin</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_table</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>table_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_nest_inc</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_table_dict_end</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_table</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_nest_dec</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_table_kv_note</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_key</name></decl></parameter>,
<parameter><decl><type><name>emitter_type_t</name></type> <name>value_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_note_key</name></decl></parameter>, <parameter><decl><type><name>emitter_type_t</name></type> <name>table_note_value_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>table_note_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_table</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>table_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_print_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>emitter_justify_none</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>table_note_key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">" (%s: "</literal></expr></argument>, <argument><expr><name>table_note_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_print_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>emitter_justify_none</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>table_note_value_type</name></expr></argument>, <argument><expr><name>table_note_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>item_at_depth</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_table_kv</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_key</name></decl></parameter>,
<parameter><decl><type><name>emitter_type_t</name></type> <name>value_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_table_kv_note</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>table_key</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>emitter_type_bool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<macro><name>JEMALLOC_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_table_printf</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_table</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_vcprintf</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_cb</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>cbopaque</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_table_row</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>emitter_row_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>!=</operator> <name>emitter_output_table</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>emitter_col_t</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<macro><name>ql_foreach</name><argument_list>(<argument>col</argument>, <argument>&amp;row-&gt;cols</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_print_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>justify</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>col</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>bool_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>emitter_table_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_row_init</name><parameter_list>(<parameter><decl><type><name>emitter_row_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_col_init</name><parameter_list>(<parameter><decl><type><name>emitter_col_t</name> <modifier>*</modifier></type><name>col</name></decl></parameter>, <parameter><decl><type><name>emitter_row_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ql_elm_new</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ql_tail_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_kv_note</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_key</name></decl></parameter>,
<parameter><decl><type><name>emitter_type_t</name></type> <name>value_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_note_key</name></decl></parameter>, <parameter><decl><type><name>emitter_type_t</name></type> <name>table_note_value_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>table_note_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>json_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_json_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>emitter_table_kv_note</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>table_key</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
<argument><expr><name>table_note_key</name></expr></argument>, <argument><expr><name>table_note_value_type</name></expr></argument>, <argument><expr><name>table_note_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>item_at_depth</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_kv</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_key</name></decl></parameter>,
<parameter><decl><type><name>emitter_type_t</name></type> <name>value_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_kv_note</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>json_key</name></expr></argument>, <argument><expr><name>table_key</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>emitter_type_bool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_dict_begin</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_header</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>json_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_json_object_begin</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>emitter_table_dict_begin</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>table_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_dict_end</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emitter_json_object_end</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>emitter_table_dict_end</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_begin</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>nesting_depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_nest_inc</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>emitter_end</name><parameter_list>(<parameter><decl><type><name>emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>emitter_output_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>nesting_depth</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_nest_dec</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emitter_printf</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"\n}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
