<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/mutex.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex_prof.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/tsd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/witness.h"</cpp:file></cpp:include>
<typedef>typedef <type><enum>enum <block>{
<decl><name>malloc_mutex_rank_exclusive</name></decl>,
<decl><name>malloc_mutex_address_ordered</name></decl>
}</block></enum></type> <name>malloc_mutex_lock_order_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>malloc_mutex_s</name></name></type> <name>malloc_mutex_t</name>;</typedef>
<struct>struct <name>malloc_mutex_s</name> <block>{
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>mutex_prof_data_t</name></type> <name>prof_data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&gt;=</operator> <literal type="number">0x0600</literal></expr></cpp:if>
<decl_stmt><decl><type><name>SRWLOCK</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_OS_UNFAIR_LOCK</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<decl_stmt><decl><type><name>os_unfair_lock</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_MUTEX_INIT_CB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>postponed_next</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>atomic_b_t</name></type> <name>locked</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>witness_t</name></type> <name>witness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>malloc_mutex_lock_order_t</name></type> <name>lock_order</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</union>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>witness_t</name></type> <name>witness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>malloc_mutex_lock_order_t</name></type> <name>lock_order</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_MAX_SPIN</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&gt;=</operator> <literal type="number">0x0600</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_LOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AcquireSRWLockExclusive(&amp;(m)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_UNLOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ReleaseSRWLockExclusive(&amp;(m)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_TRYLOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!TryAcquireSRWLockExclusive(&amp;(m)-&gt;lock))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_LOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EnterCriticalSection(&amp;(m)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_UNLOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LeaveCriticalSection(&amp;(m)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_TRYLOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!TryEnterCriticalSection(&amp;(m)-&gt;lock))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_OS_UNFAIR_LOCK</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_LOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>os_unfair_lock_lock(&amp;(m)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_UNLOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>os_unfair_lock_unlock(&amp;(m)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_TRYLOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!os_unfair_lock_trylock(&amp;(m)-&gt;lock))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_LOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;(m)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_UNLOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;(m)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_TRYLOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(pthread_mutex_trylock(&amp;(m)-&gt;lock) != 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_PROF_DATA_INITIALIZER</name></cpp:macro> <cpp:value>{NSTIME_ZERO_INITIALIZER, NSTIME_ZERO_INITIALIZER, 0, 0, 0, ATOMIC_INIT(0), 0, NULL, 0}</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_INITIALIZER</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_OS_UNFAIR_LOCK</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>{{{LOCK_PROF_DATA_INITIALIZER, OS_UNFAIR_LOCK_INIT, ATOMIC_INIT(false)}}, WITNESS_INITIALIZER("mutex", WITNESS_RANK_OMIT), 0}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>{{{LOCK_PROF_DATA_INITIALIZER, OS_UNFAIR_LOCK_INIT, ATOMIC_INIT(false)}}, WITNESS_INITIALIZER("mutex", WITNESS_RANK_OMIT)}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_MUTEX_INIT_CB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_DEBUG</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>{{{LOCK_PROF_DATA_INITIALIZER, PTHREAD_MUTEX_INITIALIZER, NULL, ATOMIC_INIT(false)}}, WITNESS_INITIALIZER("mutex", WITNESS_RANK_OMIT), 0}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>{{{LOCK_PROF_DATA_INITIALIZER, PTHREAD_MUTEX_INITIALIZER, NULL, ATOMIC_INIT(false)}}, WITNESS_INITIALIZER("mutex", WITNESS_RANK_OMIT)}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_TYPE</name></cpp:macro> <cpp:value>PTHREAD_MUTEX_DEFAULT</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>{{{LOCK_PROF_DATA_INITIALIZER, PTHREAD_MUTEX_INITIALIZER, ATOMIC_INIT(false)}}, WITNESS_INITIALIZER("mutex", WITNESS_RANK_OMIT), 0}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>{{{LOCK_PROF_DATA_INITIALIZER, PTHREAD_MUTEX_INITIALIZER, ATOMIC_INIT(false)}}, WITNESS_INITIALIZER("mutex", WITNESS_RANK_OMIT)}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_LAZY_LOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>isthreaded</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isthreaded</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isthreaded</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>bool</name></type> <name>malloc_mutex_init</name><parameter_list>(<parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>witness_rank_t</name></type> <name>rank</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_lock_order_t</name></type> <name>lock_order</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>malloc_mutex_prefork</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>malloc_mutex_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>malloc_mutex_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>malloc_mutex_boot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>malloc_mutex_prof_data_reset</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>malloc_mutex_lock_slow</name><parameter_list>(<parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>malloc_mutex_lock_final</name><parameter_list>(<parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MALLOC_MUTEX_LOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>locked</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>malloc_mutex_trylock_final</name><parameter_list>(<parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>MALLOC_MUTEX_TRYLOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mutex_owner_stats_update</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>prof_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_lock_ops</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>prev_owner</name></name> <operator>!=</operator> <name>tsdn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>prev_owner</name></name> <operator>=</operator> <name>tsdn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_owner_switches</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>malloc_mutex_trylock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isthreaded</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>malloc_mutex_trylock_final</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>locked</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mutex_owner_stats_update</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>malloc_mutex_prof_merge</name><parameter_list>(<parameter><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sum</name><operator>-&gt;</operator><name>tot_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>tot_wait_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sum</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sum</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>n_wait_times</name></name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>n_wait_times</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>n_spin_acquired</name></name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>n_spin_acquired</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sum</name><operator>-&gt;</operator><name>max_n_thds</name></name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>max_n_thds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>max_n_thds</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>max_n_thds</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_n_waiting_thds</name> <init>= <expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sum</name><operator>-&gt;</operator><name>n_waiting_thds</name></name></expr></argument>,
<argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_n_waiting_thds</name> <init>= <expr><name>cur_n_waiting_thds</name> <operator>+</operator> <call><name>atomic_load_u32</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>n_waiting_thds</name></name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sum</name><operator>-&gt;</operator><name>n_waiting_thds</name></name></expr></argument>, <argument><expr><name>new_n_waiting_thds</name></expr></argument>,
<argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>n_owner_switches</name></name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>n_owner_switches</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>n_lock_ops</name></name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>n_lock_ops</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>malloc_mutex_lock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isthreaded</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>malloc_mutex_trylock_final</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_lock_slow</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>locked</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mutex_owner_stats_update</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>malloc_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>locked</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isthreaded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MALLOC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>malloc_mutex_assert_owner</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>witness_assert_owner</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>malloc_mutex_assert_not_owner</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>malloc_mutex_prof_read</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>prof_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>*</operator><name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>n_waiting_thds</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>malloc_mutex_prof_accum</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>prof_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>tot_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>tot_wait_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_wait_times</name></name> <operator>+=</operator> <name><name>source</name><operator>-&gt;</operator><name>n_wait_times</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_spin_acquired</name></name> <operator>+=</operator> <name><name>source</name><operator>-&gt;</operator><name>n_spin_acquired</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>max_n_thds</name></name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>max_n_thds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>max_n_thds</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>max_n_thds</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>n_waiting_thds</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_owner_switches</name></name> <operator>+=</operator> <name><name>source</name><operator>-&gt;</operator><name>n_owner_switches</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_lock_ops</name></name> <operator>+=</operator> <name><name>source</name><operator>-&gt;</operator><name>n_lock_ops</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
