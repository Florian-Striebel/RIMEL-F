<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/sc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_types.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LG_NGROUP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LG_TINY_MIN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SC_LG_TINY_MIN</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported LG_TINY_MIN"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_NGROUP</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; SC_LG_NGROUP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_PTR_BITS</name></cpp:macro> <cpp:value>((1ULL &lt;&lt; LG_SIZEOF_PTR) * 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_NTINY</name></cpp:macro> <cpp:value>(LG_QUANTUM - SC_LG_TINY_MIN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LG_TINY_MAXCLASS</name></cpp:macro> <cpp:value>(LG_QUANTUM &gt; SC_LG_TINY_MIN ? LG_QUANTUM - 1 : -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_NPSEUDO</name></cpp:macro> <cpp:value>SC_NGROUP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LG_FIRST_REGULAR_BASE</name></cpp:macro> <cpp:value>(LG_QUANTUM + SC_LG_NGROUP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LG_BASE_MAX</name></cpp:macro> <cpp:value>(SC_PTR_BITS - 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_NREGULAR</name></cpp:macro> <cpp:value>(SC_NGROUP * (SC_LG_BASE_MAX - SC_LG_FIRST_REGULAR_BASE + 1) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_NSIZES</name></cpp:macro> <cpp:value>(SC_NTINY + SC_NPSEUDO + SC_NREGULAR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_NPSIZES</name></cpp:macro> <cpp:value>( SC_NSIZES - (LG_PAGE - 1 - SC_LG_FIRST_REGULAR_BASE) * SC_NGROUP - SC_NPSEUDO - SC_NTINY - (SC_LG_NGROUP * SC_NGROUP))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_NBINS</name></cpp:macro> <cpp:value>( SC_NTINY + SC_NPSEUDO + SC_NGROUP * (LG_PAGE + SC_LG_NGROUP - SC_LG_FIRST_REGULAR_BASE) - 1)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SC_NBINS</name> <operator>&gt;</operator> <literal type="number">256</literal><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Too many small size classes"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LOOKUP_MAXCLASS</name></cpp:macro> <cpp:value>((size_t)1 &lt;&lt; 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_SMALL_MAX_BASE</name></cpp:macro> <cpp:value>((size_t)1 &lt;&lt; (LG_PAGE + SC_LG_NGROUP - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_SMALL_MAX_DELTA</name></cpp:macro> <cpp:value>((size_t)1 &lt;&lt; (LG_PAGE - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_SMALL_MAXCLASS</name></cpp:macro> <cpp:value>(SC_SMALL_MAX_BASE + (SC_NGROUP - 1) * SC_SMALL_MAX_DELTA)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LARGE_MINCLASS</name></cpp:macro> <cpp:value>((size_t)1ULL &lt;&lt; (LG_PAGE + SC_LG_NGROUP))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LG_LARGE_MINCLASS</name></cpp:macro> <cpp:value>(LG_PAGE + SC_LG_NGROUP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_MAX_BASE</name></cpp:macro> <cpp:value>((size_t)1 &lt;&lt; (SC_PTR_BITS - 2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_MAX_DELTA</name></cpp:macro> <cpp:value>((size_t)1 &lt;&lt; (SC_PTR_BITS - 2 - SC_LG_NGROUP))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SC_LARGE_MAXCLASS</name></cpp:macro> <cpp:value>(SC_MAX_BASE + (SC_NGROUP - 1) * SC_MAX_DELTA)</cpp:value></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>sc_s</name></name></type> <name>sc_t</name>;</typedef>
<struct>struct <name>sc_s</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lg_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lg_delta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ndelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pgs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lg_delta_lookup</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>sc_data_s</name></name></type> <name>sc_data_t</name>;</typedef>
<struct>struct <name>sc_data_s</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>ntiny</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlbins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nbins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lg_ceil_nsizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>npsizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lg_tiny_maxclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lookup_maxclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>small_maxclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lg_large_minclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>large_minclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>large_maxclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sc_t</name></type> <name><name>sc</name><index>[<expr><name>SC_NSIZES</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>void</name></type> <name>sc_data_init</name><parameter_list>(<parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sc_data_update_slab_size</name><parameter_list>(<parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pgs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sc_boot</name><parameter_list>(<parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
