<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/tsd_tls.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_TSD_TLS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file should be included only once, by tsd.h.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_TSD_TLS_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_TSD_TYPE_ATTR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__thread type JEMALLOC_TLS_MODEL</cpp:value></cpp:define>
<extern>extern JEMALLOC_TSD_TYPE_ATTR(tsd_t</extern>) <expr_stmt><expr><name>tsd_tls</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_key_t</name></type> <name>tsd_tsd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>tsd_booted</name></decl>;</decl_stmt>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>tsd_boot0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsd_tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsd_cleanup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tsd_booted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>tsd_boot1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>tsd_boot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>tsd_boot0</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>tsd_booted_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>tsd_booted</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>tsd_get_allocates</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tsd_t</name> <modifier>*</modifier></type>
<name>tsd_get</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>tsd_tls</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>tsd_set</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tsd_booted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsd_tls</name> <operator>!=</operator> <name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tsd_tls</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>val</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>tsd_tsd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>tsd_tls</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_write</name><argument_list>(<argument><expr><literal type="string">"&lt;jemalloc&gt;: Error setting tsd.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_abort</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
