<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/quantum.h"</cpp:file></cpp:include>
<typedef>typedef <type><name>unsigned</name></type> <name>pszind_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name></type> <name>szind_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>malloc_cpuid_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ARENA_BITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_TCACHE_BITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_LG_ALIGN_BITS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ARENA_SHIFT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_TCACHE_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ARENA_MASK</name></cpp:macro> <cpp:value>(((1 &lt;&lt; MALLOCX_ARENA_BITS) - 1) &lt;&lt; MALLOCX_ARENA_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ARENA_LIMIT</name></cpp:macro> <cpp:value>((1 &lt;&lt; MALLOCX_ARENA_BITS) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_TCACHE_MASK</name></cpp:macro> <cpp:value>(((1 &lt;&lt; MALLOCX_TCACHE_BITS) - 1) &lt;&lt; MALLOCX_TCACHE_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_TCACHE_MAX</name></cpp:macro> <cpp:value>((1 &lt;&lt; MALLOCX_TCACHE_BITS) - 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_LG_ALIGN_MASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; MALLOCX_LG_ALIGN_BITS) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ALIGN_GET_SPECIFIED</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ZU(1) &lt;&lt; (flags &amp; MALLOCX_LG_ALIGN_MASK))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ALIGN_GET</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(MALLOCX_ALIGN_GET_SPECIFIED(flags) &amp; (SIZE_T_MAX-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ZERO_GET</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bool)(flags &amp; MALLOCX_ZERO))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_TCACHE_GET</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned)((flags &amp; MALLOCX_TCACHE_MASK) &gt;&gt; MALLOCX_TCACHE_SHIFT)) - 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ARENA_GET</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned)(((unsigned)flags) &gt;&gt; MALLOCX_ARENA_SHIFT)) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINY_MIN</name></cpp:macro> <cpp:value>(1U &lt;&lt; LG_TINY_MIN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG</name></cpp:macro> <cpp:value>((size_t)(1U &lt;&lt; LG_SIZEOF_LONG))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_MASK</name></cpp:macro> <cpp:value>(LONG - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_CEILING</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + LONG_MASK) &amp; ~LONG_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_PTR</name></cpp:macro> <cpp:value>(1U &lt;&lt; LG_SIZEOF_PTR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_MASK</name></cpp:macro> <cpp:value>(SIZEOF_PTR - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_CEILING</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + PTR_MASK) &amp; ~PTR_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_CACHELINE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHELINE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHELINE_MASK</name></cpp:macro> <cpp:value>(CACHELINE - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHELINE_CEILING</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((s) + CACHELINE_MASK) &amp; ~CACHELINE_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT_ADDR2BASE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)((uintptr_t)(a) &amp; ((~(alignment)) + 1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT_ADDR2OFFSET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)((uintptr_t)(a) &amp; (alignment - 1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT_CEILING</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((s) + (alignment - 1)) &amp; ((~(alignment)) + 1))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&lt;</operator> <literal type="number">199901L</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alloca</name></cpp:macro> <cpp:value>_alloca</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAS_ALLOCA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIABLE_ARRAY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type *name = alloca(sizeof(type) * (count))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIABLE_ARRAY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name[(count)]</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
