<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/tests/modules/hooks.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redismodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>RedisModuleDict</name> <modifier>*</modifier></type><name>event_log</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>EventElement</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>last_val_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>last_val_int</name></decl>;</decl_stmt>
}</block></struct></type> <name>EventElement</name>;</typedef>
<function><type><name>void</name></type> <name>LogStringEvent</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>keyname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EventElement</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>RedisModule_DictGetC</name><argument_list>(<argument><expr><name>event_log</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>keyname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>RedisModule_Alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventElement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventElement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_DictSetC</name><argument_list>(<argument><expr><name>event_log</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>keyname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RedisModule_FreeString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name> <operator>=</operator> <call><name>RedisModule_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>LogNumericEvent</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>keyname</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>EventElement</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>RedisModule_DictGetC</name><argument_list>(<argument><expr><name>event_log</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>keyname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>RedisModule_Alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventElement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventElement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_DictSetC</name><argument_list>(<argument><expr><name>event_log</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>keyname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_int</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>FreeEvent</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>EventElement</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RedisModule_FreeString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RedisModule_Free</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>cmdEventCount</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>RedisModule_WrongArity</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>EventElement</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>RedisModule_DictGet</name><argument_list>(<argument><expr><name>event_log</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><ternary><condition><expr><name>event</name></expr>?</condition><then> <expr><name><name>event</name><operator>-&gt;</operator><name>count</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>cmdEventLast</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>RedisModule_WrongArity</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>EventElement</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>RedisModule_DictGet</name><argument_list>(<argument><expr><name>event_log</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RedisModule_ReplyWithString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RedisModule_ReplyWithNull</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>clearEvents</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EventElement</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleDictIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>RedisModule_DictIteratorStart</name><argument_list>(<argument><expr><name>event_log</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>RedisModule_DictNext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_int</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RedisModule_FreeString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>last_val_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_DictDel</name><argument_list>(<argument><expr><name>event_log</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_Free</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>RedisModule_DictIteratorStop</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>cmdEventsClear</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearEvents</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>clientChangeCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleClientInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"client-connected"</literal></expr> </then><else>: <expr><literal type="string">"client-disconnected"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>flushdbCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleFlushInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_FLUSHDB_START</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"flush-start"</literal></expr> </then><else>: <expr><literal type="string">"flush-end"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>roleChangeCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleReplicationInfo</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>==</operator> <name>REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"role-master"</literal></expr> </then><else>: <expr><literal type="string">"role-replica"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogStringEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>masterhost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>replicationChangeCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"replica-online"</literal></expr> </then><else>: <expr><literal type="string">"replica-offline"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rasterLinkChangeCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_MASTER_LINK_UP</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"masterlink-up"</literal></expr> </then><else>: <expr><literal type="string">"masterlink-down"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>persistenceCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>sub</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"persistence-rdb-start"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"persistence-aof-start"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_AOF_START</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"persistence-syncaof-start"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"persistence-syncrdb-start"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_PERSISTENCE_ENDED</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"persistence-end"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_PERSISTENCE_FAILED</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"persistence-failed"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"module-event-%s"</literal></expr></argument>, <argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START</name> <operator>||</operator>
<name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_AOF_START</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>loadingCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>sub</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDISMODULE_SUBEVENT_LOADING_RDB_START</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"loading-rdb-start"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_LOADING_AOF_START</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"loading-aof-start"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_LOADING_REPL_START</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"loading-repl-start"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_LOADING_ENDED</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"loading-end"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>REDISMODULE_SUBEVENT_LOADING_FAILED</name></expr>:</case> <expr_stmt><expr><name>keyname</name> <operator>=</operator> <literal type="string">"loading-failed"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>loadingProgressCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleLoadingProgress</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"loading-progress-rdb"</literal></expr> </then><else>: <expr><literal type="string">"loading-progress-aof"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>shutdownCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"module-event-%s"</literal></expr></argument>, <argument><expr><literal type="string">"shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>cronLoopCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleCronLoop</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"cron-loop"</literal></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>hz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>moduleChangeCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleModuleChange</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_MODULE_LOADED</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"module-loaded"</literal></expr> </then><else>: <expr><literal type="string">"module-unloaded"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogStringEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>module_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>swapDbCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleSwapDbInfo</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"swapdb-first"</literal></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>dbnum_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LogNumericEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"swapdb-second"</literal></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>dbnum_second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>RedisModule_OnLoad</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VerifySubEventSupported</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!RedisModule_IsSubEventSupported(e, s)) { return REDISMODULE_ERR; }</cpp:value></cpp:define>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RedisModule_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"testhook"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>REDISMODULE_APIVER_1</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RedisModule_IsSubEventSupported</name><argument_list>(<argument><expr><name>RedisModuleEvent_ReplicationRoleChanged</name></expr></argument>, <argument><expr><name>REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_ReplicationRoleChanged</name></expr></argument>, <argument><expr><name>roleChangeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_ReplicaChange</name></expr></argument>, <argument><expr><name>replicationChangeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_MasterLinkChange</name></expr></argument>, <argument><expr><name>rasterLinkChangeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_Persistence</name></expr></argument>, <argument><expr><name>persistenceCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_Loading</name></expr></argument>, <argument><expr><name>loadingCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_LoadingProgress</name></expr></argument>, <argument><expr><name>loadingProgressCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_ClientChange</name></expr></argument>, <argument><expr><name>clientChangeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_FlushDB</name></expr></argument>, <argument><expr><name>flushdbCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_Shutdown</name></expr></argument>, <argument><expr><name>shutdownCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_CronLoop</name></expr></argument>, <argument><expr><name>cronLoopCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_ModuleChange</name></expr></argument>, <argument><expr><name>moduleChangeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_SwapDB</name></expr></argument>, <argument><expr><name>swapDbCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>event_log</name> <operator>=</operator> <call><name>RedisModule_CreateDict</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"hooks.event_count"</literal></expr></argument>, <argument><expr><name>cmdEventCount</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"hooks.event_last"</literal></expr></argument>, <argument><expr><name>cmdEventLast</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"hooks.clear"</literal></expr></argument>, <argument><expr><name>cmdEventsClear</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>RedisModule_OnUnload</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>clearEvents</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_FreeDict</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>event_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>event_log</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
