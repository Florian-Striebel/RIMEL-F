<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/childinfo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>cow_updated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>childInfoType</name></type> <name>information_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>child_info_data</name>;</typedef>
<function><type><name>void</name></type> <name>openChildInfoPipe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>anetPipe</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name></name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>closeChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_nread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>closeChildInfoPipe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_nread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sendChildInfoGeneric</name><parameter_list>(<parameter><decl><type><name>childInfoType</name></type> <name>info_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>monotime</name></type> <name>cow_updated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>cow_update_cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>cow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>peak_cow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>update_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>sum_cow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>child_info_data</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>now</name> <init>= <expr><call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>info_type</name> <operator>!=</operator> <name>CHILD_INFO_TYPE_CURRENT_INFO</name> <operator>||</operator>
<operator>!</operator><name>cow_updated</name> <operator>||</operator>
<name>now</name> <operator>-</operator> <name>cow_updated</name> <operator>&gt;</operator> <name>cow_update_cost</name> <operator>*</operator> <name>CHILD_COW_DUTY_CYCLE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cow</name> <operator>=</operator> <call><name>zmalloc_get_private_dirty</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cow_updated</name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cow_update_cost</name> <operator>=</operator> <name>cow_updated</name> <operator>-</operator> <name>now</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cow</name> <operator>&gt;</operator> <name>peak_cow</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>peak_cow</name> <operator>=</operator> <name>cow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sum_cow</name> <operator>+=</operator> <name>cow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>update_count</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cow_info</name> <init>= <expr><operator>(</operator><name>info_type</name> <operator>!=</operator> <name>CHILD_INFO_TYPE_CURRENT_INFO</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cow</name> <operator>||</operator> <name>cow_info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><ternary><condition><expr><name>cow_info</name></expr> ?</condition><then> <expr><name>LL_NOTICE</name></expr> </then><else>: <expr><name>LL_VERBOSE</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"Fork CoW for %s: current %zu MB, peak %zu MB, average %llu MB"</literal></expr></argument>,
<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>cow</name><operator>&gt;&gt;</operator><literal type="number">20</literal></expr></argument>, <argument><expr><name>peak_cow</name><operator>&gt;&gt;</operator><literal type="number">20</literal></expr></argument>, <argument><expr><operator>(</operator><name>sum_cow</name><operator>/</operator><name>update_count</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>information_type</name></name> <operator>=</operator> <name>info_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>keys</name></name> <operator>=</operator> <name>keys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cow</name></name> <operator>=</operator> <name>cow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cow_updated</name></name> <operator>=</operator> <name>cow_updated</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name>progress</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>wlen</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>updateChildInfo</name><parameter_list>(<parameter><decl><type><name>childInfoType</name></type> <name>information_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cow</name></decl></parameter>, <parameter><decl><type><name>monotime</name></type> <name>cow_updated</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cow</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name> <operator>=</operator> <name>cow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>information_type</name> <operator>==</operator> <name>CHILD_INFO_TYPE_CURRENT_INFO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_bytes</name></name> <operator>=</operator> <name>cow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_updated</name></name> <operator>=</operator> <name>cow_updated</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_processed</name></name> <operator>=</operator> <name>keys</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>progress</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_module_progress</name></name> <operator>=</operator> <name>progress</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>information_type</name> <operator>==</operator> <name>CHILD_INFO_TYPE_AOF_COW_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_aof_cow_bytes</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>information_type</name> <operator>==</operator> <name>CHILD_INFO_TYPE_RDB_COW_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_rdb_cow_bytes</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>information_type</name> <operator>==</operator> <name>CHILD_INFO_TYPE_MODULE_COW_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_module_cow_bytes</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>readChildInfo</name><parameter_list>(<parameter><decl><type><name>childInfoType</name> <modifier>*</modifier></type><name>information_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>cow</name></decl></parameter>, <parameter><decl><type><name>monotime</name> <modifier>*</modifier></type><name>cow_updated</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>child_info_data</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_nread</name></name> <operator>==</operator> <name>wlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_nread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buffer</name> <operator>+</operator> <name><name>server</name><operator>.</operator><name>child_info_nread</name></name></expr></argument>, <argument><expr><name>wlen</name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>child_info_nread</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_nread</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_nread</name></name> <operator>==</operator> <name>wlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>information_type</name> <operator>=</operator> <name><name>buffer</name><operator>.</operator><name>information_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cow</name> <operator>=</operator> <name><name>buffer</name><operator>.</operator><name>cow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cow_updated</name> <operator>=</operator> <name><name>buffer</name><operator>.</operator><name>cow_updated</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>keys</name> <operator>=</operator> <name><name>buffer</name><operator>.</operator><name>keys</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name><name>buffer</name><operator>.</operator><name>progress</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>receiveChildInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>cow_updated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>childInfoType</name></type> <name>information_type</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>readChildInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>information_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cow_updated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>updateChildInfo</name><argument_list>(<argument><expr><name>information_type</name></expr></argument>, <argument><expr><name>cow</name></expr></argument>, <argument><expr><name>cow_updated</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
