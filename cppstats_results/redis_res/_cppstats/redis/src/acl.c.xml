<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/acl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha256.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>Users</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>DefaultUser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>UsersToLoad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>ACLLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>rax</name> <modifier>*</modifier></type><name>commandId</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>nextid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>ACLCategoryItem</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flag</name></decl>;</decl_stmt>
}</block> <decl><name><name>ACLCommandCategories</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"keyspace"</literal></expr>, <expr><name>ACL_CATEGORY_KEYSPACE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"read"</literal></expr>, <expr><name>ACL_CATEGORY_READ</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"write"</literal></expr>, <expr><name>ACL_CATEGORY_WRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"set"</literal></expr>, <expr><name>ACL_CATEGORY_SET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sortedset"</literal></expr>, <expr><name>ACL_CATEGORY_SORTEDSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"list"</literal></expr>, <expr><name>ACL_CATEGORY_LIST</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"hash"</literal></expr>, <expr><name>ACL_CATEGORY_HASH</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"string"</literal></expr>, <expr><name>ACL_CATEGORY_STRING</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"bitmap"</literal></expr>, <expr><name>ACL_CATEGORY_BITMAP</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"hyperloglog"</literal></expr>, <expr><name>ACL_CATEGORY_HYPERLOGLOG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"geo"</literal></expr>, <expr><name>ACL_CATEGORY_GEO</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"stream"</literal></expr>, <expr><name>ACL_CATEGORY_STREAM</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pubsub"</literal></expr>, <expr><name>ACL_CATEGORY_PUBSUB</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"admin"</literal></expr>, <expr><name>ACL_CATEGORY_ADMIN</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fast"</literal></expr>, <expr><name>ACL_CATEGORY_FAST</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"slow"</literal></expr>, <expr><name>ACL_CATEGORY_SLOW</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"blocking"</literal></expr>, <expr><name>ACL_CATEGORY_BLOCKING</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dangerous"</literal></expr>, <expr><name>ACL_CATEGORY_DANGEROUS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"connection"</literal></expr>, <expr><name>ACL_CATEGORY_CONNECTION</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"transaction"</literal></expr>, <expr><name>ACL_CATEGORY_TRANSACTION</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"scripting"</literal></expr>, <expr><name>ACL_CATEGORY_SCRIPTING</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<struct>struct <name>ACLUserFlag</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flag</name></decl>;</decl_stmt>
}</block> <decl><name><name>ACLUserFlags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"on"</literal></expr>, <expr><name>USER_FLAG_ENABLED</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"off"</literal></expr>, <expr><name>USER_FLAG_DISABLED</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nopass"</literal></expr>, <expr><name>USER_FLAG_NOPASS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"skip-sanitize-payload"</literal></expr>, <expr><name>USER_FLAG_SANITIZE_PAYLOAD_SKIP</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sanitize-payload"</literal></expr>, <expr><name>USER_FLAG_SANITIZE_PAYLOAD</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<struct>struct <name>ACLSelectorFlags</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flag</name></decl>;</decl_stmt>
}</block> <decl><name><name>ACLSelectorFlags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"allkeys"</literal></expr>, <expr><name>SELECTOR_FLAG_ALLKEYS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"allchannels"</literal></expr>, <expr><name>SELECTOR_FLAG_ALLCHANNELS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"allcommands"</literal></expr>, <expr><name>SELECTOR_FLAG_ALLCOMMANDS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>allowed_commands</name><index>[<expr><name>USER_COMMAND_BITS_COUNT</name><operator>/</operator><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier><modifier>*</modifier></type><name>allowed_firstargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>patterns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>channels</name></decl>;</decl_stmt>
}</block></struct></type> <name>aclSelector</name>;</typedef>
<function_decl><type><name>void</name></type> <name>ACLResetFirstArgsForCommand</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ACLResetFirstArgs</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ACLAddAllowedFirstArg</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ACLFreeLogEntry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>le</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLSetSelector</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oplen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_PASSWORD_LEN</name></cpp:macro> <cpp:value>SHA256_BLOCK_SIZE*2</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>time_independent_strcmp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>bufa</name><index>[<expr><name>CONFIG_AUTHPASS_MAX_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bufb</name><index>[<expr><name>CONFIG_AUTHPASS_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>alen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>blen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bufa</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>blen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bufb</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufa</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bufa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufb</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bufb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufa</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufb</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bufa</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>|=</operator> <operator>(</operator><name><name>bufa</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^</operator> <name><name>bufb</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>|=</operator> <name>alen</name> <operator>^</operator> <name>blen</name></expr>;</expr_stmt>
<return>return <expr><name>diff</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>ACLHashPassword</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cleartext</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SHA256_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>SHA256_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr><name>HASH_PASSWORD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cset</name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>cleartext</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SHA256_BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>hex</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cset</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>hash</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xF0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hex</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cset</name><index>[<expr><operator>(</operator><name><name>hash</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>hex</name></expr></argument>,<argument><expr><name>HASH_PASSWORD_LEN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLCheckPasswordHash</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hashlen</name> <operator>!=</operator> <name>HASH_PASSWORD_LEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HASH_PASSWORD_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'a'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'f'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLStringHasSpaces</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>ACLGetCommandCategoryFlagByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLListMatchLoadedUser</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>definition</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>user_definition</name> <init>= <expr><name>definition</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>sdscmp</name><argument_list>(<argument><expr><name><name>user_definition</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLListMatchSds</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdscmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLListFreeSds</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>ACLListDupSds</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>pattern</name></decl>;</decl_stmt>
}</block></struct></type> <name>keyPattern</name>;</typedef>
<function><type><name>keyPattern</name> <modifier>*</modifier></type><name>ACLKeyPatternCreate</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>keyPattern</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><operator>(</operator><name>keyPattern</name> <operator>*</operator><operator>)</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyPattern</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLKeyPatternFree</name><parameter_list>(<parameter><decl><type><name>keyPattern</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>pattern</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLListMatchKeyPattern</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdscmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>keyPattern</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name>pattern</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>keyPattern</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name>pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLListFreeKeyPattern</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ACLKeyPatternFree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>ACLListDupKeyPattern</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>keyPattern</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><operator>(</operator><name>keyPattern</name> <operator>*</operator><operator>)</operator> <name>item</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ACLKeyPatternCreate</name><argument_list>(<argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>sdsCatPatternString</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>keyPattern</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <name>ACL_ALL_PERMISSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><literal type="string">"~"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <name>ACL_READ_PERMISSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><literal type="string">"%R~"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <name>ACL_WRITE_PERMISSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><literal type="string">"%W~"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Invalid key pattern flag detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>sdscatsds</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>aclSelector</name> <modifier>*</modifier></type><name>ACLCreateSelector</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aclSelector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>server</name><operator>.</operator><name>acl_pubsub_default</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetMatchMethod</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>,<argument><expr><name>ACLListMatchKeyPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>,<argument><expr><name>ACLListFreeKeyPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetDupMethod</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>,<argument><expr><name>ACLListDupKeyPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetMatchMethod</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,<argument><expr><name>ACLListMatchSds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,<argument><expr><name>ACLListFreeSds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetDupMethod</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,<argument><expr><name>ACLListDupSds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>selector</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLFreeSelector</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLResetFirstArgs</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>aclSelector</name> <modifier>*</modifier></type><name>ACLCopySelector</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aclSelector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>patterns</name></name> <operator>=</operator> <call><name>listDup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>listDup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,<argument><expr><name><name>src</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>allowed_firstargs</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>USER_COMMAND_BITS_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>src</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ACLAddAllowedFirstArg</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLListFreeSelector</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ACLFreeSelector</name><argument_list>(<argument><expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>ACLListDuplicateSelector</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ACLCopySelector</name><argument_list>(<argument><expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>aclSelector</name> <modifier>*</modifier></type><name>ACLUserGetRootSelector</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>user</name> <modifier>*</modifier></type><name>ACLCreateUser</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>Users</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>name</name></expr></argument>,<argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>USER_FLAG_DISABLED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetMatchMethod</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><name>ACLListMatchSds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><name>ACLListFreeSds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetDupMethod</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><name>ACLListDupSds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><name>ACLListFreeSelector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetDupMethod</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><name>ACLListDuplicateSelector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ACLCreateSelector</name><argument_list>(<argument><expr><name>SELECTOR_FLAG_ROOT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listAddNodeHead</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>Users</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>name</name></expr></argument>,<argument><expr><name>namelen</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>u</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>user</name> <modifier>*</modifier></type><name>ACLCreateUnlinkedUser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>username</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>username</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"__fakeuser:%d__"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>fakeuser</name> <init>= <expr><call><name>ACLCreateUser</name><argument_list>(<argument><expr><name>username</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fakeuser</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>Users</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>username</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fakeuser</name></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLFreeUser</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLFreeUserAndKillClients</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name> <operator>==</operator> <name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>DefaultUser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>current_client</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_CLOSE_AFTER_COMMAND</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ACLFreeUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLCopyUser</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>passwords</name></name> <operator>=</operator> <call><name>listDup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>selectors</name></name> <operator>=</operator> <call><name>listDup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLFreeUsersSet</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>users</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>users</name></expr></argument>,<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>ACLFreeUserAndKillClients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLGetCommandBitCoordinates</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name>USER_COMMAND_BITS_COUNT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>word</name> <operator>=</operator> <name>id</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bit</name> <operator>=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>id</name> <operator>%</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLGetSelectorCommandBit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>word</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLGetCommandBitCoordinates</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>word</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bit</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name><index>[<expr><name>word</name></expr>]</index></name> <operator>&amp;</operator> <name>bit</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLSelectorCanExecuteFutureCommands</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ACLGetSelectorCommandBit</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>USER_COMMAND_BITS_COUNT</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLSetSelectorCommandBit</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>word</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLGetCommandBitCoordinates</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>word</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bit</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name><index>[<expr><name>word</name></expr>]</index></name> <operator>|=</operator> <name>bit</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name><index>[<expr><name>word</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SELECTOR_FLAG_ALLCOMMANDS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLChangeSelectorPerm</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ACLSetSelectorCommandBit</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><name>allow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLResetFirstArgsForCommand</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><operator>(</operator>struct <name>redisCommand</name> <operator>*</operator><operator>)</operator><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ACLSetSelectorCommandBit</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>allow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLSetSelectorCommandBitsForCategoryLogic</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>cflag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>&amp;</operator> <name>cflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ACLChangeSelectorPerm</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ACLSetSelectorCommandBitsForCategoryLogic</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>, <argument><expr><name>selector</name></expr></argument>, <argument><expr><name>cflag</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLSetSelectorCommandBitsForCategory</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cflag</name> <init>= <expr><call><name>ACLGetCommandCategoryFlagByName</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cflag</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ACLSetSelectorCommandBitsForCategoryLogic</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>, <argument><expr><name>selector</name></expr></argument>, <argument><expr><name>cflag</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLCountCategoryBitsForCommands</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>on</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>cflag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>&amp;</operator> <name>cflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLGetSelectorCommandBit</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>on</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ACLCountCategoryBitsForCommands</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>, <argument><expr><name>selector</name></expr></argument>, <argument><expr><name>on</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLCountCategoryBitsForSelector</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>on</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>off</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cflag</name> <init>= <expr><call><name>ACLGetCommandCategoryFlagByName</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cflag</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>on</name> <operator>=</operator> <operator>*</operator><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLCountCategoryBitsForCommands</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>, <argument><expr><name>selector</name></expr></argument>, <argument><expr><name>on</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>ACLDescribeSelectorCommandRulesSingleCommands</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>fake_selector</name></decl></parameter>,
<parameter><decl><type><name>sds</name></type> <name>rules</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>userbit</name> <init>= <expr><call><name>ACLGetSelectorCommandBit</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fakebit</name> <init>= <expr><call><name>ACLGetSelectorCommandBit</name><argument_list>(<argument><expr><name>fake_selector</name></expr></argument>,<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>userbit</name> <operator>!=</operator> <name>fakebit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rules</name></expr></argument>, <argument><expr><ternary><condition><expr><name>userbit</name></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLChangeSelectorPerm</name><argument_list>(<argument><expr><name>fake_selector</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>userbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>ACLDescribeSelectorCommandRulesSingleCommands</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>fake_selector</name></expr></argument>,<argument><expr><name>rules</name></expr></argument>,<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>userbit</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>&amp;&amp;</operator>
<name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><literal type="string">"+"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><literal type="string">"|"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rules</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>ACLDescribeSelectorCommandRules</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>rules</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>additive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aclSelector</name></type> <name>fs</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>fake_selector</name> <init>= <expr><operator>&amp;</operator><name>fs</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLSelectorCanExecuteFutureCommands</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>additive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><literal type="string">"+@all "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetSelector</name><argument_list>(<argument><expr><name>fake_selector</name></expr></argument>,<argument><expr><literal type="string">"+@all"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>additive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><literal type="string">"-@all "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetSelector</name><argument_list>(<argument><expr><name>fake_selector</name></expr></argument>,<argument><expr><literal type="string">"-@all"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>aclSelector</name></type> <name>ts</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>temp_selector</name> <init>= <expr><operator>&amp;</operator><name>ts</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>applied</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACLCommandCategories</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ACLCommandCategories</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>applied</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>applied</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>temp_selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,
<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>best</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mindiff</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>maxsame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>applied</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>on</name></decl>, <decl><type ref="prev"/><name>off</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>same</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ACLCountCategoryBitsForSelector</name><argument_list>(<argument><expr><name>temp_selector</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>on</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>off</name></expr></argument>,<argument><expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <ternary><condition><expr><name>additive</name></expr> ?</condition><then> <expr><name>off</name></expr> </then><else>: <expr><name>on</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>same</name> <operator>=</operator> <ternary><condition><expr><name>additive</name></expr> ?</condition><then> <expr><name>on</name></expr> </then><else>: <expr><name>off</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>same</name> <operator>&gt;</operator> <name>diff</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>diff</name> <operator>&lt;</operator> <name>mindiff</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>diff</name> <operator>==</operator> <name>mindiff</name> <operator>&amp;&amp;</operator> <name>same</name> <operator>&gt;</operator> <name>maxsame</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>best</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mindiff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxsame</name> <operator>=</operator> <name>same</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>best</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>op</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><ternary><condition><expr><name>additive</name></expr> ?</condition><then> <expr><literal type="string">"+@"</literal></expr> </then><else>: <expr><literal type="string">"-@"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><name><name>ACLCommandCategories</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetSelector</name><argument_list>(<argument><expr><name>fake_selector</name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>invop</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><ternary><condition><expr><name>additive</name></expr> ?</condition><then> <expr><literal type="string">"-@"</literal></expr> </then><else>: <expr><literal type="string">"+@"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>invop</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>invop</name></expr></argument>,<argument><expr><name><name>ACLCommandCategories</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetSelector</name><argument_list>(<argument><expr><name>temp_selector</name></expr></argument>,<argument><expr><name>invop</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>invop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>applied</name><index>[<expr><name>best</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>ACLDescribeSelectorCommandRulesSingleCommands</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>fake_selector</name></expr></argument>,<argument><expr><name>rules</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>rules</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>fake_selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,
<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"CRITICAL ERROR: User ACLs don't match final bitmap: '%s'"</literal></expr></argument>,
<argument><expr><name>rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"No bitmap match in ACLDescribeSelectorCommandRules()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rules</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>ACLDescribeSelector</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>res</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLKEYS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"~* "</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>keyPattern</name> <modifier>*</modifier></type><name>thispat</name> <init>= <expr><operator>(</operator><name>keyPattern</name> <operator>*</operator><operator>)</operator><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdsCatPatternString</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>thispat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLCHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"&amp;* "</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"resetchannels "</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>thispat</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"&amp;"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>thispat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>rules</name> <init>= <expr><call><name>ACLDescribeSelectorCommandRules</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>ACLDescribeUser</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>res</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ACLUserFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>ACLUserFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name><name>ACLUserFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>thispass</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"#"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>thispass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name> <init>= <expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>default_perm</name> <init>= <expr><call><name>ACLDescribeSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ROOT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>default_perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name>default_perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>default_perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>ACLLookupCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsname</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>lookupCommandBySdsLogic</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>,<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLResetFirstArgsForCommand</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>&amp;&amp;</operator> <name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLResetFirstArgs</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>USER_COMMAND_BITS_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLAddAllowedFirstArg</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><name>USER_COMMAND_BITS_COUNT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sds</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>items</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>items</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>items</name></expr>]</index></name></expr></argument>,<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>items</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>items</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>items</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>items</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>aclSelector</name> <modifier>*</modifier></type><name>aclCreateSelectorFromOpSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>opsetlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>opset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>opset</name><index>[<expr><name>opsetlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ACLCreateSelector</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>trimmed</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>opset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>opsetlen</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>sdssplitargs</name><argument_list>(<argument><expr><name>trimmed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLSetSelector</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ACLFreeSelector</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>trimmed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLSetSelector</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oplen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"allkeys"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"~*"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SELECTOR_FLAG_ALLKEYS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"resetkeys"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SELECTOR_FLAG_ALLKEYS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"allchannels"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"&amp;*"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SELECTOR_FLAG_ALLCHANNELS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"resetchannels"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SELECTOR_FLAG_ALLCHANNELS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"allcommands"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"+@all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SELECTOR_FLAG_ALLCOMMANDS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLResetFirstArgs</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"nocommands"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"-@all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_commands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SELECTOR_FLAG_ALLCOMMANDS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLResetFirstArgs</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>||</operator> <name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLKEYS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>oplen</name></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><name><name>op</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ACL_READ_PERMISSION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ACL_READ_PERMISSION</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><name><name>op</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'W'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ACL_WRITE_PERMISSION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ACL_WRITE_PERMISSION</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>ACL_ALL_PERMISSION</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLStringHasSpaces</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><name>offset</name></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>keyPattern</name> <modifier>*</modifier></type><name>newpat</name> <init>= <expr><call><name>ACLKeyPatternCreate</name><argument_list>(<argument><expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><name>offset</name></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><name>offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>,<argument><expr><name>newpat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>,<argument><expr><name>newpat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>keyPattern</name> <operator>*</operator><operator>)</operator><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>flags</name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLKeyPatternFree</name><argument_list>(<argument><expr><name>newpat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SELECTOR_FLAG_ALLKEYS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLCHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLStringHasSpaces</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>newpat</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,<argument><expr><name>newpat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,<argument><expr><name>newpat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>newpat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SELECTOR_FLAG_ALLCHANNELS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strrchr</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>ACLLookupCommand</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ACLChangeSelectorPerm</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>,<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>ACLLookupCommand</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECHILD</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>ACLLookupCommand</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ACLChangeSelectorPerm</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Deprecation warning: Allowing a first arg of an otherwise "</literal>
<literal type="string">"blocked command is a misuse of ACL and may get disabled "</literal>
<literal type="string">"in the future (offender: +%s)"</literal></expr></argument>, <argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLAddAllowedFirstArg</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>ACLLookupCommand</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ACLChangeSelectorPerm</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bitval</name> <init>= <expr><ternary><condition><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLSetSelectorCommandBitsForCategory</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>op</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>bitval</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLSetUser</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>oplen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oplen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>oplen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>oplen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>USER_FLAG_ENABLED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USER_FLAG_DISABLED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>USER_FLAG_DISABLED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USER_FLAG_ENABLED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"skip-sanitize-payload"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>USER_FLAG_SANITIZE_PAYLOAD_SKIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USER_FLAG_SANITIZE_PAYLOAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"sanitize-payload"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USER_FLAG_SANITIZE_PAYLOAD_SKIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>USER_FLAG_SANITIZE_PAYLOAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"nopass"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>USER_FLAG_NOPASS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"resetpass"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USER_FLAG_NOPASS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>newpass</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newpass</name> <operator>=</operator> <call><name>ACLHashPassword</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLCheckPasswordHash</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADMSG</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>newpass</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><name>newpass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><name>newpass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>newpass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USER_FLAG_NOPASS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>delpass</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delpass</name> <operator>=</operator> <call><name>ACLHashPassword</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLCheckPasswordHash</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADMSG</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>delpass</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>oplen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><name>delpass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>delpass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENODEV</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>op</name><index>[<expr><name>oplen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name> <init>= <expr><call><name>aclCreateSelectorFromOpSet</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>oplen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>selector</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>, <argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"clearselectors"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"resetpass"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"resetkeys"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"resetchannels"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>acl_pubsub_default</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLCHANNELS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"allchannels"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"off"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"sanitize-payload"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"clearselectors"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"-@all"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name> <init>= <expr><call><name>ACLUserGetRootSelector</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLSetSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>oplen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ACLSetUserStringError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><literal type="string">"Wrong format"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"Unknown command or category name in ACL"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"Syntax error"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"Adding a pattern after the * pattern (or the "</literal>
<literal type="string">"'allkeys' flag) is not valid and does not have any "</literal>
<literal type="string">"effect. Try 'resetkeys' to start with an empty "</literal>
<literal type="string">"list of patterns"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"Adding a pattern after the * pattern (or the "</literal>
<literal type="string">"'allchannels' flag) is not valid and does not have any "</literal>
<literal type="string">"effect. Try 'resetchannels' to start with an empty "</literal>
<literal type="string">"list of channels"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENODEV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"The password you are trying to remove from the user does "</literal>
<literal type="string">"not exist"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EBADMSG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"The password hash must be exactly 64 characters and contain "</literal>
<literal type="string">"only lowercase hexadecimal characters"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EALREADY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"Duplicate user found. A user can only be defined once in "</literal>
<literal type="string">"config files"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ECHILD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"Allowing first-arg of a subcommand is not supported"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>errmsg</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>user</name> <modifier>*</modifier></type><name>ACLCreateDefaultUser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>ACLCreateUser</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><literal type="string">"+@all"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><literal type="string">"~*"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><literal type="string">"&amp;*"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><literal type="string">"on"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><literal type="string">"nopass"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Users</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UsersToLoad</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetMatchMethod</name><argument_list>(<argument><expr><name>UsersToLoad</name></expr></argument>, <argument><expr><name>ACLListMatchLoadedUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ACLLog</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DefaultUser</name> <operator>=</operator> <call><name>ACLCreateDefaultUser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLCheckUserCredentials</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>ACLGetUserByName</name><argument_list>(<argument><expr><name><name>username</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>username</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>USER_FLAG_DISABLED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>USER_FLAG_NOPASS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_OK</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>hashed</name> <init>= <expr><call><name>ACLHashPassword</name><argument_list>(<argument><expr><name><name>password</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>password</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>thispass</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>time_independent_strcmp</name><argument_list>(<argument><expr><name>hashed</name></expr></argument>, <argument><expr><name>thispass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>hashed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>hashed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLAuthenticateUser</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLCheckUserCredentials</name><argument_list>(<argument><expr><name>username</name></expr></argument>,<argument><expr><name>password</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>ACLGetUserByName</name><argument_list>(<argument><expr><name><name>username</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>username</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleNotifyUserChanged</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addACLLogEntry</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ACL_DENIED_AUTH</name></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name><operator>)</operator></expr> ?</condition><then> <expr><name>ACL_LOG_CTX_MULTI</name></expr> </then><else>: <expr><name>ACL_LOG_CTX_TOPLEVEL</name></expr></else></ternary></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>username</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>unsigned</name> <name>long</name></type> <name>ACLGetCommandID</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>cmdname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>lowername</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdstolower</name><argument_list>(<argument><expr><name>lowername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>commandId</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>commandId</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>lowername</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>lowername</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>lowername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>lowername</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>lowername</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>nextid</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>lowername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>thisid</name> <init>= <expr><name>nextid</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>nextid</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nextid</name> <operator>==</operator> <name>USER_COMMAND_BITS_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nextid</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>thisid</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLClearCommandID</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>commandId</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>commandId</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>user</name> <modifier>*</modifier></type><name>ACLGetUserByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>myuser</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>Users</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>name</name></expr></argument>,<argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>myuser</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>myuser</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ACLSelectorCheckKey</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyspec_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLKEYS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ACL_OK</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>keyspec_flags</name> <operator>&amp;</operator> <name>CMD_KEY_ACCESS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key_flags</name> <operator>|=</operator> <name>ACL_READ_PERMISSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keyspec_flags</name> <operator>&amp;</operator> <name>CMD_KEY_INSERT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key_flags</name> <operator>|=</operator> <name>ACL_WRITE_PERMISSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keyspec_flags</name> <operator>&amp;</operator> <name>CMD_KEY_DELETE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key_flags</name> <operator>|=</operator> <name>ACL_WRITE_PERMISSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keyspec_flags</name> <operator>&amp;</operator> <name>CMD_KEY_UPDATE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key_flags</name> <operator>|=</operator> <name>ACL_WRITE_PERMISSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>keyPattern</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pattern</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>key_flags</name><operator>)</operator> <operator>!=</operator> <name>key_flags</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>pattern</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stringmatchlen</name><argument_list>(<argument><expr><name><name>pattern</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>,<argument><expr><name>plen</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ACL_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>ACL_DENIED_KEY</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ACLDoesCommandHaveChannels</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>publishCommand</name>
<operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>subscribeCommand</name>
<operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>psubscribeCommand</name>
<operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>spublishCommand</name>
<operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>ssubscribeCommand</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ACLCheckChannelAgainstList</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>reference</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channellen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>reference</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>pattern</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>literal</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><name>channel</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>literal</name> <operator>&amp;&amp;</operator> <call><name>stringmatchlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><name>plen</name></expr></argument>,<argument><expr><name>channel</name></expr></argument>,<argument><expr><name>channellen</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>ACL_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>ACL_DENIED_CHANNEL</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ACLSelectorCheckPubsubArguments</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idxptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>idx</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>idx</name><operator>+</operator><name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLCheckChannelAgainstList</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>literal</name> <operator>!=</operator> <name>ACL_OK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idxptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>idxptr</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ACL_DENIED_CHANNEL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>ACL_OK</name></expr>;</return>
</block_content>}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>keys_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getKeysResult</name></type> <name>keys</name></decl>;</decl_stmt>
}</block></struct></type> <name>aclKeyResultCache</name>;</typedef>
<function><type><name>void</name></type> <name>initACLKeyResultCache</name><parameter_list>(<parameter><decl><type><name>aclKeyResultCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>keys_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>cleanupACLKeyResultCache</name><parameter_list>(<parameter><decl><type><name>aclKeyResultCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>keys_init</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>getKeysFreeResult</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>keys</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ACLSelectorCheckCmd</name><parameter_list>(<parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keyidxptr</name></decl></parameter>, <parameter><decl><type><name>aclKeyResultCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLCOMMANDS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_NO_AUTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLGetSelectorCommandBit</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>ACL_DENIED_CMD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>subid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>subid</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ACL_DENIED_CMD</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><ternary><condition><expr><name><name>cmd</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>allowed_firstargs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>subid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subid</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLKEYS</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>doesCommandHaveKeys</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>keys_init</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <operator>(</operator><name>getKeysResult</name><operator>)</operator> <name>GETKEYS_RESULT_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getKeysFromCommandWithSpecs</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>GET_KEYSPEC_DEFAULT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>keys</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>keys_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>keys</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>resultidx</name> <init>= <expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>resultidx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ACLSelectorCheckKey</name><argument_list>(<argument><expr><name>selector</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>resultidx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>resultidx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>keyidxptr</name> <operator>=</operator> <name><name>resultidx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>selector</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLCHANNELS</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ACLDoesCommandHaveChannels</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>publishCommand</name> <operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>spublishCommand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ACLSelectorCheckPubsubArguments</name><argument_list>(<argument><expr><name>selector</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyidxptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>subscribeCommand</name> <operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>ssubscribeCommand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ACLSelectorCheckPubsubArguments</name><argument_list>(<argument><expr><name>selector</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyidxptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>psubscribeCommand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ACLSelectorCheckPubsubArguments</name><argument_list>(<argument><expr><name>selector</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>keyidxptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Encountered a command declared with channels but not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ACL_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLUserCheckKeyPerm</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ACL_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLSelectorCheckKey</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ACL_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>ACL_DENIED_KEY</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLUserCheckChannelPerm</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ACL_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLCHANNELS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ACL_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLCheckChannelAgainstList</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>literal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ACL_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>ACL_DENIED_CHANNEL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLCheckAllUserCommandPerm</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idxptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ACL_OK</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>relevant_error</name> <init>= <expr><name>ACL_DENIED_CMD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local_idxptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aclKeyResultCache</name></type> <name>cache</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>initACLKeyResultCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acl_retval</name> <init>= <expr><call><name>ACLSelectorCheckCmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_idxptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_retval</name> <operator>==</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cleanupACLKeyResultCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ACL_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_retval</name> <operator>&gt;</operator> <name>relevant_error</name> <operator>||</operator>
<operator>(</operator><name>acl_retval</name> <operator>==</operator> <name>relevant_error</name> <operator>&amp;&amp;</operator> <name>local_idxptr</name> <operator>&gt;</operator> <name>last_idx</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>relevant_error</name> <operator>=</operator> <name>acl_retval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_idx</name> <operator>=</operator> <name>local_idxptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>idxptr</name> <operator>=</operator> <name>last_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanupACLKeyResultCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>relevant_error</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLCheckAllPerm</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idxptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ACLCheckAllUserCommandPerm</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>, <argument><expr><name>idxptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLKillPubsubClientsIfNeeded</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>original</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>, <decl><type ref="prev"/><name>lpi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLCHANNELS</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>upcoming</name> <init>= <expr><call><name>listCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>lpn</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lpi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>upcoming</name></expr></argument>, <argument><expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>lpn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>original</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>match</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>lpn</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lpi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>listSearchKey</name><argument_list>(<argument><expr><name>upcoming</name></expr></argument>, <argument><expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>lpn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>upcoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>kill</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name> <operator>==</operator> <name>original</name> <operator>&amp;&amp;</operator> <call><name>getClientType</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CLIENT_TYPE_PUBSUB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pubsub_patterns</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>lpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>kill</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>lpn</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lpi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>lpn</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>ACLCheckChannelAgainstList</name><argument_list>(<argument><expr><name>upcoming</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>kill</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name>ACL_DENIED_CHANNEL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kill</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pubsub_channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><name>kill</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>ACLCheckChannelAgainstList</name><argument_list>(<argument><expr><name>upcoming</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>kill</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name>ACL_DENIED_CHANNEL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pubsubshard_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>kill</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>ACLCheckChannelAgainstList</name><argument_list>(<argument><expr><name>upcoming</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>kill</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name>ACL_DENIED_CHANNEL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kill</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>upcoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>sds</name> <modifier>*</modifier></type><name>ACLMergeSelectorArguments</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>merged_argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>invalid_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>merged_argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>open_bracket_start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>acl_args</name> <init>= <expr><operator>(</operator><name>sds</name> <operator>*</operator><operator>)</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>selector</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>op</name><index>[<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>selector</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>open_bracket_start</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>open_bracket_start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>selector</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>selector</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>open_bracket_start</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl_args</name><index>[<expr><operator>*</operator><name>merged_argc</name></expr>]</index></name> <operator>=</operator> <name>selector</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>merged_argc</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>acl_args</name><index>[<expr><operator>*</operator><name>merged_argc</name></expr>]</index></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>merged_argc</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>open_bracket_start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>merged_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>acl_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>invalid_idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>invalid_idx</name> <operator>=</operator> <name>open_bracket_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>acl_args</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLAppendUserForLoading</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc_err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>argc_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name>UsersToLoad</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>argc_err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EALREADY</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>fakeuser</name> <init>= <expr><call><name>ACLCreateUnlinkedUser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>merged_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>acl_args</name> <init>= <expr><call><name>ACLMergeSelectorArguments</name><argument_list>(<argument><expr><name>argv</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged_argc</name></expr></argument>, <argument><expr><name>argc_err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_args</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>merged_argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>fakeuser</name></expr></argument>,<argument><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ACLFreeUser</name><argument_list>(<argument><expr><name>fakeuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc_err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>argc_err</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>merged_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>acl_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>merged_argc</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>merged_argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>copy</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>merged_argc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>UsersToLoad</name></expr></argument>,<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLFreeUser</name><argument_list>(<argument><expr><name>fakeuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>merged_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>acl_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLLoadConfiguredUsers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>UsersToLoad</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>aclrules</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>username</name> <init>= <expr><name><name>aclrules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLStringHasSpaces</name><argument_list>(<argument><expr><name><name>aclrules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>aclrules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Spaces not allowed in ACL usernames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>ACLCreateUser</name><argument_list>(<argument><expr><name>username</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>ACLGetUserByName</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="string">"reset"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name><name>aclrules</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name><name>aclrules</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>aclrules</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>ACLSetUserStringError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error loading ACL rule '%s' for "</literal>
<literal type="string">"the user named '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>aclrules</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>aclrules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>USER_FLAG_DISABLED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"The user '%s' is disabled (there is no "</literal>
<literal type="string">"'on' modifier in the user description). Make "</literal>
<literal type="string">"sure this is not a configuration error."</literal></expr></argument>,
<argument><expr><name><name>aclrules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>ACLLoadFromFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>errors</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Error loading ACLs, opening file '%s': %s"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>acls</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>acls</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>acls</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>totlines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>lines</name></decl>, <decl><type ref="prev"/><name>errors</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name>acls</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>acls</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>totlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>acls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>old_users</name> <init>= <expr><name>Users</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Users</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totlines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sdstrim</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>,
<argument><expr><literal type="string">"%s:%d: unbalanced quotes in acl line. "</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>,
<argument><expr><literal type="string">"%s:%d should start with user keyword followed "</literal>
<literal type="string">"by the username. "</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>,
<argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLStringHasSpaces</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>,
<argument><expr><literal type="string">"'%s:%d: username '%s' contains invalid characters. "</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>ACLCreateUser</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>,<argument><expr><literal type="string">"WARNING: Duplicate user '%s' found on line %d. "</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>merged_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>acl_args</name> <init>= <expr><call><name>ACLMergeSelectorArguments</name><argument_list>(<argument><expr><name>argv</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged_argc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_args</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>,
<argument><expr><literal type="string">"%s:%d: Unmatched parenthesis in selector definition."</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>merged_argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>sdstrim</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"\t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>ACLSetUserStringError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>,
<argument><expr><literal type="string">"%s:%d: %s. "</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>merged_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>acl_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>lines</name></expr></argument>,<argument><expr><name>totlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>new_default</name> <init>= <expr><call><name>ACLGetUserByName</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_default</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_default</name> <operator>=</operator> <call><name>ACLCreateDefaultUser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ACLCopyUser</name><argument_list>(<argument><expr><name>DefaultUser</name></expr></argument>,<argument><expr><name>new_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLFreeUser</name><argument_list>(<argument><expr><name>new_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>Users</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"default"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><name>DefaultUser</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>old_users</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"default"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLFreeUsersSet</name><argument_list>(<argument><expr><name>old_users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ACLFreeUsersSet</name><argument_list>(<argument><expr><name>Users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Users</name> <operator>=</operator> <name>old_users</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>errors</name></expr></argument>,<argument><expr><literal type="string">"WARNING: ACL errors detected, no change to the previously active ACL rules was performed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ACLSaveToFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>acl</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>tmpfilename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>C_ERR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>Users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>user</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"user "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>user</name></expr></argument>,<argument><expr><name><name>u</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>descr</name> <init>= <expr><call><name>ACLDescribeUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>user</name></expr></argument>,<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>acl</name></expr></argument>,<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>acl</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpfilename</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpfilename</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>,<argument><expr><literal type="string">".tmp-%i-%I"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>mstime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>,<argument><expr><name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name></expr></argument>,<argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Opening temp ACL file for ACL SAVE: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>acl</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Writing ACL file for ACL SAVE: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Renaming ACL file for ACL SAVE: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmpfilename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpfilename</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLLoadUsersAtStartup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>acl_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>listLength</name><argument_list>(<argument><expr><name>UsersToLoad</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Configuring Redis with users defined in redis.conf and at "</literal>
<literal type="string">"the same setting an ACL file path is invalid. This setup "</literal>
<literal type="string">"is very likely to lead to configuration errors and security "</literal>
<literal type="string">"holes, please define either an ACL file or declare users "</literal>
<literal type="string">"directly in your redis.conf, but not both."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLLoadConfiguredUsers</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Critical error while loading ACLs. Exiting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>acl_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>errors</name> <init>= <expr><call><name>ACLLoadFromFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>errors</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Aborting Redis startup because of ACL errors: %s"</literal></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_LOG_GROUPING_MAX_TIME_DELTA</name></cpp:macro> <cpp:value>60000</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>ACLLogEntry</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reason</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>cinfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>ACLLogEntry</name>;</typedef>
<function><type><name>int</name></type> <name>ACLLogMatchEntry</name><parameter_list>(<parameter><decl><type><name>ACLLogEntry</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ACLLogEntry</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>reason</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>reason</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>delta</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>ctime</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>ctime</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <name>ACL_LOG_GROUPING_MAX_TIME_DELTA</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdscmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdscmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>username</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLFreeLogEntry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>leptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ACLLogEntry</name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name>leptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>cinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>addACLLogEntry</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argpos</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>username</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ACLLogEntry</name></name> <modifier>*</modifier></type><name>le</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>le</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>reason</name></name> <operator>=</operator> <name>reason</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name>username</name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>object</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch<condition>(<expr><name>reason</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_DENIED_CMD</name></expr>:</case> <expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_DENIED_KEY</name></expr>:</case> <expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>argpos</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_DENIED_CHANNEL</name></expr>:</case> <expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>argpos</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_DENIED_AUTH</name></expr>:</case> <expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>realclient</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>realclient</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SCRIPT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>realclient</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>script_caller</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>cinfo</name></name> <operator>=</operator> <call><name>catClientInfoString</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>realclient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>toscan</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ACLLogEntry</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>toscan</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ACLLogEntry</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLLogMatchEntry</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeHead</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>,<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>cinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cinfo</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>cinfo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>ctime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>cinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLFreeLogEntry</name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeHead</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>acllog_max_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listLast</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ACLLogEntry</name> <modifier>*</modifier></type><name>le</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ACLFreeLogEntry</name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>aclCatWithFlags</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>cflag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>arraylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>&amp;</operator> <name>cflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>arraylen</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>aclCatWithFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>, <argument><expr><name>cflag</name></expr></argument>, <argument><expr><name>arraylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>aclAddReplySelectorDescription</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>aclSelector</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>cmddescr</name> <init>= <expr><call><name>ACLDescribeSelectorCommandRules</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmddescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLKEYS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"~*"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>dsl</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>keyPattern</name> <modifier>*</modifier></type><name>thispat</name> <init>= <expr><operator>(</operator><name>keyPattern</name> <operator>*</operator><operator>)</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>!=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>patterns</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dsl</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>dsl</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dsl</name> <operator>=</operator> <call><name>sdsCatPatternString</name><argument_list>(<argument><expr><name>dsl</name></expr></argument>, <argument><expr><name>thispat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"channels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECTOR_FLAG_ALLCHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"&amp;*"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>dsl</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>thispat</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>!=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dsl</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>dsl</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dsl</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>dsl</name></expr></argument>, <argument><expr><literal type="string">"&amp;%S"</literal></expr></argument>, <argument><expr><name>thispat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>aclCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"setuser"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>redactClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>sds</name></type> <name>username</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLStringHasSpaces</name><argument_list>(<argument><expr><name>username</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Usernames can't contain spaces or null characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>merged_argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>invalid_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>temp_argv</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sds</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>temp_argv</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></for>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>acl_args</name> <init>= <expr><call><name>ACLMergeSelectorArguments</name><argument_list>(<argument><expr><name>temp_argv</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged_argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>invalid_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>temp_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_args</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Unmatched parenthesis in acl selector starting "</literal>
<literal type="string">"at '%s'."</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>invalid_idx</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>tempu</name> <init>= <expr><call><name>ACLCreateUnlinkedUser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>ACLGetUserByName</name><argument_list>(<argument><expr><name>username</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ACLCopyUser</name><argument_list>(<argument><expr><name>tempu</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>merged_argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>tempu</name></expr></argument>,<argument><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>ACLSetUserStringError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Error in ACL SETUSER modifier '%s': %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>acl_args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>setuser_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ACLKillPubsubClientsIfNeeded</name><argument_list>(<argument><expr><name>tempu</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>u</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>ACLCreateUser</name><argument_list>(<argument><expr><name>username</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>u</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLCopyUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>tempu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>setuser_cleanup</name>:</label>
<expr_stmt><expr><call><name>ACLFreeUser</name><argument_list>(<argument><expr><name>tempu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>merged_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>acl_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>acl_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"deluser"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>username</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>username</name></expr></argument>,<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The 'default' user cannot be removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>username</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>Users</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>username</name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ACLFreeUserAndKillClients</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deleted</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"getuser"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>ACLGetUserByName</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ufields</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fields</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>deflen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ACLUserFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>ACLUserFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ACLUserFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numflags</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>setDeferredSetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>deflen</name></expr></argument>,<argument><expr><name>numflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"passwords"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>passwords</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>thispass</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>thispass</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>thispass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>fields</name> <operator>+=</operator> <call><name>aclAddReplySelectorDescription</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>ACLUserGetRootSelector</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"selectors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>slen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sfields</name> <init>= <expr><call><name>aclAddReplySelectorDescription</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>aclSelector</name> <operator>*</operator><operator>)</operator><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sfields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ufields</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"users"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>justnames</name> <init>= <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"users"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name>Users</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>Users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>justnames</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>u</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>config</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"user "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><name><name>u</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>descr</name> <init>= <expr><call><name>ACLDescribeUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"whoami"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>user</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>acl_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"load"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"save"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"This Redis instance is not configured to use an ACL file. You may want to specify users via the ACL SETUSER command and then issue a CONFIG REWRITE (assuming you have a Redis configuration file set) in order to store users in the Redis configuration."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"load"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>errors</name> <init>= <expr><call><name>ACLLoadFromFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>errors</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"save"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ACLSaveToFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"There was an error trying to save the ACLs. "</literal>
<literal type="string">"Please check the server logs for more "</literal>
<literal type="string">"information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dl</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>dl</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cflag</name> <init>= <expr><call><name>ACLGetCommandCategoryFlagByName</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cflag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Unknown category '%.128s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arraylen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dl</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aclCatWithFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>, <argument><expr><name>cflag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arraylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>dl</name></expr></argument>,<argument><expr><name>arraylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"genpass"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENPASS_MAX_BITS</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>pass</name><index>[<expr><name>GENPASS_MAX_BITS</name><operator>/</operator><literal type="number">8</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bits</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>bits</name> <operator>&gt;</operator> <name>GENPASS_MAX_BITS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"ACL GENPASS argument must be the number of "</literal>
<literal type="string">"bits for the output password, a positive number "</literal>
<literal type="string">"up to %d"</literal></expr></argument>,<argument><expr><name>GENPASS_MAX_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>chars</name> <init>= <expr><operator>(</operator><name>bits</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name>pass</name></expr></argument>,<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>,<argument><expr><name>ACLFreeLogEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>count</name> <operator>&gt;</operator> <call><name>listLength</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>listLength</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name>ACLLog</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ACLLogEntry</name> <modifier>*</modifier></type><name>le</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>le</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"reason"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reasonstr</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>reason</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_DENIED_CMD</name></expr>:</case> <expr_stmt><expr><name>reasonstr</name><operator>=</operator><literal type="string">"command"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_DENIED_KEY</name></expr>:</case> <expr_stmt><expr><name>reasonstr</name><operator>=</operator><literal type="string">"key"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_DENIED_CHANNEL</name></expr>:</case> <expr_stmt><expr><name>reasonstr</name><operator>=</operator><literal type="string">"channel"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_DENIED_AUTH</name></expr>:</case> <expr_stmt><expr><name>reasonstr</name><operator>=</operator><literal type="string">"auth"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>reasonstr</name><operator>=</operator><literal type="string">"unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>reasonstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ctxstr</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_LOG_CTX_TOPLEVEL</name></expr>:</case> <expr_stmt><expr><name>ctxstr</name><operator>=</operator><literal type="string">"toplevel"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_LOG_CTX_MULTI</name></expr>:</case> <expr_stmt><expr><name>ctxstr</name><operator>=</operator><literal type="string">"multi"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_LOG_CTX_LUA</name></expr>:</case> <expr_stmt><expr><name>ctxstr</name><operator>=</operator><literal type="string">"lua"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACL_LOG_CTX_MODULE</name></expr>:</case> <expr_stmt><expr><name>ctxstr</name><operator>=</operator><literal type="string">"module"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>ctxstr</name><operator>=</operator><literal type="string">"unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ctxstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>le</name><operator>-&gt;</operator><name>username</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"age-seconds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>age</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name><name>le</name><operator>-&gt;</operator><name>ctime</name></name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyDouble</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"client-info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>le</name><operator>-&gt;</operator><name>cinfo</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>cinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"dryrun"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>ACLGetUserByName</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"User '%s' not found"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>lookupCommand</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Command '%s' not found"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>ACLCheckAllUserCommandPerm</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>err</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>ACL_DENIED_CMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"This user has no permissions to run "</literal>
<literal type="string">"the '%s' command"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>ACL_DENIED_KEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"This user has no permissions to access "</literal>
<literal type="string">"the '%s' key"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>ACL_DENIED_CHANNEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"This user has no permissions to access "</literal>
<literal type="string">"the '%s' channel"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Invalid permission result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sub</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"CAT [&lt;category&gt;]"</literal></expr>,
<expr><literal type="string">" List all commands that belong to &lt;category&gt;, or all command categories"</literal></expr>,
<expr><literal type="string">" when no category is specified."</literal></expr>,
<expr><literal type="string">"DELUSER &lt;username&gt; [&lt;username&gt; ...]"</literal></expr>,
<expr><literal type="string">" Delete a list of users."</literal></expr>,
<expr><literal type="string">"DRYRUN &lt;username&gt; &lt;command&gt; [&lt;arg&gt; ...]"</literal></expr>,
<expr><literal type="string">" Returns whether the user can execute the given command without executing the command."</literal></expr>,
<expr><literal type="string">"GETUSER &lt;username&gt;"</literal></expr>,
<expr><literal type="string">" Get the user's details."</literal></expr>,
<expr><literal type="string">"GENPASS [&lt;bits&gt;]"</literal></expr>,
<expr><literal type="string">" Generate a secure 256-bit user password. The optional `bits` argument can"</literal></expr>,
<expr><literal type="string">" be used to specify a different size."</literal></expr>,
<expr><literal type="string">"LIST"</literal></expr>,
<expr><literal type="string">" Show users details in config file format."</literal></expr>,
<expr><literal type="string">"LOAD"</literal></expr>,
<expr><literal type="string">" Reload users from the ACL file."</literal></expr>,
<expr><literal type="string">"LOG [&lt;count&gt; | RESET]"</literal></expr>,
<expr><literal type="string">" Show the ACL log entries."</literal></expr>,
<expr><literal type="string">"SAVE"</literal></expr>,
<expr><literal type="string">" Save the current config to the ACL file."</literal></expr>,
<expr><literal type="string">"SETUSER &lt;username&gt; &lt;attribute&gt; [&lt;attribute&gt; ...]"</literal></expr>,
<expr><literal type="string">" Create or modify a user with the specified attributes."</literal></expr>,
<expr><literal type="string">"USERS"</literal></expr>,
<expr><literal type="string">" List all the registered usernames."</literal></expr>,
<expr><literal type="string">"WHOAMI"</literal></expr>,
<expr><literal type="string">" Return the current connection username."</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>addReplyCommandCategories</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flagcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>flaglen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>&amp;</operator> <name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyStatusFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"@%s"</literal></expr></argument>, <argument><expr><name><name>ACLCommandCategories</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flagcount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>setDeferredSetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flaglen</name></expr></argument>, <argument><expr><name>flagcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>authCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redactClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>username</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>DefaultUser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>USER_FLAG_NOPASS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"AUTH &lt;password&gt; called without any password "</literal>
<literal type="string">"configured for the default user. Are you sure "</literal>
<literal type="string">"your configuration is correct?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>shared</name><operator>.</operator><name>default_username</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>password</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>password</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redactClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLAuthenticateUser</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>username</name></expr></argument>,<argument><expr><name>password</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-WRONGPASS invalid username-password pair or user is disabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ACLUpdateDefaultUserPassword</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>DefaultUser</name></expr></argument>,<argument><expr><literal type="string">"resetpass"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>password</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>aclop</name> <init>= <expr><call><name>sdscatlen</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>DefaultUser</name></expr></argument>,<argument><expr><name>aclop</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>aclop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>aclop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ACLSetUser</name><argument_list>(<argument><expr><name>DefaultUser</name></expr></argument>,<argument><expr><literal type="string">"nopass"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
