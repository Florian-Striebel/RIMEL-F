<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/config.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glob.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>configEnum</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>configEnum</name>;</typedef>
<typedef>typedef <type><struct>struct <name>deprecatedConfig</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>argc_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>argc_max</name></decl>;</decl_stmt>
}</block></struct></type> <name>deprecatedConfig</name>;</typedef>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>maxmemory_policy_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"volatile-lru"</literal></expr>, <expr><name>MAXMEMORY_VOLATILE_LRU</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"volatile-lfu"</literal></expr>, <expr><name>MAXMEMORY_VOLATILE_LFU</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"volatile-random"</literal></expr>,<expr><name>MAXMEMORY_VOLATILE_RANDOM</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"volatile-ttl"</literal></expr>,<expr><name>MAXMEMORY_VOLATILE_TTL</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"allkeys-lru"</literal></expr>,<expr><name>MAXMEMORY_ALLKEYS_LRU</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"allkeys-lfu"</literal></expr>,<expr><name>MAXMEMORY_ALLKEYS_LFU</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"allkeys-random"</literal></expr>,<expr><name>MAXMEMORY_ALLKEYS_RANDOM</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"noeviction"</literal></expr>,<expr><name>MAXMEMORY_NO_EVICTION</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>syslog_facility_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"user"</literal></expr>, <expr><name>LOG_USER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local0"</literal></expr>, <expr><name>LOG_LOCAL0</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local1"</literal></expr>, <expr><name>LOG_LOCAL1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local2"</literal></expr>, <expr><name>LOG_LOCAL2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local3"</literal></expr>, <expr><name>LOG_LOCAL3</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local4"</literal></expr>, <expr><name>LOG_LOCAL4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local5"</literal></expr>, <expr><name>LOG_LOCAL5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local6"</literal></expr>, <expr><name>LOG_LOCAL6</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local7"</literal></expr>, <expr><name>LOG_LOCAL7</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>loglevel_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><name>LL_DEBUG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>LL_VERBOSE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"notice"</literal></expr>, <expr><name>LL_NOTICE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"warning"</literal></expr>, <expr><name>LL_WARNING</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>supervised_mode_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"upstart"</literal></expr>, <expr><name>SUPERVISED_UPSTART</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"systemd"</literal></expr>, <expr><name>SUPERVISED_SYSTEMD</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"auto"</literal></expr>, <expr><name>SUPERVISED_AUTODETECT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><name>SUPERVISED_NONE</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>aof_fsync_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"everysec"</literal></expr>, <expr><name>AOF_FSYNC_EVERYSEC</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"always"</literal></expr>, <expr><name>AOF_FSYNC_ALWAYS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><name>AOF_FSYNC_NO</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>repl_diskless_load_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"disabled"</literal></expr>, <expr><name>REPL_DISKLESS_LOAD_DISABLED</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"on-empty-db"</literal></expr>, <expr><name>REPL_DISKLESS_LOAD_WHEN_DB_EMPTY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"swapdb"</literal></expr>, <expr><name>REPL_DISKLESS_LOAD_SWAPDB</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>tls_auth_clients_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><name>TLS_CLIENT_AUTH_NO</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"yes"</literal></expr>, <expr><name>TLS_CLIENT_AUTH_YES</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"optional"</literal></expr>, <expr><name>TLS_CLIENT_AUTH_OPTIONAL</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>oom_score_adj_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><name>OOM_SCORE_ADJ_NO</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"yes"</literal></expr>, <expr><name>OOM_SCORE_RELATIVE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"relative"</literal></expr>, <expr><name>OOM_SCORE_RELATIVE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"absolute"</literal></expr>, <expr><name>OOM_SCORE_ADJ_ABSOLUTE</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>acl_pubsub_default_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"allchannels"</literal></expr>, <expr><name>SELECTOR_FLAG_ALLCHANNELS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"resetchannels"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>sanitize_dump_payload_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><name>SANITIZE_DUMP_NO</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"yes"</literal></expr>, <expr><name>SANITIZE_DUMP_YES</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"clients"</literal></expr>, <expr><name>SANITIZE_DUMP_CLIENTS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>protected_action_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><name>PROTECTED_ACTION_ALLOWED_NO</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"yes"</literal></expr>, <expr><name>PROTECTED_ACTION_ALLOWED_YES</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"local"</literal></expr>, <expr><name>PROTECTED_ACTION_ALLOWED_LOCAL</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>cluster_preferred_endpoint_type_enum</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"ip"</literal></expr>, <expr><name>CLUSTER_ENDPOINT_TYPE_IP</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"hostname"</literal></expr>, <expr><name>CLUSTER_ENDPOINT_TYPE_HOSTNAME</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"unknown-endpoint"</literal></expr>, <expr><name>CLUSTER_ENDPOINT_TYPE_UNKNOWN_ENDPOINT</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clientBufferLimitsConfig</name></type> <name><name>clientBufferLimitsDefaults</name><index>[<expr><name>CLIENT_TYPE_OBUF_COUNT</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">256</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">64</literal></expr>, <expr><literal type="number">60</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">32</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">60</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>configOOMScoreAdjValuesDefaults</name><index>[<expr><name>CONFIG_OOM_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>boolConfigData</name> <block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>default_value</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_valid_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>boolConfigData</name>;</typedef>
<typedef>typedef <type><struct>struct <name>stringConfigData</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_value</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_valid_fn</name>)<parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>convert_empty_to_null</name></decl>;</decl_stmt>
}</block></struct></type> <name>stringConfigData</name>;</typedef>
<typedef>typedef <type><struct>struct <name>sdsConfigData</name> <block>{
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_value</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_valid_fn</name>)<parameter_list>(<parameter><decl><type><name>sds</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>convert_empty_to_null</name></decl>;</decl_stmt>
}</block></struct></type> <name>sdsConfigData</name>;</typedef>
<typedef>typedef <type><struct>struct <name>enumConfigData</name> <block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>enum_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>default_value</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_valid_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>enumConfigData</name>;</typedef>
<typedef>typedef <type><enum>enum <name>numericType</name> <block>{
<decl><name>NUMERIC_TYPE_INT</name></decl>,
<decl><name>NUMERIC_TYPE_UINT</name></decl>,
<decl><name>NUMERIC_TYPE_LONG</name></decl>,
<decl><name>NUMERIC_TYPE_ULONG</name></decl>,
<decl><name>NUMERIC_TYPE_LONG_LONG</name></decl>,
<decl><name>NUMERIC_TYPE_ULONG_LONG</name></decl>,
<decl><name>NUMERIC_TYPE_SIZE_T</name></decl>,
<decl><name>NUMERIC_TYPE_SSIZE_T</name></decl>,
<decl><name>NUMERIC_TYPE_OFF_T</name></decl>,
<decl><name>NUMERIC_TYPE_TIME_T</name></decl>,
}</block></enum></type> <name>numericType</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEGER_CONFIG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMORY_CONFIG</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERCENT_CONFIG</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCTAL_CONFIG</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>numericConfigData</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>ull</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>sst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name> <modifier>*</modifier></type><name>ot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tt</name></decl>;</decl_stmt>
}</block> <decl><name>config</name></decl>;</union>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>numericType</name></type> <name>numeric_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lower_bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>upper_bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>default_value</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_valid_fn</name>)<parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>numericConfigData</name>;</typedef>
<typedef>typedef <type><union>union <name>typeData</name> <block>{
<decl_stmt><decl><type><name>boolConfigData</name></type> <name>yesno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stringConfigData</name></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sdsConfigData</name></type> <name>sds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>enumConfigData</name></type> <name>enumd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>numericConfigData</name></type> <name>numeric</name></decl>;</decl_stmt>
}</block></union></type> <name>typeData</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>apply_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>typeInterface</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>set</name>)<parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>apply_fn</name></type> <name>apply</name></decl>;</decl_stmt>
<function_decl><type><name>sds</name></type> (<modifier>*</modifier><name>get</name>)<parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rewrite</name>)<parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>typeInterface</name>;</typedef>
<typedef>typedef <type><struct>struct <name>standardConfig</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typeInterface</name></type> <name>interface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typeData</name></type> <name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>standardConfig</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODIFIABLE_CONFIG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMMUTABLE_CONFIG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENSITIVE_CONFIG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_CONFIG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_ARG_CONFIG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIDDEN_CONFIG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTECTED_CONFIG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DENY_LOADING_CONFIG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;6)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>standardConfig</name></type> <name><name>configs</name><index>[]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>configEnumGetValue</name><parameter_list>(<parameter><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while<condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>ce</name><operator>-&gt;</operator><name>val</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ce</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>INT_MIN</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>configEnumGetName</name><parameter_list>(<parameter><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while<condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ce</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>configEnumGetNameOrUnknown</name><parameter_list>(<parameter><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>configEnumGetName</name><argument_list>(<argument><expr><name>ce</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>evictPolicyToString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>configEnumGetNameOrUnknown</name><argument_list>(<argument><expr><name>maxmemory_policy_enum</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>yesnotoi</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>appendServerSaveParams</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>seconds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>changes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>saveparam</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>saveparamslen</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>]</index></name><operator>.</operator><name>seconds</name> <operator>=</operator> <name>seconds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>]</index></name><operator>.</operator><name>changes</name> <operator>=</operator> <name>changes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>resetServerSaveParams</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>queueLoadModule</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>moduleLoadQueueEntry</name></name> <modifier>*</modifier></type><name>loadmod</name></decl>;</decl_stmt>
<expr_stmt><expr><name>loadmod</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>moduleLoadQueueEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <ternary><condition><expr><name>argc</name></expr> ?</condition><then> <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loadmod</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>createRawStringObject</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>loadmodule_queue</name></name></expr></argument>,<argument><expr><name>loadmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateClientOutputBufferLimit</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>hard</name></decl>, <decl><type ref="prev"/><name>soft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hard_err</name></decl>, <decl><type ref="prev"/><name>soft_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>soft_seconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>soft_seconds_eptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clientBufferLimitsConfig</name></type> <name><name>values</name><index>[<expr><name>CLIENT_TYPE_OBUF_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>classes</name><index>[<expr><name>CLIENT_TYPE_OBUF_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>arg_len</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Wrong number of arguments in "</literal>
<literal type="string">"buffer limit configuration."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>arg_len</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>class</name> <operator>=</operator> <call><name>getClientTypeByName</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>class</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>class</name> <operator>==</operator> <name>CLIENT_TYPE_MASTER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Invalid client class specified in "</literal>
<literal type="string">"buffer limit configuration."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hard</name> <operator>=</operator> <call><name>memtoull</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hard_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>soft</name> <operator>=</operator> <call><name>memtoull</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>soft_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>soft_seconds</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>soft_seconds_eptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hard_err</name> <operator>||</operator> <name>soft_err</name> <operator>||</operator>
<name>soft_seconds</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>soft_seconds_eptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Error in hard, soft or soft_seconds setting in "</literal>
<literal type="string">"buffer limit configuration."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name> <operator>=</operator> <name>hard</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name> <operator>=</operator> <name>soft</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name> <operator>=</operator> <name>soft_seconds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>classes</name><index>[<expr><name>class</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_TYPE_OBUF_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>classes</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>initConfigValues</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>standardConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>configs</name></expr></init></decl>;</init> <condition><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>config</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reading_config_file</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>loadServerConfigFromString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>deprecatedConfig</name></type> <name><name>deprecated_configs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"list-max-ziplist-entries"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"list-max-ziplist-value"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lua-replicate-commands"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>totlines</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>
<expr_stmt><expr><name>reading_config_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>totlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totlines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>linenum</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sdstrim</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <name><name>lines</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>sdssplitargs</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Unbalanced quotes in configuration line"</literal></expr>;</expr_stmt>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdstolower</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>standardConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>configs</name></expr></init></decl>;</init> <condition><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>config</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>alias</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>config</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MULTI_ARG_CONFIG</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"wrong number of arguments"</literal></expr>;</expr_stmt>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>deprecatedConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>deprecated_configs</name></expr></init></decl>;</init> <condition><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>config</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>config</name><operator>-&gt;</operator><name>argc_min</name></name> <operator>&lt;=</operator> <name>argc</name> <operator>&amp;&amp;</operator>
<name>argc</name> <operator>&lt;=</operator> <name><name>config</name><operator>-&gt;</operator><name>argc_max</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"include"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>loadServerConfig</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rename-command"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>lookupCommandBySds</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"No such command in rename-command"</literal></expr>;</expr_stmt>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>copy</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Target command name already exists"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc_err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACLAppendUserForLoading</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc_err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>ACLSetUserStringError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"Error in user declaration '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>argc_err</name></expr>]</index></name></expr></argument>,<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"loadmodule"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>queueLoadModule</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>argc</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"sentinel directive while not in sentinel mode"</literal></expr>;</expr_stmt>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>queueSentinelConfig</name><argument_list>(<argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>linenum</name></expr></argument>,<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Bad directive or wrong number of arguments"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>logfp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>logfp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>logfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Can't open the log file: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"replicaof directive not allowed in cluster mode"</literal></expr>;</expr_stmt>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>&lt;</operator> <name>CONFIG_MIN_HZ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_MIN_HZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>&gt;</operator> <name>CONFIG_MAX_HZ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_MAX_HZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>lines</name></expr></argument>,<argument><expr><name>totlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reading_config_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
<label><name>loaderr</name>:</label>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n*** FATAL CONFIG FILE ERROR (Redis %s) ***\n"</literal></expr></argument>,
<argument><expr><name>REDIS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>totlines</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Reading the configuration file, at line %d\n"</literal></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; '%s'\n"</literal></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>loadServerConfig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>config_from_stdin</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>config</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>glob_t</name></type> <name>globbuf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>glob</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>globbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>globbuf</name><operator>.</operator><name>gl_pathc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>globbuf</name><operator>.</operator><name>gl_pathv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Fatal error, can't open config file '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>globbuf</name><operator>.</operator><name>gl_pathv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>globfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Fatal error, can't open config file '%s': %s"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>config_from_stdin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Reading config from stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>loadServerConfigFromString</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>performInterfaceSet</name><parameter_list>(<parameter><decl><type><name>standardConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MULTI_ARG_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MULTI_ARG_CONFIG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>restoreBackupConfig</name><parameter_list>(<parameter><decl><type><name>standardConfig</name> <modifier>*</modifier><modifier>*</modifier></type><name>set_configs</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>old_values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>apply_fn</name> <modifier>*</modifier></type><name>apply_fns</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errstr</name> <init>= <expr><literal type="string">"unknown error"</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>performInterfaceSet</name><argument_list>(<argument><expr><name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>old_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errstr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed restoring failed CONFIG SET command. Error setting %s to '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>old_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>apply_fns</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>&amp;&amp;</operator> <name><name>apply_fns</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>apply_fns</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name>errstr</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed applying restored failed CONFIG SET command: %s"</literal></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>configSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>invalid_arg_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_arg_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>standardConfig</name> <modifier>*</modifier><modifier>*</modifier></type><name>set_configs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>new_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>old_values</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apply_fn</name> <modifier>*</modifier></type><name>apply_fns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>config_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invalid_args</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>deny_loading_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>config_map_fns</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>config_count</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>set_configs</name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>standardConfig</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>config_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_values</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>config_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_values</name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>config_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apply_fns</name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apply_fn</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>config_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>config_map_fns</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>config_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>standardConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>configs</name></expr></init></decl>;</init> <condition><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>config</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>alias</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name><name>config</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENSITIVE_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redactClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>invalid_args</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IMMUTABLE_CONFIG</name> <operator>||</operator>
<operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTECTED_CONFIG</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>allowProtectedAction</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>enable_protected_configs</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IMMUTABLE_CONFIG</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"can't set immutable config"</literal></expr> </then><else>: <expr><literal type="string">"can't set protected config"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>err_arg_name</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>invalid_args</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DENY_LOADING_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deny_loading_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>invalid_args</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>set_configs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>config</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errstr</name> <operator>=</operator> <literal type="string">"duplicate parameter"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err_arg_name</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>invalid_args</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>invalid_args</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>invalid_arg_name</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>invalid_args</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>invalid_args</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>old_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name><name>interface</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>performInterfaceSet</name><argument_list>(<argument><expr><name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>new_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restoreBackupConfig</name><argument_list>(<argument><expr><name>set_configs</name></expr></argument>, <argument><expr><name>old_values</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_arg_name</name> <operator>=</operator> <name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>interface</name><operator>.</operator><name>apply</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exists</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>apply_fns</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>apply_fns</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>interface</name><operator>.</operator><name>apply</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exists</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exists</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>apply_fns</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>set_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>interface</name><operator>.</operator><name>apply</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_map_fns</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_count</name> <operator>&amp;&amp;</operator> <name><name>apply_fns</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>apply_fns</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name>errstr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed applying new configuration. Possibly related to new %s setting. Restoring previous settings."</literal></expr></argument>, <argument><expr><name><name>set_configs</name><index>[<expr><name><name>config_map_fns</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restoreBackupConfig</name><argument_list>(<argument><expr><name>set_configs</name></expr></argument>, <argument><expr><name>old_values</name></expr></argument>, <argument><expr><name>config_count</name></expr></argument>, <argument><expr><name>apply_fns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_arg_name</name> <operator>=</operator> <name><name>set_configs</name><index>[<expr><name><name>config_map_fns</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>deny_loading_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>loadingerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>invalid_arg_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown option or number of arguments for CONFIG SET - '%s'"</literal></expr></argument>, <argument><expr><name>invalid_arg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"CONFIG SET failed (possibly related to argument '%s') - %s"</literal></expr></argument>, <argument><expr><name>err_arg_name</name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"CONFIG SET failed (possibly related to argument '%s')"</literal></expr></argument>, <argument><expr><name>err_arg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>set_configs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>new_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>old_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>old_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>apply_fns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>config_map_fns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>configGetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>replylen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>standardConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>configs</name></expr></init></decl>;</init> <condition><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>config</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>matched_conf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matched_alias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>matched_conf</name> <operator>||</operator> <operator>!</operator><name>matched_alias</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matched_conf</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HIDDEN_CONFIG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HIDDEN_CONFIG</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>matched_conf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matched_alias</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>alias</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HIDDEN_CONFIG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HIDDEN_CONFIG</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>matched_alias</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>replylen</name></expr></argument>,<argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_CONFIG_REWRITE_SIGNATURE</name></cpp:macro> <cpp:value>"#Generated by CONFIG REWRITE"</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>dictListDestructor</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rewriteConfigSentinelOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>dictType</name></type> <name>optionToLineDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>dictListDestructor</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictType</name></type> <name>optionSetDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<struct>struct <name>rewriteConfigState</name> <block>{
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>option_to_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>rewritten</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numlines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needs_signature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_write</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>void</name></type> <name>rewriteConfigReleaseState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>,<argument><expr><name><name>state</name><operator>-&gt;</operator><name>numlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rewritten</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>rewriteConfigCreateState</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>optionToLineDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>rewritten</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>optionSetDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>numlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>needs_signature</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>force_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigAppendLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>numlines</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>numlines</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigAddLineNumberToOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>,<argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigMarkAsProcessed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>opt</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rewritten</name></name></expr></argument>,<argument><expr><name>opt</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>rewriteConfigReadOldFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>rewriteConfigCreateState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>state</name></expr>;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdstrim</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\r\n\t "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>linenum</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>needs_signature</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><name>REDIS_CONFIG_REWRITE_SIGNATURE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>needs_signature</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>sdssplitargs</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>aux</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"#??? "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>aux</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdstolower</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>alt</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>alt</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>alt</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alt</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>alt</name></expr></argument>,<argument><expr><literal type="string">"replica"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alt</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>alt</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><literal type="number">5</literal></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>alt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sentinelOption</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sentinelOption</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>sentinelOption</name></expr></argument>,<argument><expr><literal type="string">"%S %S"</literal></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigAddLineNumberToOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>sentinelOption</name></expr></argument>,<argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sentinelOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigAddLineNumberToOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigRewriteLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>o</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>force_write</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>linenum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>linenum</name></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>needs_signature</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,
<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>REDIS_CONFIG_REWRITE_SIGNATURE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>needs_signature</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rewriteConfigFormatMemory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>gb</name> <init>= <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kb</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bytes</name> <operator>%</operator> <name>gb</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="string">"%lldgb"</literal></expr></argument>,<argument><expr><name>bytes</name><operator>/</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytes</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bytes</name> <operator>%</operator> <name>mb</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="string">"%lldmb"</literal></expr></argument>,<argument><expr><name>bytes</name><operator>/</operator><name>mb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytes</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bytes</name> <operator>%</operator> <name>kb</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="string">"%lldkb"</literal></expr></argument>,<argument><expr><name>bytes</name><operator>/</operator><name>kb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigBytesOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteConfigFormatMemory</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigPercentOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %lld%%"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigYesNoOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigStringOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>defvalue</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>defvalue</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigSdsOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>defvalue</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>defvalue</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigNumericalOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %lld"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigOctalOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %llo"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigEnumOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>configEnumGetNameOrUnknown</name><argument_list>(<argument><expr><name>ce</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defval</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigSaveOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"save \"\""</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"save %ld %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>seconds</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigUserOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>acl_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>Users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"user "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><name><name>u</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>descr</name> <init>= <expr><call><name>ACLDescribeUser</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"user"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigDirOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cwd</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>cwd</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigReplicaOfOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s %d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigNotifyKeyspaceEventsOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>keyspaceEventsFlagsToString</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigClientOutputBufferLimitOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_TYPE_OBUF_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name> <operator>!=</operator>
<name><name>clientBufferLimitsDefaults</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name> <operator>!=</operator>
<name><name>clientBufferLimitsDefaults</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name> <operator>!=</operator>
<name><name>clientBufferLimitsDefaults</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hard</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>soft</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteConfigFormatMemory</name><argument_list>(<argument><expr><name>hard</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hard</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigFormatMemory</name><argument_list>(<argument><expr><name>soft</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>soft</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>typename</name> <init>= <expr><call><name>getClientTypeName</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>typename</name></expr></argument>,<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"replica"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s %s %s %ld"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name>hard</name></expr></argument>, <argument><expr><name>soft</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigOOMScoreAdjValuesOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CONFIG_OOM_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>oom_score_adj_values</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>configOOMScoreAdjValuesDefaults</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>oom_score_adj_values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name><operator>+</operator><literal type="number">1</literal> <operator>!=</operator> <name>CONFIG_OOM_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigBindOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>addresses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_default</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>==</operator> <name>CONFIG_DEFAULT_BINDADDR_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_default</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>default_bindaddr</name><index>[<expr><name>CONFIG_DEFAULT_BINDADDR_COUNT</name></expr>]</index></name> <init>= <expr><name>CONFIG_DEFAULT_BINDADDR</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CONFIG_DEFAULT_BINDADDR_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>default_bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_default</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_default</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addresses</name> <operator>=</operator> <call><name>sdsjoin</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>addresses</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"\"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigLoadmoduleOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"loadmodule "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>loadmod</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"loadmodule"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"loadmodule"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>rewriteConfigGetContentFromState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>content</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>was_empty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>numlines</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>was_empty</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>was_empty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>was_empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>content</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigRemoveOrphaned</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>option</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rewritten</name></name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Not rewritten option: %s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>linenum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>linenum</name></expr>]</index></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>getConfigDebugInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>rewriteConfigCreateState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>force_write</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>needs_signature</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>standardConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>configs</name></expr></init></decl>;</init> <condition><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>config</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DEBUG_CONFIG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>rewrite</name></name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>sds</name></type> <name>info</name> <init>= <expr><call><name>rewriteConfigGetContentFromState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteConfigReleaseState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rewriteConfigOverwriteFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>configfile</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>content</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_conffile</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp_suffix</name> <init>= <expr><literal type="string">".XXXXXX"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_path_len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp_conffile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_conffile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>configfile</name></expr></argument>, <argument><expr><name>tmp_suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_path_len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>tmp_path_len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp_conffile</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Config file full path is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkostemp</name><argument_list>(<argument><expr><name>tmp_conffile</name></expr></argument>, <argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>tmp_conffile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not create tmp config file (%s)"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written_bytes</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>content</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>written_bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed after writing (%zd) bytes to tmp config file (%s)"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name><operator>+=</operator><name>written_bytes</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not sync tmp config file to disk (%s)"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0644</literal> <operator>&amp;</operator> <operator>~</operator><name><name>server</name><operator>.</operator><name>umask</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not chmod config file (%s)"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>tmp_conffile</name></expr></argument>, <argument><expr><name>configfile</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not rename tmp config file (%s)"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Rewritten config file (%s) successfully"</literal></expr></argument>, <argument><expr><name>configfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmp_conffile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rewriteConfig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_write</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>newcontent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>rewriteConfigReadOldFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>force_write</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>force_write</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>standardConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>configs</name></expr></init></decl>;</init> <condition><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>config</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>rewrite</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>config</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>rewrite</name></name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rewriteConfigUserOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigLoadmoduleOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rewriteConfigSentinelOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rewriteConfigRemoveOrphaned</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newcontent</name> <operator>=</operator> <call><name>rewriteConfigGetContentFromState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rewriteConfigOverwriteFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>,<argument><expr><name>newcontent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>newcontent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigReleaseState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOADBUF_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>loadbuf</name><index>[<expr><name>LOADBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>embedCommonConfig</name><parameter_list>(<parameter><type><name>config_name</name></type></parameter>, <parameter><type><name>config_alias</name></type></parameter>, <parameter><type><name>config_flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.name = (config_name), .alias = (config_alias), .flags = (config_flags),</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>embedConfigInterface</name><parameter_list>(<parameter><type><name>initfn</name></type></parameter>, <parameter><type><name>setfn</name></type></parameter>, <parameter><type><name>getfn</name></type></parameter>, <parameter><type><name>rewritefn</name></type></parameter>, <parameter><type><name>applyfn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.interface = { .init = (initfn), .set = (setfn), .get = (getfn), .rewrite = (rewritefn), .apply = (applyfn) },</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>boolConfigInit</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>default_value</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>boolConfigSet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yn</name> <init>= <expr><call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>yn</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>is_valid_fn</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>is_valid_fn</name></name><argument_list>(<argument><expr><name>yn</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>config</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>yn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>config</name></name><operator>)</operator> <operator>=</operator> <name>yn</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>boolConfigGet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>config</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>boolConfigRewrite</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,<argument><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>config</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>yesno</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createBoolConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, is_valid, apply) { embedCommonConfig(name, alias, flags) embedConfigInterface(boolConfigInit, boolConfigSet, boolConfigGet, boolConfigRewrite, apply) .data.yesno = { .config = &amp;(config_addr), .default_value = (default), .is_valid_fn = (is_valid), } }</cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stringConfigInit</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>config</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>convert_empty_to_null</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>default_value</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stringConfigSet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>is_valid_fn</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>is_valid_fn</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>*</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>convert_empty_to_null</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>!=</operator> <name>prev</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>new</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>prev</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>config</name></name> <operator>=</operator> <ternary><condition><expr><name>new</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>stringConfigGet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>config</name></name></expr> ?</condition><then> <expr><operator>*</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>config</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stringConfigRewrite</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,<argument><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>config</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sdsConfigInit</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>config</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>convert_empty_to_null</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>default_value</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr></then><else>: <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sdsConfigSet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>is_valid_fn</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>is_valid_fn</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>prev</name> <init>= <expr><operator>*</operator><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>new</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>convert_empty_to_null</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>!=</operator> <name>prev</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>new</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>prev</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>sdscmp</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>config</name></name> <operator>=</operator> <ternary><condition><expr><name>new</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>sdsConfigGet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>config</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sdsdup</name><argument_list>(<argument><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sdsConfigRewrite</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigSdsOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>config</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sds</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_EMPTY_STRING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_STRING_IS_NULL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createStringConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>empty_to_null</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, is_valid, apply) { embedCommonConfig(name, alias, flags) embedConfigInterface(stringConfigInit, stringConfigSet, stringConfigGet, stringConfigRewrite, apply) .data.string = { .config = &amp;(config_addr), .default_value = (default), .is_valid_fn = (is_valid), .convert_empty_to_null = (empty_to_null), } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createSDSConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>empty_to_null</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, is_valid, apply) { embedCommonConfig(name, alias, flags) embedConfigInterface(sdsConfigInit, sdsConfigSet, sdsConfigGet, sdsConfigRewrite, apply) .data.sds = { .config = &amp;(config_addr), .default_value = (default), .is_valid_fn = (is_valid), .convert_empty_to_null = (empty_to_null), } }</cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>enumConfigInit</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>default_value</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>enumConfigSet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enumval</name> <init>= <expr><call><name>configEnumGetValue</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>enum_value</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>enumval</name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>enumerr</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"argument must be one of the following: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>enumNode</name> <init>= <expr><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>enum_value</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>enumNode</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enumerr</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>enumerr</name></expr></argument>, <argument><expr><name><name>enumNode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>enumNode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enumerr</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>enumerr</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enumNode</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>enumerr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>loadbuf</name></expr></argument>, <argument><expr><name>enumerr</name></expr></argument>, <argument><expr><name>LOADBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loadbuf</name><index>[<expr><name>LOADBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>enumerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>loadbuf</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>is_valid_fn</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>is_valid_fn</name></name><argument_list>(<argument><expr><name>enumval</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>config</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>enumval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>config</name></name><operator>)</operator> <operator>=</operator> <name>enumval</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>enumConfigGet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><call><name>configEnumGetNameOrUnknown</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>enum_value</name></name></expr></argument>,<argument><expr><operator>*</operator><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>enumConfigRewrite</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigEnumOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,<argument><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>config</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>enum_value</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>enumd</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createEnumConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name><name>enum</name></name></type></parameter></parameter_list></cpp:macro>, config_addr, default, is_valid, apply) { embedCommonConfig(name, alias, flags) embedConfigInterface(enumConfigInit, enumConfigSet, enumConfigGet, enumConfigRewrite, apply) .data.enumd = { .config = &amp;(config_addr), .default_value = (default), .is_valid_fn = (is_valid), .enum_value = (enum), } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_NUMERIC_TYPE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (data.numeric.numeric_type == NUMERIC_TYPE_INT) { *(data.numeric.config.i) = (int) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_UINT) { *(data.numeric.config.ui) = (unsigned int) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_LONG) { *(data.numeric.config.l) = (long) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_ULONG) { *(data.numeric.config.ul) = (unsigned long) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_LONG_LONG) { *(data.numeric.config.ll) = (long long) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_ULONG_LONG) { *(data.numeric.config.ull) = (unsigned long long) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_SIZE_T) { *(data.numeric.config.st) = (size_t) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_SSIZE_T) { *(data.numeric.config.sst) = (ssize_t) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_OFF_T) { *(data.numeric.config.ot) = (off_t) val; } else if (data.numeric.numeric_type == NUMERIC_TYPE_TIME_T) { *(data.numeric.config.tt) = (time_t) val; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_NUMERIC_TYPE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (data.numeric.numeric_type == NUMERIC_TYPE_INT) { val = *(data.numeric.config.i); } else if (data.numeric.numeric_type == NUMERIC_TYPE_UINT) { val = *(data.numeric.config.ui); } else if (data.numeric.numeric_type == NUMERIC_TYPE_LONG) { val = *(data.numeric.config.l); } else if (data.numeric.numeric_type == NUMERIC_TYPE_ULONG) { val = *(data.numeric.config.ul); } else if (data.numeric.numeric_type == NUMERIC_TYPE_LONG_LONG) { val = *(data.numeric.config.ll); } else if (data.numeric.numeric_type == NUMERIC_TYPE_ULONG_LONG) { val = *(data.numeric.config.ull); } else if (data.numeric.numeric_type == NUMERIC_TYPE_SIZE_T) { val = *(data.numeric.config.st); } else if (data.numeric.numeric_type == NUMERIC_TYPE_SSIZE_T) { val = *(data.numeric.config.sst); } else if (data.numeric.numeric_type == NUMERIC_TYPE_OFF_T) { val = *(data.numeric.config.ot); } else if (data.numeric.numeric_type == NUMERIC_TYPE_TIME_T) { val = *(data.numeric.config.tt); }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>numericConfigInit</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<macro><name>SET_NUMERIC_TYPE</name><argument_list>(<argument>data.numeric.default_value</argument>)</argument_list></macro>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>numericBoundaryCheck</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>numeric_type</name></name> <operator>==</operator> <name>NUMERIC_TYPE_ULONG_LONG</name> <operator>||</operator>
<name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>numeric_type</name></name> <operator>==</operator> <name>NUMERIC_TYPE_UINT</name> <operator>||</operator>
<name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>numeric_type</name></name> <operator>==</operator> <name>NUMERIC_TYPE_SIZE_T</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name> <init>= <expr><name>ll</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>upper_bound</name> <init>= <expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>upper_bound</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>lower_bound</name> <init>= <expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>lower_bound</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ull</name> <operator>&gt;</operator> <name>upper_bound</name> <operator>||</operator> <name>ull</name> <operator>&lt;</operator> <name>lower_bound</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OCTAL_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>loadbuf</name></expr></argument>, <argument><expr><name>LOADBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"argument must be between %llo and %llo inclusive"</literal></expr></argument>,
<argument><expr><name>lower_bound</name></expr></argument>,
<argument><expr><name>upper_bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>loadbuf</name></expr></argument>, <argument><expr><name>LOADBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"argument must be between %llu and %llu inclusive"</literal></expr></argument>,
<argument><expr><name>lower_bound</name></expr></argument>,
<argument><expr><name>upper_bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>loadbuf</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PERCENT_CONFIG</name> <operator>&amp;&amp;</operator> <name>ll</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ll</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>lower_bound</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>loadbuf</name></expr></argument>, <argument><expr><name>LOADBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"percentage argument must be less or equal to %lld"</literal></expr></argument>,
<argument><expr><operator>-</operator><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>lower_bound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>loadbuf</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ll</name> <operator>&gt;</operator> <name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>upper_bound</name></name> <operator>||</operator> <name>ll</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>lower_bound</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>loadbuf</name></expr></argument>, <argument><expr><name>LOADBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"argument must be between %lld and %lld inclusive"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>lower_bound</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>upper_bound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>loadbuf</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>numericParseString</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>MEMORY_CONFIG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>memerr</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>memtoull</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>memerr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PERCENT_CONFIG</name> <operator>&amp;&amp;</operator>
<call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator>
<call><name>string2ll</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>*</operator><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>-</operator><operator>*</operator><name>res</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OCTAL_CONFIG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;&amp;</operator> <call><name>string2ll</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>MEMORY_CONFIG</name> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PERCENT_CONFIG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"argument must be a memory or percent value"</literal></expr> ;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>MEMORY_CONFIG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"argument must be a memory value"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OCTAL_CONFIG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"argument couldn't be parsed as an octal number"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"argument couldn't be parsed into an integer"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>numericConfigSet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl>, <decl><type ref="prev"/><name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>numericParseString</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>numericBoundaryCheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>is_valid_fn</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>is_valid_fn</name></name><argument_list>(<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<macro><name>GET_NUMERIC_TYPE</name><argument_list>(<argument>prev</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>ll</name></expr>)</condition> <block>{<block_content>
<macro><name>SET_NUMERIC_TYPE</name><argument_list>(<argument>ll</argument>)</argument_list></macro>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>numericConfigGet</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>GET_NUMERIC_TYPE</name><argument_list>(<argument>value</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PERCENT_CONFIG</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>MEMORY_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ull2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OCTAL_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%llo"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>numericConfigRewrite</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>GET_NUMERIC_TYPE</name><argument_list>(<argument>value</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PERCENT_CONFIG</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigPercentOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><name>value</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>MEMORY_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigBytesOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OCTAL_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigOctalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>numeric</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>embedCommonNumericalConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>_flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) { embedCommonConfig(name, alias, _flags) embedConfigInterface(numericConfigInit, numericConfigSet, numericConfigGet, numericConfigRewrite, apply) .data.numeric = { .lower_bound = (lower), .upper_bound = (upper), .default_value = (default), .is_valid_fn = (is_valid), .flags = (num_conf_flags),</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createIntConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_INT, .config.i = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createUIntConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_UINT, .config.ui = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createLongConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_LONG, .config.l = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createULongConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_ULONG, .config.ul = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createLongLongConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_LONG_LONG, .config.ll = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createULongLongConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_ULONG_LONG, .config.ull = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createSizeTConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_SIZE_T, .config.st = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createSSizeTConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_SSIZE_T, .config.sst = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createTimeTConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_TIME_T, .config.tt = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createOffTConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>lower</name></type></parameter>, <parameter><type><name>upper</name></type></parameter>, <parameter><type><name>config_addr</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default, num_conf_flags, is_valid, apply) embedCommonNumericalConfig(name, alias, flags, lower, upper, config_addr, default, num_conf_flags, is_valid, apply) .numeric_type = NUMERIC_TYPE_OFF_T, .config.ot = &amp;(config_addr) } }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>createSpecialConfig</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>alias</name></type></parameter>, <parameter><type><name>modifiable</name></type></parameter>, <parameter><type><name>setfn</name></type></parameter>, <parameter><type><name>getfn</name></type></parameter>, <parameter><type><name>rewritefn</name></type></parameter>, <parameter><type><name>applyfn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ embedCommonConfig(name, alias, modifiable) embedConfigInterface(NULL, setfn, getfn, rewritefn, applyfn) }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isValidActiveDefrag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DEFRAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Active defragmentation cannot be enabled: it "</literal>
<literal type="string">"requires a Redis server compiled with a modified Jemalloc "</literal>
<literal type="string">"like the one shipped by default with the Redis source "</literal>
<literal type="string">"distribution"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isValidDBfilename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pathIsBaseName</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"dbfilename can't be a path, just a filename"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isValidAOFfilename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"appendfilename can't be empty"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pathIsBaseName</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"appendfilename can't be a path, just a filename"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isValidAOFdirname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"appenddirname can't be empty"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pathIsBaseName</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"appenddirname can't be a path, just a dirname"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isValidAnnouncedHostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>NET_HOST_STR_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Hostnames must be less than "</literal>
<call><name>STRINGIFY</name><argument_list>(<argument><expr><name>NET_HOST_STR_LEN</name></expr></argument>)</argument_list></call> <literal type="string">" characters"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Hostnames may only contain alphanumeric characters, "</literal>
<literal type="string">"hyphens or dots"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isValidProcTitleTemplate</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateProcTitleTemplate</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"template format is invalid or contains unknown variables"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateProcTitleTemplate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"failed to set process title"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateHZ</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>&lt;</operator> <name>CONFIG_MIN_HZ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_MIN_HZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>&gt;</operator> <name>CONFIG_MAX_HZ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_MAX_HZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>config_hz</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updatePort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>changeListenPort</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ipfd</name></name></expr></argument>, <argument><expr><name>acceptTcpHandler</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Unable to listen on this port. Check server logs."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateJemallocBgThread</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_jemalloc_bg_thread</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>jemalloc_bg_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateReplBacklogSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resizeReplicationBacklog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateMaxmemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name> <init>= <expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call><operator>-</operator><call><name>freeMemoryGetNotCountedMemory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&lt;</operator> <name>used</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: the new maxmemory value set via CONFIG SET (%llu) is smaller than the current memory usage (%zu). This will result in key eviction and/or the inability to accept new write commands depending on the maxmemory-policy."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>startEvictionTimeProc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateGoodSlaves</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refreshGoodSlavesCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateWatchdogPeriod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>applyWatchdogPeriod</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateAppendonly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>aof_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stopAppendOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_OFF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>startAppendOnly</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Unable to turn on AOF. Check server logs."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateAofAutoGCEnabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>aof_disable_auto_gc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>aofDelHistoryFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateSighandlerEnabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>crashlog_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setupSignalHandlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>removeSignalHandlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateMaxclients</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_maxclients</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>adjustOpenFilesLimit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>!=</operator> <name>new_maxclients</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"The operating system is not able to handle the specified number of clients, try with %d"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>aeGetSetSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>+</operator> <name>CONFIG_FDSET_INCR</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aeResizeSetSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>+</operator> <name>CONFIG_FDSET_INCR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"The event loop API used by Redis is not able to handle the specified number of clients"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateOOMScoreAdj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>setOOMScoreAdj</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Failed to set current oom_score_adj. Check server logs."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>updateRequirePass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLUpdateDefaultUserPassword</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>applyBind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>changeBindAddr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Failed to bind to specified addresses."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>updateClusterFlags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterUpdateMyselfFlags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>updateClusterIp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterUpdateMyselfIp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>updateClusterHostname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clusterUpdateMyselfHostname</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>applyTlsCfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>tls_port</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>tls_replication</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>tls_cluster</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>tlsConfigure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tls_ctx_config</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Unable to update TLS configuration. Check server logs."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>applyTLSPort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isTlsConfigured</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tlsConfigure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tls_ctx_config</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Unable to update TLS configuration. Check server logs."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>changeListenPort</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tlsfd</name></name></expr></argument>, <argument><expr><name>acceptTLSHandler</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Unable to listen on this port. Check server logs."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setConfigDirOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"wrong number of arguments"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>getConfigDirOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getcwd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setConfigSaveOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Invalid save parameters"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Invalid save parameters"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reading_config_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>resetServerSaveParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_loaded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>save_loaded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>save_loaded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetServerSaveParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>seconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changes</name></decl>;</decl_stmt>
<expr_stmt><expr><name>seconds</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>getConfigSaveOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>buf</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%jd %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>seconds</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>saveparamslen</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setConfigClientOutputBufferLimitOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>updateClientOutputBufferLimit</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>getConfigClientOutputBufferLimitOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>buf</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_TYPE_OBUF_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%s %llu %llu %ld"</literal></expr></argument>,
<argument><expr><call><name>getClientTypeName</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>CLIENT_TYPE_OBUF_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setConfigOOMScoreAdjValuesOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>values</name><index>[<expr><name>CONFIG_OOM_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <name>CONFIG_OOM_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"wrong number of arguments"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CONFIG_OOM_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>eptr</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>val</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">2000</literal> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <literal type="number">2000</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Invalid oom-score-adj-values, elements must be between -2000 and 2000."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>values</name><index>[<expr><name>CONFIG_OOM_REPLICA</name></expr>]</index></name> <operator>&lt;</operator> <name><name>values</name><index>[<expr><name>CONFIG_OOM_MASTER</name></expr>]</index></name> <operator>||</operator>
<name><name>values</name><index>[<expr><name>CONFIG_OOM_BGCHILD</name></expr>]</index></name> <operator>&lt;</operator> <name><name>values</name><index>[<expr><name>CONFIG_OOM_REPLICA</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"The oom-score-adj-values configuration may not work for non-privileged processes! "</literal>
<literal type="string">"Please consult the documentation."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CONFIG_OOM_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>oom_score_adj_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>oom_score_adj_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>change</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>getConfigOOMScoreAdjValuesOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>buf</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CONFIG_OOM_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>oom_score_adj_values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>CONFIG_OOM_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setConfigNotifyKeyspaceEventsOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"wrong number of arguments"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>keyspaceEventsStringToFlags</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Invalid event class character. Use 'Ag$lshzxeKEtmd'."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>getConfigNotifyKeyspaceEventsOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>keyspaceEventsFlagsToString</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setConfigBindOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <name>CONFIG_BINDADDR_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Too many bind addresses specified."</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setConfigReplicaOfOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"wrong number of arguments"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterport</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterport</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>server</name><operator>.</operator><name>masterport</name></name> <operator>&gt;</operator> <literal type="number">65535</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Invalid master port"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECT</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>getConfigBindOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sdsjoin</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>getConfigReplicaOfOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%s %d"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>allowProtectedAction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>config</name> <operator>==</operator> <name>PROTECTED_ACTION_ALLOWED_YES</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>config</name> <operator>==</operator> <name>PROTECTED_ACTION_ALLOWED_LOCAL</name> <operator>&amp;&amp;</operator> <call><name>islocalClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setConfigLatencyTrackingInfoPercentilesOutputOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>percentile</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string2d</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>percentile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"Invalid latency-tracking-info-percentiles parameters"</literal></expr>;</expr_stmt>
<goto>goto <name>configerr</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>percentile</name> <operator>&gt;</operator> <literal type="number">100.0</literal> <operator>||</operator> <name>percentile</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"latency-tracking-info-percentiles parameters should sit between [0.0,100.0]"</literal></expr>;</expr_stmt>
<goto>goto <name>configerr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>percentile</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<label><name>configerr</name>:</label>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>getConfigLatencyTrackingInfoPercentilesOutputOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>buf</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>trimDoubleString</name><argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigLatencyTrackingInfoPercentilesOutputOption</name><parameter_list>(<parameter><decl><type><name>typeData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">" \"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><literal type="string">" %f"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>trimDoubleString</name><argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>standardConfig</name></type> <name><name>configs</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"rdbchecksum"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"daemonize"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>daemonize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"io-threads-do-reads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>io_threads_do_reads</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"always-show-logo"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>always_show_logo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"protected-mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>protected_mode</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"rdbcompression"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_compression</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"rdb-del-sync-files"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_del_sync_files</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"activerehashing"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>activerehashing</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"stop-writes-on-bgsave-error"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>stop_writes_on_bgsave_err</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"set-proc-title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>set_proc_title</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"dynamic-hz"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>dynamic_hz</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"lazyfree-lazy-eviction"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_eviction</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"lazyfree-lazy-expire"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"lazyfree-lazy-server-del"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_server_del</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"lazyfree-lazy-user-del"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_user_del</name></name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"lazyfree-lazy-user-flush"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_user_flush</name></name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"repl-disable-tcp-nodelay"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_disable_tcp_nodelay</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"repl-diskless-sync"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"aof-rewrite-incremental-fsync"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_incremental_fsync</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"no-appendfsync-on-rewrite"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_no_fsync_on_rewrite</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-require-full-coverage"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_require_full_coverage</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"rdb-save-incremental-fsync"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_save_incremental_fsync</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"aof-load-truncated"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_load_truncated</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"aof-use-rdb-preamble"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_use_rdb_preamble</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"aof-timestamp-enabled"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_timestamp_enabled</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-replica-no-failover"</literal></expr></argument>, <argument><expr><literal type="string">"cluster-slave-no-failover"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateClusterFlags</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"replica-lazy-flush"</literal></expr></argument>, <argument><expr><literal type="string">"slave-lazy-flush"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_lazy_flush</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"replica-serve-stale-data"</literal></expr></argument>, <argument><expr><literal type="string">"slave-serve-stale-data"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_serve_stale_data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"replica-read-only"</literal></expr></argument>, <argument><expr><literal type="string">"slave-read-only"</literal></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"replica-ignore-maxmemory"</literal></expr></argument>, <argument><expr><literal type="string">"slave-ignore-maxmemory"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ignore_maxmemory</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"jemalloc-bg-thread"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>jemalloc_bg_thread</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateJemallocBgThread</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"activedefrag"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>isValidActiveDefrag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"syslog-enabled"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-enabled"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"appendonly"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>DENY_LOADING_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_enabled</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateAppendonly</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-allow-reads-when-down"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_allow_reads_when_down</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-allow-pubsubshard-when-down"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_allow_pubsubshard_when_down</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"crash-log-enabled"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>crashlog_enabled</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateSighandlerEnabled</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"crash-memcheck-enabled"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>memcheck_enabled</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"use-exit-on-panic"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>HIDDEN_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>use_exit_on_panic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"disable-thp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>disable_thp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-allow-replica-migration"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_allow_replica_migration</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"replica-announced"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>replica_announced</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"latency-tracking"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>latency_tracking_enabled</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"aof-disable-auto-gc"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_disable_auto_gc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateAofAutoGCEnabled</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"aclfile"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>acl_filename</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"unixsocket"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"pidfile"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"replica-announce-ip"</literal></expr></argument>, <argument><expr><literal type="string">"slave-announce-ip"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"masteruser"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>SENSITIVE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masteruser</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-announce-ip"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateClusterIp</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-config-file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_configfile</name></name></expr></argument>, <argument><expr><literal type="string">"nodes.conf"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-announce-hostname"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_hostname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>isValidAnnouncedHostname</name></expr></argument>, <argument><expr><name>updateClusterHostname</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"syslog-ident"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name></expr></argument>, <argument><expr><literal type="string">"redis"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"dbfilename"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>PROTECTED_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>, <argument><expr><literal type="string">"dump.rdb"</literal></expr></argument>, <argument><expr><name>isValidDBfilename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"appendfilename"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name></expr></argument>, <argument><expr><literal type="string">"appendonly.aof"</literal></expr></argument>, <argument><expr><name>isValidAOFfilename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"appenddirname"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_dirname</name></name></expr></argument>, <argument><expr><literal type="string">"appendonlydir"</literal></expr></argument>, <argument><expr><name>isValidAOFdirname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"server_cpulist"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>server_cpulist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"bio_cpulist"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>bio_cpulist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"aof_rewrite_cpulist"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_cpulist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"bgsave_cpulist"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>bgsave_cpulist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"ignore-warnings"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>ignore_warnings</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"proc-title-template"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>proc_title_template</name></name></expr></argument>, <argument><expr><name>CONFIG_DEFAULT_PROC_TITLE_TEMPLATE</name></expr></argument>, <argument><expr><name>isValidProcTitleTemplate</name></expr></argument>, <argument><expr><name>updateProcTitleTemplate</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"bind-source-addr"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>bind_source_addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"logfile"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>ALLOW_EMPTY_STRING</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSDSConfig</name><argument_list>(<argument><expr><literal type="string">"masterauth"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>SENSITIVE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSDSConfig</name><argument_list>(<argument><expr><literal type="string">"requirepass"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>SENSITIVE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateRequirePass</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"supervised"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>supervised_mode_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name></expr></argument>, <argument><expr><name>SUPERVISED_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"syslog-facility"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>syslog_facility_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>syslog_facility</name></name></expr></argument>, <argument><expr><name>LOG_LOCAL0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"repl-diskless-load"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>DENY_LOADING_CONFIG</name></expr></argument>, <argument><expr><name>repl_diskless_load_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_diskless_load</name></name></expr></argument>, <argument><expr><name>REPL_DISKLESS_LOAD_DISABLED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"loglevel"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>loglevel_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>verbosity</name></name></expr></argument>, <argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"maxmemory-policy"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>maxmemory_policy_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name></expr></argument>, <argument><expr><name>MAXMEMORY_NO_EVICTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"appendfsync"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>aof_fsync_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_fsync</name></name></expr></argument>, <argument><expr><name>AOF_FSYNC_EVERYSEC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"oom-score-adj"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>oom_score_adj_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>oom_score_adj</name></name></expr></argument>, <argument><expr><name>OOM_SCORE_ADJ_NO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateOOMScoreAdj</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"acl-pubsub-default"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>acl_pubsub_default_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>acl_pubsub_default</name></name></expr></argument>, <argument><expr><name>SELECTOR_FLAG_ALLCHANNELS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"sanitize-dump-payload"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>sanitize_dump_payload_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>sanitize_dump_payload</name></name></expr></argument>, <argument><expr><name>SANITIZE_DUMP_NO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"enable-protected-configs"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>protected_action_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>enable_protected_configs</name></name></expr></argument>, <argument><expr><name>PROTECTED_ACTION_ALLOWED_NO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"enable-debug-command"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>protected_action_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>enable_debug_cmd</name></name></expr></argument>, <argument><expr><name>PROTECTED_ACTION_ALLOWED_NO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"enable-module-command"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><name>protected_action_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>enable_module_cmd</name></name></expr></argument>, <argument><expr><name>PROTECTED_ACTION_ALLOWED_NO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-preferred-endpoint-type"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>cluster_preferred_endpoint_type_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_preferred_endpoint_type</name></name></expr></argument>, <argument><expr><name>CLUSTER_ENDPOINT_TYPE_IP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"databases"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"port"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="number">6379</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updatePort</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"io-threads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>io_threads_num</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"auto-aof-rewrite-percentage"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-replica-validity-factor"</literal></expr></argument>, <argument><expr><literal type="string">"cluster-slave-validity-factor"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"list-max-listpack-size"</literal></expr></argument>, <argument><expr><literal type="string">"list-max-ziplist-size"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>INT_MIN</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>list_max_listpack_size</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"tcp-keepalive"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcpkeepalive</name></name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-migration-barrier"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_migration_barrier</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"active-defrag-cycle-min"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"active-defrag-cycle-max"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"active-defrag-threshold-lower"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"active-defrag-threshold-upper"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_upper</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"lfu-log-factor"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>lfu_log_factor</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"lfu-decay-time"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>lfu_decay_time</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"replica-priority"</literal></expr></argument>, <argument><expr><literal type="string">"slave-priority"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>slave_priority</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"repl-diskless-sync-delay"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync_delay</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"maxmemory-samples"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_samples</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"maxmemory-eviction-tenacity"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_eviction_tenacity</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxidletime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"replica-announce-port"</literal></expr></argument>, <argument><expr><literal type="string">"slave-announce-port"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"tcp-backlog"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>, <argument><expr><literal type="number">511</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-port"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-announce-bus-port"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-announce-port"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-announce-tls-port"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_tls_port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"repl-timeout"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_timeout</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"repl-ping-replica-period"</literal></expr></argument>, <argument><expr><literal type="string">"repl-ping-slave-period"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"list-compress-depth"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"rdb-key-save-delay"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>HIDDEN_CONFIG</name></expr></argument>, <argument><expr><name>INT_MIN</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_key_save_delay</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"key-load-delay"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>HIDDEN_CONFIG</name></expr></argument>, <argument><expr><name>INT_MIN</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>key_load_delay</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"active-expire-effort"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_expire_effort</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"hz"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name></expr></argument>, <argument><expr><name>CONFIG_DEFAULT_HZ</name></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateHZ</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"min-replicas-to-write"</literal></expr></argument>, <argument><expr><literal type="string">"min-slaves-to-write"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateGoodSlaves</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"min-replicas-max-lag"</literal></expr></argument>, <argument><expr><literal type="string">"min-slaves-max-lag"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateGoodSlaves</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"watchdog-period"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>HIDDEN_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateWatchdogPeriod</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"shutdown-timeout"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>shutdown_timeout</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"repl-diskless-sync-max-replicas"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync_max_replicas</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createUIntConfig</name><argument_list>(<argument><expr><literal type="string">"maxclients"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateMaxclients</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createUIntConfig</name><argument_list>(<argument><expr><literal type="string">"unixsocketperm"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>unixsocketperm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OCTAL_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createULongConfig</name><argument_list>(<argument><expr><literal type="string">"active-defrag-max-scan-fields"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createULongConfig</name><argument_list>(<argument><expr><literal type="string">"slowlog-max-len"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>slowlog_max_len</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createULongConfig</name><argument_list>(<argument><expr><literal type="string">"acllog-max-len"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>acllog_max_len</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createLongLongConfig</name><argument_list>(<argument><expr><literal type="string">"busy-reply-threshold"</literal></expr></argument>, <argument><expr><literal type="string">"lua-time-limit"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>busy_reply_threshold</name></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createLongLongConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-node-timeout"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name></expr></argument>, <argument><expr><literal type="number">15000</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createLongLongConfig</name><argument_list>(<argument><expr><literal type="string">"slowlog-log-slower-than"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>slowlog_log_slower_than</name></name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createLongLongConfig</name><argument_list>(<argument><expr><literal type="string">"latency-monitor-threshold"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>latency_monitor_threshold</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createLongLongConfig</name><argument_list>(<argument><expr><literal type="string">"proto-max-bulk-len"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>proto_max_bulk_len</name></name></expr></argument>, <argument><expr><literal type="number">512ll</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createLongLongConfig</name><argument_list>(<argument><expr><literal type="string">"stream-node-max-entries"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>stream_node_max_entries</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createLongLongConfig</name><argument_list>(<argument><expr><literal type="string">"repl-backlog-size"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateReplBacklogSize</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createULongLongConfig</name><argument_list>(<argument><expr><literal type="string">"maxmemory"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ULLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>updateMaxmemory</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createULongLongConfig</name><argument_list>(<argument><expr><literal type="string">"cluster-link-sendbuf-limit"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ULLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>cluster_link_sendbuf_limit_bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"hash-max-listpack-entries"</literal></expr></argument>, <argument><expr><literal type="string">"hash-max-ziplist-entries"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>hash_max_listpack_entries</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"set-max-intset-entries"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"zset-max-listpack-entries"</literal></expr></argument>, <argument><expr><literal type="string">"zset-max-ziplist-entries"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>zset_max_listpack_entries</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"active-defrag-ignore-bytes"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_ignore_bytes</name></name></expr></argument>, <argument><expr><literal type="number">100</literal><operator>&lt;&lt;</operator><literal type="number">20</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"hash-max-listpack-value"</literal></expr></argument>, <argument><expr><literal type="string">"hash-max-ziplist-value"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>hash_max_listpack_value</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"stream-node-max-bytes"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>stream_node_max_bytes</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"zset-max-listpack-value"</literal></expr></argument>, <argument><expr><literal type="string">"zset-max-ziplist-value"</literal></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>zset_max_listpack_value</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"hll-sparse-max-bytes"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>hll_sparse_max_bytes</name></name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"tracking-table-max-keys"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tracking_table_max_keys</name></name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"client-query-buffer-limit"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEBUG_CONFIG</name> <operator>|</operator> <name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>client_max_querybuf_len</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSSizeTConfig</name><argument_list>(<argument><expr><literal type="string">"maxmemory-clients"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><name>SSIZE_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_clients</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name> <operator>|</operator> <name>PERCENT_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createTimeTConfig</name><argument_list>(<argument><expr><literal type="string">"repl-backlog-ttl"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name></expr></argument>, <argument><expr><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createOffTConfig</name><argument_list>(<argument><expr><literal type="string">"auto-aof-rewrite-min-size"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_min_size</name></name></expr></argument>, <argument><expr><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>MEMORY_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createOffTConfig</name><argument_list>(<argument><expr><literal type="string">"loading-process-events-interval-bytes"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>HIDDEN_CONFIG</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"tls-port"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTLSPort</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"tls-session-cache-size"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>session_cache_size</name></name></expr></argument>, <argument><expr><literal type="number">20</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createIntConfig</name><argument_list>(<argument><expr><literal type="string">"tls-session-cache-timeout"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>session_cache_timeout</name></name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><name>INTEGER_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"tls-cluster"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_cluster</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"tls-replication"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_replication</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createEnumConfig</name><argument_list>(<argument><expr><literal type="string">"tls-auth-clients"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>tls_auth_clients_enum</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_auth_clients</name></name></expr></argument>, <argument><expr><name>TLS_CLIENT_AUTH_YES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"tls-prefer-server-ciphers"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>prefer_server_ciphers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createBoolConfig</name><argument_list>(<argument><expr><literal type="string">"tls-session-caching"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>session_caching</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-cert-file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>cert_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-key-file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>key_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-key-file-pass"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>key_file_pass</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-client-cert-file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>client_cert_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-client-key-file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>client_key_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-client-key-file-pass"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>client_key_file_pass</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-dh-params-file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>dh_params_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-ca-cert-file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>ca_cert_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-ca-cert-dir"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>ca_cert_dir</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-protocols"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>protocols</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-ciphers"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>ciphers</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createStringConfig</name><argument_list>(<argument><expr><literal type="string">"tls-ciphersuites"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>EMPTY_STRING_IS_NULL</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_ctx_config</name><operator>.</operator><name>ciphersuites</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>applyTlsCfg</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>createSpecialConfig</name><argument_list>(<argument><expr><literal type="string">"dir"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>PROTECTED_CONFIG</name> <operator>|</operator> <name>DENY_LOADING_CONFIG</name></expr></argument>, <argument><expr><name>setConfigDirOption</name></expr></argument>, <argument><expr><name>getConfigDirOption</name></expr></argument>, <argument><expr><name>rewriteConfigDirOption</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSpecialConfig</name><argument_list>(<argument><expr><literal type="string">"save"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>MULTI_ARG_CONFIG</name></expr></argument>, <argument><expr><name>setConfigSaveOption</name></expr></argument>, <argument><expr><name>getConfigSaveOption</name></expr></argument>, <argument><expr><name>rewriteConfigSaveOption</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSpecialConfig</name><argument_list>(<argument><expr><literal type="string">"client-output-buffer-limit"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>MULTI_ARG_CONFIG</name></expr></argument>, <argument><expr><name>setConfigClientOutputBufferLimitOption</name></expr></argument>, <argument><expr><name>getConfigClientOutputBufferLimitOption</name></expr></argument>, <argument><expr><name>rewriteConfigClientOutputBufferLimitOption</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSpecialConfig</name><argument_list>(<argument><expr><literal type="string">"oom-score-adj-values"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>MULTI_ARG_CONFIG</name></expr></argument>, <argument><expr><name>setConfigOOMScoreAdjValuesOption</name></expr></argument>, <argument><expr><name>getConfigOOMScoreAdjValuesOption</name></expr></argument>, <argument><expr><name>rewriteConfigOOMScoreAdjValuesOption</name></expr></argument>, <argument><expr><name>updateOOMScoreAdj</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSpecialConfig</name><argument_list>(<argument><expr><literal type="string">"notify-keyspace-events"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name></expr></argument>, <argument><expr><name>setConfigNotifyKeyspaceEventsOption</name></expr></argument>, <argument><expr><name>getConfigNotifyKeyspaceEventsOption</name></expr></argument>, <argument><expr><name>rewriteConfigNotifyKeyspaceEventsOption</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSpecialConfig</name><argument_list>(<argument><expr><literal type="string">"bind"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>MULTI_ARG_CONFIG</name></expr></argument>, <argument><expr><name>setConfigBindOption</name></expr></argument>, <argument><expr><name>getConfigBindOption</name></expr></argument>, <argument><expr><name>rewriteConfigBindOption</name></expr></argument>, <argument><expr><name>applyBind</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSpecialConfig</name><argument_list>(<argument><expr><literal type="string">"replicaof"</literal></expr></argument>, <argument><expr><literal type="string">"slaveof"</literal></expr></argument>, <argument><expr><name>IMMUTABLE_CONFIG</name> <operator>|</operator> <name>MULTI_ARG_CONFIG</name></expr></argument>, <argument><expr><name>setConfigReplicaOfOption</name></expr></argument>, <argument><expr><name>getConfigReplicaOfOption</name></expr></argument>, <argument><expr><name>rewriteConfigReplicaOfOption</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>createSpecialConfig</name><argument_list>(<argument><expr><literal type="string">"latency-tracking-info-percentiles"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODIFIABLE_CONFIG</name> <operator>|</operator> <name>MULTI_ARG_CONFIG</name></expr></argument>, <argument><expr><name>setConfigLatencyTrackingInfoPercentilesOutputOption</name></expr></argument>, <argument><expr><name>getConfigLatencyTrackingInfoPercentilesOutputOption</name></expr></argument>, <argument><expr><name>rewriteConfigLatencyTrackingInfoPercentilesOutputOption</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>configHelpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"GET &lt;pattern&gt;"</literal></expr>,
<expr><literal type="string">" Return parameters matching the glob-like &lt;pattern&gt; and their values."</literal></expr>,
<expr><literal type="string">"SET &lt;directive&gt; &lt;value&gt;"</literal></expr>,
<expr><literal type="string">" Set the configuration &lt;directive&gt; to &lt;value&gt;."</literal></expr>,
<expr><literal type="string">"RESETSTAT"</literal></expr>,
<expr><literal type="string">" Reset statistics reported by the INFO command."</literal></expr>,
<expr><literal type="string">"REWRITE"</literal></expr>,
<expr><literal type="string">" Rewrite the configuration file."</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>configResetStatCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>resetServerStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetCommandTableStats</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetErrorTableStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>configRewriteCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The server is running without a config file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rewriteConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"CONFIG REWRITE failed: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Rewriting config file: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"CONFIG REWRITE executed with success."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
