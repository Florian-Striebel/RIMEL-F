<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/eval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"monotonic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resp_parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"script_lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lualib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<function_decl><type><name>void</name></type> <name>ldbInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbDisable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbEnable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evalGenericCommandWithDebugging</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evalsha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>ldbCatStackValue</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>luaScript</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>body</name></decl>;</decl_stmt>
}</block></struct></type> <name>luaScript</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dictLuaScriptDestructor</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>luaScript</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator><operator>-&gt;</operator><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>dictStrCaseHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictGenCaseHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>dictType</name></type> <name>shaScriptObjectDictType</name> <init>= <expr><block>{
<expr><name>dictStrCaseHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>dictLuaScriptDestructor</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<struct>struct <name>luaCtx</name> <block>{
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>lua_client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>lua_scripts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>lua_scripts_mem</name></decl>;</decl_stmt>
}</block> <decl><name>lctx</name></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDB_BREAKPOINTS_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDB_MAX_LEN_DEFAULT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<struct>struct <name>ldbState</name> <block>{
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>forked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>logs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>traces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bp</name><index>[<expr><name>LDB_BREAKPOINTS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bpcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>luabp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>currentline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>cbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen_hint_sent</name></decl>;</decl_stmt>
}</block> <decl><name>ldb</name></decl>;</struct>
<function><type><name>void</name></type> <name>sha1hex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SHA1_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cset</name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>script</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><name>hash</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>digest</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cset</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>hash</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xF0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cset</name><index>[<expr><operator>(</operator><name><name>hash</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>digest</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>luaRedisBreakpointCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>active</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>luabp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>luaRedisDebugCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ldb</name><operator>.</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>log</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;debug&gt; line %d: "</literal></expr></argument>, <argument><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>argc</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>ldbCatStackValue</name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><literal type="string">", "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>luaRedisReplicateCommandsCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>scriptingInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>setup</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name> <init>= <expr><call><name>lua_open</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>setup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>script_caller</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>script_disable_deny_script</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shaScriptObjectDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts_mem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaRegisterRedisAPI</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"redis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"breakpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaRedisBreakpointCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaRedisDebugCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"replicate_commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>luaRedisReplicateCommandsCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"redis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compare_func</name> <init>= <expr><literal type="string">"function __redis__compare_helper(a,b)\n"</literal>
<literal type="string">" if a == false then a = '' end\n"</literal>
<literal type="string">" if b == false then b = '' end\n"</literal>
<literal type="string">" return a&lt;b\n"</literal>
<literal type="string">"end\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>compare_func</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>compare_func</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@cmp_func_def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errh_func</name> <init>= <expr><literal type="string">"local dbg = debug\n"</literal>
<literal type="string">"function __redis__err__handler(err)\n"</literal>
<literal type="string">" local i = dbg.getinfo(2,'nSl')\n"</literal>
<literal type="string">" if i and i.what == 'C' then\n"</literal>
<literal type="string">" i = dbg.getinfo(3,'nSl')\n"</literal>
<literal type="string">" end\n"</literal>
<literal type="string">" if i then\n"</literal>
<literal type="string">" return i.source .. ':' .. i.currentline .. ': ' .. err\n"</literal>
<literal type="string">" else\n"</literal>
<literal type="string">" return err\n"</literal>
<literal type="string">" end\n"</literal>
<literal type="string">"end\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>errh_func</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>errh_func</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@err_handler_def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>lctx</name><operator>.</operator><name>lua_client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name></name> <operator>=</operator> <call><name>createClient</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_SCRIPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_DENY_BLOCKING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>luaEnableGlobalsProtection</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name> <operator>=</operator> <name>lua</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>scriptingRelease</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>async</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeLuaScriptsAsync</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts_mem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_close</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>scriptingReset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>scriptingRelease</name><argument_list>(<argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scriptingInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>luaCreateFunction</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>body</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>funcname</name><index>[<expr><literal type="number">43</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>script_flags</name> <init>= <expr><name>SCRIPT_FLAG_EVAL_COMPAT_MODE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha1hex</name><argument_list>(<argument><expr><name>funcname</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>,<argument><expr><name>funcname</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>shebang_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"#!"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numparts</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shebang_end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>shebang_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid script shebang"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>shebang_len</name> <operator>=</operator> <name>shebang_end</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>shebang</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>shebang_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>parts</name> <init>= <expr><call><name>sdssplitargs</name><argument_list>(<argument><expr><name>shebang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numparts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>shebang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parts</name> <operator>||</operator> <name>numparts</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid engine in script shebang"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name>numparts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"#!lua"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unexpected engine in script shebang: %s"</literal></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name>numparts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>script_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SCRIPT_FLAG_EVAL_COMPAT_MODE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numparts</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"flags="</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numflags</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name> <operator>&lt;</operator> <name>numflags</name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>scriptFlag</name> <modifier>*</modifier></type><name>sf</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>sf</name> <operator>=</operator> <name>scripts_flags_def</name></expr>;</init> <condition><expr><name><name>sf</name><operator>-&gt;</operator><name>flag</name></name></expr>;</condition> <incr><expr><name>sf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>flags</name><index>[<expr><name>jj</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sf</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sf</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unexpected flag in script shebang: %s"</literal></expr></argument>, <argument><expr><name><name>flags</name><index>[<expr><name>jj</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>numflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name>numparts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>script_flags</name> <operator>|=</operator> <name><name>sf</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>numflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown lua shebang option: %s"</literal></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name>numparts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name>numparts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>funcdef</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><literal type="string">"function "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><name>funcname</name></expr></argument>,<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><literal type="string">"() "</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>shebang_len</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>shebang_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><literal type="string">"\nend"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@user_script"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Error compiling script (new function): %s\n"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Error running script (new function): %s\n"</literal></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>luaScript</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>luaScript</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>body</name></name> <operator>=</operator> <name>body</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>script_flags</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sha</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>funcname</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>,<argument><expr><name>sha</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><name><name>lctx</name><operator>.</operator><name>lua_client</name></name></expr></else></ternary></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts_mem</name></name> <operator>+=</operator> <call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name>sha</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getStringObjectSdsUsedMemory</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sha</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>prepareLuaClient</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>script_caller</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>script_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_MULTI</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>resetLuaClient</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_MULTI</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>evalGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evalsha</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name> <init>= <expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>funcname</name><index>[<expr><literal type="number">43</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>numkeys</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>numkeys</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numkeys</name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Number of keys can't be greater than number of args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numkeys</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Number of keys can't be negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evalsha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sha1hex</name><argument_list>(<argument><expr><name>funcname</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sha</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sha</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>sha</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr> ?</condition><then>
<expr><name><name>sha</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><operator>(</operator><literal type="char">'a'</literal><operator>-</operator><literal type="char">'A'</literal><operator>)</operator></expr> </then><else>: <expr><name><name>sha</name><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">42</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"__redis__err__handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalsha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>noscripterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>luaCreateFunction</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><call><name>lua_isnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lua_cur_script</name> <init>= <expr><name>funcname</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>, <argument><expr><name>lua_cur_script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>luaScript</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ro</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>evalRoCommand</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>evalShaRoCommand</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scriptRunCtx</name></type> <name>rctx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>scriptPrepareForRun</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rctx</name></expr></argument>, <argument><expr><name><name>lctx</name><operator>.</operator><name>lua_client</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>lua_cur_script</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>ro</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rctx</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SCRIPT_EVAL_MODE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaCallFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rctx</name></expr></argument>, <argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>numkeys</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name><operator>+</operator><literal type="number">3</literal><operator>+</operator><name>numkeys</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">3</literal><operator>-</operator><name>numkeys</name></expr></argument>, <argument><expr><name><name>ldb</name><operator>.</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scriptResetRun</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>evalCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>replicationFeedMonitors</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>monitors</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA_DEBUG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evalGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evalGenericCommandWithDebugging</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>evalRoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>evalCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>evalShaCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>replicationFeedMonitors</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>monitors</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>noscripterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA_DEBUG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evalGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Please use EVAL instead of EVALSHA for debugging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>evalShaRoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>evalShaCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>scriptCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"DEBUG (YES|SYNC|NO)"</literal></expr>,
<expr><literal type="string">" Set the debug mode for subsequent scripts executed."</literal></expr>,
<expr><literal type="string">"EXISTS &lt;sha1&gt; [&lt;sha1&gt; ...]"</literal></expr>,
<expr><literal type="string">" Return information about the existence of the scripts in the script cache."</literal></expr>,
<expr><literal type="string">"FLUSH [ASYNC|SYNC]"</literal></expr>,
<expr><literal type="string">" Flush the Lua scripts cache. Very dangerous on replicas."</literal></expr>,
<expr><literal type="string">" When called without the optional mode argument, the behavior is determined by the"</literal></expr>,
<expr><literal type="string">" lazyfree-lazy-user-flush configuration directive. Valid modes are:"</literal></expr>,
<expr><literal type="string">" * ASYNC: Asynchronously flush the scripts cache."</literal></expr>,
<expr><literal type="string">" * SYNC: Synchronously flush the scripts cache."</literal></expr>,
<expr><literal type="string">"KILL"</literal></expr>,
<expr><literal type="string">" Kill the currently executing Lua script."</literal></expr>,
<expr><literal type="string">"LOAD &lt;script&gt;"</literal></expr>,
<expr><literal type="string">" Load a script into the scripts cache without executing it."</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>async</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>async</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"async"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>async</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>async</name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_user_flush</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SCRIPT FLUSH only support SYNC|ASYNC option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>scriptingReset</name><argument_list>(<argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"exists"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"load"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sha</name> <init>= <expr><call><name>luaCreateFunction</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sha</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sha</name></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"kill"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scriptKill</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clientHasPendingReplies</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SCRIPT DEBUG must be called outside a pipeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbDisable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbEnable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbEnable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_LUA_DEBUG_SYNC</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Use SCRIPT DEBUG YES/SYNC/NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>unsigned</name> <name>long</name></type> <name>evalMemory</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>luaMemory</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>dict</name><modifier>*</modifier></type> <name>evalScriptsDict</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>unsigned</name> <name>long</name></type> <name>evalScriptsMemory</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>lctx</name><operator>.</operator><name>lua_scripts_mem</name></name> <operator>+</operator>
<call><name>dictSize</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>luaScript</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator>
<call><name>dictSlots</name><argument_list>(<argument><expr><name><name>lctx</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>,<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>sdsfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>children</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbFlushLog</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ldbIsEnabled</name><parameter_list>()</parameter_list><block>{<block_content>
<return>return <expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>step</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbEnable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_LUA_DEBUG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbFlushLog</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>luabp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name>LDB_MAX_LEN_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen_hint_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbDisable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_LUA_DEBUG</name><operator>|</operator><name>CLIENT_LUA_DEBUG_SYNC</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbLog</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>,<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbLogWithMaxLen</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>trimmed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name> <operator>&amp;&amp;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>ldb</name><operator>.</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><literal type="string">" ..."</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trimmed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trimmed</name> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>maxlen_hint_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen_hint_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"&lt;hint&gt; The above reply was trimmed. Use 'maxlen 0' to disable trimming."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbSendLogs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>proto</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><literal type="string">"*%i\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><literal type="string">"+"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsmapchars</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>connWrite</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>conn</name></name></expr></argument>,<argument><expr><name>proto</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ldbStartSession</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>forked</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA_DEBUG_SYNC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>forked</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>cp</name> <init>= <expr><call><name>redisFork</name><argument_list>(<argument><expr><name>CHILD_TYPE_LDB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Fork() failed: can't run EVAL in debugging mode: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Redis forked for debugging eval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Redis synchronous debugging eval session started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>connBlock</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSendTimeout</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>conn</name></name></expr></argument>,<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>srcstring</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>srclen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>srclen</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>srcstring</name><index>[<expr><name>srclen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator>
<name><name>srcstring</name><index>[<expr><name>srclen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>srcstring</name><index>[<expr><operator>--</operator><name>srclen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>,<argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>src</name></name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ldb</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbEndSession</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;endsession&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>forked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writeToClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Lua debugging session child exiting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Redis synchronous debugging eval session ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>connNonBlock</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connSendTimeout</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>conn</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_CLOSE_AFTER_REPLY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>src</name></name></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ldbRemoveChild</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ldbPendingChildren</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbKillForkedSessions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Killing debugging session %ld"</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>,<argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>children</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>evalGenericCommandWithDebugging</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evalsha</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldbStartSession</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evalGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>evalsha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbEndSession</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldbDisable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbGetSourceLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>line</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>ldb</name><operator>.</operator><name>lines</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"&lt;out of range source code line&gt;"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>ldb</name><operator>.</operator><name>src</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ldbIsBreakpoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ldb</name><operator>.</operator><name>bpcount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>bp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>line</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ldbAddBreakpoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>line</name> <operator>&gt;</operator> <name><name>ldb</name><operator>.</operator><name>lines</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldbIsBreakpoint</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>!=</operator> <name>LDB_BREAKPOINTS_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bp</name><index>[<expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ldbDelBreakpoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ldb</name><operator>.</operator><name>bpcount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>bp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>bp</name></name><operator>+</operator><name>j</name></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>bp</name></name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name> <modifier>*</modifier></type><name>ldbReplParseCommand</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argcp</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>protocol_error</name> <init>= <expr><literal type="string">"protocol error"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>copy</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>copy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>plen</name> <init>= <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>keep_reading</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>argcp</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argcp</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>argcp</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><operator>*</operator><name>argcp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>argc</name> <operator>&lt;</operator> <operator>*</operator><name>argcp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>keep_reading</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>keep_reading</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>slen</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>slen</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>copy</name><operator>)</operator> <operator>&gt;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>keep_reading</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>slen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argv</name></expr>;</return>
<label><name>protoerr</name>:</label>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>protocol_error</name></expr>;</expr_stmt>
<label><name>keep_reading</name>:</label>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbLogSourceLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>ldbGetSourceLine</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bp</name> <init>= <expr><call><name>ldbIsBreakpoint</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current</name> <init>= <expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name> <operator>==</operator> <name>lnum</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&amp;&amp;</operator> <name>bp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"-&gt;#"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"-&gt; "</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">" #"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>thisline</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s%-3d %s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><name>thisline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>around</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>ldb</name><operator>.</operator><name>lines</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>around</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>around</name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>context</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldbLogSourceLine</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDB_MAX_VALUES_DEPTH</name></cpp:macro> <cpp:value>(LUA_MINSTACK/2)</cpp:value></cpp:define>
<function><type><name>sds</name></type> <name>ldbCatStackValueRec</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name><operator>++</operator> <operator>==</operator> <name>LDB_MAX_VALUES_DEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"&lt;max recursion level reached! Nested table?&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<switch>switch<condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LUA_TSTRING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>strl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>strl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>strp</name></expr></argument>,<argument><expr><name>strl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><ternary><condition><expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%g"</literal></expr></argument>,<argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LUA_TNIL</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"nil"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LUA_TTABLE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>expected_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_array</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>repr1</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>repr2</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_array</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TNUMBER</name> <operator>||</operator>
<call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>expected_index</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_array</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>repr1</name> <operator>=</operator> <call><name>ldbCatStackValueRec</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repr1</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>,<argument><expr><literal type="string">"; "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><literal type="string">"["</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>ldbCatStackValueRec</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><literal type="string">"]="</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>ldbCatStackValueRec</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><literal type="string">"; "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expected_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"{"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><ternary><condition><expr><name>is_array</name></expr> ?</condition><then> <expr><name>repr1</name></expr> </then><else>: <expr><name>repr2</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"}"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>LUA_TFUNCTION</name></expr>:</case>
<case>case <expr><name>LUA_TUSERDATA</name></expr>:</case>
<case>case <expr><name>LUA_TTHREAD</name></expr>:</case>
<case>case <expr><name>LUA_TLIGHTUSERDATA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lua_topointer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>typename</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TFUNCTION</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"function"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TUSERDATA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"userdata"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TTHREAD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"thread"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TLIGHTUSERDATA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"light-userdata"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\"%s@%p\""</literal></expr></argument>,<argument><expr><name>typename</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\"&lt;unknown-lua-type&gt;\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>ldbCatStackValue</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ldbCatStackValueRec</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbLogStackValue</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldbCatStackValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLogWithMaxLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Int</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Bulk</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Status</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_MultiBulk</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Set</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Map</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Null</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Bool</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Double</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>reply</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">':'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Int</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'$'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Bulk</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Status</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Status</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_MultiBulk</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'~'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Set</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Map</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'_'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Null</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'#'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Bool</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">','</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Double</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Int</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Bulk</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>bulklen</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>bulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bulklen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"NULL"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>bulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><name>bulklen</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Status</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_MultiBulk</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mbulklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>mbulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mbulklen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"NULL"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"["</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mbulklen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>mbulklen</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"]"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Set</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mbulklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>mbulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"~("</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mbulklen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>mbulklen</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">")"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Map</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mbulklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>mbulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"{"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mbulklen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">" =&gt; "</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>mbulklen</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"}"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Null</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"(null)"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Bool</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"#true"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"#false"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Double</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"(double) "</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbLogRedisReply</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>log</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;reply&gt; "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldbRedisProtocolToHuman</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLogWithMaxLen</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbPrint</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>lua_getlocal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLogStackValue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>,<argument><expr><literal type="string">"ARGV"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>,<argument><expr><literal type="string">"KEYS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLogStackValue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No such variable."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbPrintAll</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>lua_getlocal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><literal type="string">"(*temporary)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>prefix</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; %s = "</literal></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldbLogStackValue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vars</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vars</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No local variables in the current context."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbBreak</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No breakpoints set. Use 'b &lt;line&gt;' to add one."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%i breakpoints set:"</literal></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ldb</name><operator>.</operator><name>bpcount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldbLogSourceLine</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>bp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string2l</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"Invalid argument:'%s'"</literal></expr></argument>,<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"All breakpoints removed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>line</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>==</operator> <name>LDB_BREAKPOINTS_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Too many breakpoints set."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldbAddBreakpoint</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbList</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Wrong line number."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldbDelBreakpoint</name><argument_list>(<argument><expr><operator>-</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Breakpoint removed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No breakpoint in the specified line."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbEval</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>code</name> <init>= <expr><call><name>sdsjoinsds</name><argument_list>(<argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>expr</name> <init>= <expr><call><name>sdscatsds</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"return "</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>expr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@ldb_eval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>code</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@ldb_eval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;error&gt; %s"</literal></expr></argument>,<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;error&gt; %s"</literal></expr></argument>,<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldbLogStackValue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"&lt;retval&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbRedis</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLogRedisReply</name><argument_list>(<argument><expr><literal type="string">"max lua stack reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"redis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbTrace</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>level</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"Snl"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>ar</name><operator>.</operator><name>short_src</name></name></expr></argument>,<argument><expr><literal type="string">"user_script"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s:"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>level</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"In"</literal></expr> </then><else>: <expr><literal type="string">"From"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ar</name><operator>.</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>ar</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"top level"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLogSourceLine</name><argument_list>(<argument><expr><name><name>ar</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;error&gt; Can't retrieve Lua stack."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ldbMaxlen</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newval</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen_hint_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newval</name> <operator>&lt;=</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newval</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; replies are truncated at %d bytes."</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ldb</name><operator>.</operator><name>maxlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; replies are unlimited."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ldbRepl</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><operator>(</operator><name>argv</name> <operator>=</operator> <call><name>ldbReplParseCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name> <init>= <expr><call><name>connRead</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>conn</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"max client buffer reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Redis Lua debugger help:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[h]elp Show this help."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[s]tep Run current line and stop again."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[n]ext Alias for step."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[c]ontinue Run till next breakpoint."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[l]ist List source code around current line."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[l]ist [line] List source code around [line]."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" line = 0 means: current position."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[l]ist [line] [ctx] In this form [ctx] specifies how many lines"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" to show before/after [line]."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[w]hole List all source code. Alias for 'list 1 1000000'."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[p]rint Show all the local variables."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[p]rint &lt;var&gt; Show the value of the specified variable."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" Can also show global vars KEYS and ARGV."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[b]reak Show all breakpoints."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[b]reak &lt;line&gt; Add a breakpoint to the specified line."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[b]reak -&lt;line&gt; Remove breakpoint from the specified line."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[b]reak 0 Remove all breakpoints."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[t]race Show a backtrace."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[e]val &lt;code&gt; Execute some Lua code (in a different callframe)."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[r]edis &lt;cmd&gt; Execute a Redis command."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[m]axlen [len] Trim logged Redis replies and Lua var dumps to len."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" Specifying zero as &lt;len&gt; means unlimited."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[a]bort Stop the execution of the script. In sync"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" mode dataset changes will be retained."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Debugger functions you can call from Lua scripts:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"redis.debug() Produce logs in the debugger console."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"redis.breakpoint() Stop execution like if there was a breakpoint in the"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" next line of code."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"step"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"next"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"continue"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"trace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbTrace</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"maxlen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbMaxlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"break"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbBreak</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"eval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbEval</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"abort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"script aborted for user request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"redis"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbRedis</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"print"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldbPrint</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldbPrintAll</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>around</name> <init>= <expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ctx</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>around</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldbList</name><argument_list>(<argument><expr><name>around</name></expr></argument>,<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"whole"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ldbList</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;error&gt; Unknown Redis Lua debugger command or "</literal>
<literal type="string">"wrong number of arguments."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>luaLdbLineHook</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>scriptRunCtx</name><modifier>*</modifier></type> <name>rctx</name> <init>= <expr><call><name>luaGetFromRegistry</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REGISTRY_RUN_CTX_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"Sl"</literal></expr></argument>,<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>currentline</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bp</name> <init>= <expr><call><name>ldbIsBreakpoint</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ldb</name><operator>.</operator><name>luabp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name></name></expr></argument>,<argument><expr><literal type="string">"user_script"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>LUA_HOOKCOUNT</name> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>elapsed</name> <init>= <expr><call><name>elapsedMs</name><argument_list>(<argument><expr><name><name>rctx</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>timelimit</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>busy_reply_threshold</name></name></expr> ?</condition><then>
<expr><name><name>server</name><operator>.</operator><name>busy_reply_threshold</name></name></expr> </then><else>: <expr><literal type="number">5000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;=</operator> <name>timelimit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>||</operator> <name>bp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reason</name> <init>= <expr><literal type="string">"step over"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>reason</name> <operator>=</operator> <ternary><condition><expr><name><name>ldb</name><operator>.</operator><name>luabp</name></name></expr> ?</condition><then> <expr><literal type="string">"redis.breakpoint() called"</literal></expr> </then><else>:
<expr><literal type="string">"break point"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>timeout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>reason</name> <operator>=</operator> <literal type="string">"timeout reached, infinite loop?"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>luabp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"* Stopped at %d, stop reason = %s"</literal></expr></argument>,
<argument><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLogSourceLine</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldbRepl</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"timeout during Lua debugging with client closing connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rctx</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rctx</name><operator>-&gt;</operator><name>snapshot_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
