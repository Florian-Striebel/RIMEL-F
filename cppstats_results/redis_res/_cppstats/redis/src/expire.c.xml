<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/expire.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>activeExpireCycleTryExpire</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><call><name>dictGetSignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name> <init>= <expr><call><name>createStringObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>deleteExpiredKeyAndPropagate</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_EXPIRE_CYCLE_FAST_DURATION</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>activeExpireCycle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>
<name>effort</name> <init>= <expr><name><name>server</name><operator>.</operator><name>active_expire_effort</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><type ref="prev"/><name>config_keys_per_loop</name> <init>= <expr><name>ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP</name> <operator>+</operator>
<name>ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP</name><operator>/</operator><literal type="number">4</literal><operator>*</operator><name>effort</name></expr></init></decl>,
<decl><type ref="prev"/><name>config_cycle_fast_duration</name> <init>= <expr><name>ACTIVE_EXPIRE_CYCLE_FAST_DURATION</name> <operator>+</operator>
<name>ACTIVE_EXPIRE_CYCLE_FAST_DURATION</name><operator>/</operator><literal type="number">4</literal><operator>*</operator><name>effort</name></expr></init></decl>,
<decl><type ref="prev"/><name>config_cycle_slow_time_perc</name> <init>= <expr><name>ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC</name> <operator>+</operator>
<literal type="number">2</literal><operator>*</operator><name>effort</name></expr></init></decl>,
<decl><type ref="prev"/><name>config_cycle_acceptable_stale</name> <init>= <expr><name>ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE</name><operator>-</operator>
<name>effort</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>current_db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timelimit_exit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>last_fast_cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>iteration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbs_per_call</name> <init>= <expr><name>CRON_DBS_PER_CALL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start</name> <init>= <expr><call><name>ustime</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>timelimit</name></decl>, <decl><type ref="prev"/><name>elapsed</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>checkClientPauseTimeoutAndReturnIfPaused</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ACTIVE_EXPIRE_CYCLE_FAST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timelimit_exit</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>stat_expired_stale_perc</name></name> <operator>&lt;</operator> <name>config_cycle_acceptable_stale</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>last_fast_cycle</name> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>config_cycle_fast_duration</name><operator>*</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_fast_cycle</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dbs_per_call</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name> <operator>||</operator> <name>timelimit_exit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dbs_per_call</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>timelimit</name> <operator>=</operator> <name>config_cycle_slow_time_perc</name><operator>*</operator><literal type="number">1000000</literal><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name><operator>/</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>timelimit_exit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>timelimit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>timelimit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ACTIVE_EXPIRE_CYCLE_FAST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timelimit</name> <operator>=</operator> <name>config_cycle_fast_duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>total_sampled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>total_expired</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>numops</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>core_propagates</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>propagate_no_multi</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dbs_per_call</name> <operator>&amp;&amp;</operator> <name>timelimit_exit</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>expired</name></decl>, <decl><type ref="prev"/><name>sampled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name></name><operator>+</operator><operator>(</operator><name>current_db</name> <operator>%</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>current_db</name><operator>++</operator></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>slots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>ttl_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttl_samples</name></decl>;</decl_stmt>
<expr_stmt><expr><name>iteration</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>avg_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slots</name> <operator>=</operator> <call><name>dictSlots</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slots</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>num</name><operator>*</operator><literal type="number">100</literal><operator>/</operator><name>slots</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>expired</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sampled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl_sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl_samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>config_keys_per_loop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name>config_keys_per_loop</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>max_buckets</name> <init>= <expr><name>num</name><operator>*</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>checked_buckets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>sampled</name> <operator>&lt;</operator> <name>num</name> <operator>&amp;&amp;</operator> <name>checked_buckets</name> <operator>&lt;</operator> <name>max_buckets</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>table</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>table</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>table</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>idx</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>expires_cursor</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>&amp;=</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>table</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>expires</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>table</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ttl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>checked_buckets</name><operator>++</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>de</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>de</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <call><name>dictGetSignedIntegerVal</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>-</operator><name>now</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>activeExpireCycleTryExpire</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>expired</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ttl_sum</name> <operator>+=</operator> <name>ttl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl_samples</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sampled</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>expires_cursor</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>total_expired</name> <operator>+=</operator> <name>expired</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_sampled</name> <operator>+=</operator> <name>sampled</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl_samples</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>avg_ttl</name> <init>= <expr><name>ttl_sum</name><operator>/</operator><name>ttl_samples</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>avg_ttl</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>avg_ttl</name></name> <operator>=</operator> <name>avg_ttl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>avg_ttl</name></name> <operator>=</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>avg_ttl</name></name><operator>/</operator><literal type="number">50</literal><operator>)</operator><operator>*</operator><literal type="number">49</literal> <operator>+</operator> <operator>(</operator><name>avg_ttl</name><operator>/</operator><literal type="number">50</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>iteration</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name>timelimit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timelimit_exit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expired_time_cap_reached_count</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>sampled</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>expired</name><operator>*</operator><literal type="number">100</literal><operator>/</operator><name>sampled</name><operator>)</operator> <operator>&gt;</operator> <name>config_cycle_acceptable_stale</name></expr>)</condition>;</do>
</block_content>}</block></for>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>core_propagates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>propagatePendingCommands</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>core_propagates</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>propagate_no_multi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expire_cycle_time_used</name></name> <operator>+=</operator> <name>elapsed</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"expire-cycle"</literal></expr></argument>,<argument><expr><name>elapsed</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>current_perc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>total_sampled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_perc</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>total_expired</name><operator>/</operator><name>total_sampled</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>current_perc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expired_stale_perc</name></name> <operator>=</operator> <operator>(</operator><name>current_perc</name><operator>*</operator><literal type="number">0.05</literal><operator>)</operator><operator>+</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>stat_expired_stale_perc</name></name><operator>*</operator><literal type="number">0.95</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>slaveKeysWithExpire</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>expireSlaveKeys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slaveKeysWithExpire</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>dictSize</name><argument_list>(<argument><expr><name>slaveKeysWithExpire</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cycles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>noexpire</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>start</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictGetRandomKey</name><argument_list>(<argument><expr><name>slaveKeysWithExpire</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>keyname</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dbids</name> <init>= <expr><call><name>dictGetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>new_dbids</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>dbids</name> <operator>&amp;&amp;</operator> <name>dbid</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dbids</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name></name><operator>+</operator><name>dbid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>expire</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expired</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>&amp;&amp;</operator>
<call><name>activeExpireCycleTryExpire</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name></name><operator>+</operator><name>dbid</name></expr></argument>,<argument><expr><name>expire</name></expr></argument>,<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>expired</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>expired</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>noexpire</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_dbids</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>dbid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dbid</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dbids</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>new_dbids</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictSetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>,<argument><expr><name>new_dbids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name>slaveKeysWithExpire</name></expr></argument>,<argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>cycles</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>noexpire</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cycles</name> <operator>%</operator> <literal type="number">64</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>slaveKeysWithExpire</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rememberSlaveKeyWithExpire</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slaveKeysWithExpire</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>dictType</name></type> <name>dt</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>slaveKeysWithExpire</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictAddOrFind</name><argument_list>(<argument><expr><name>slaveKeysWithExpire</name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dbids</name> <init>= <expr><call><name>dictGetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dbids</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>,<argument><expr><name>dbids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>getSlaveKeyWithExpireCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slaveKeysWithExpire</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name>slaveKeysWithExpire</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>flushSlaveKeysWithExpireList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slaveKeysWithExpire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>slaveKeysWithExpire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slaveKeysWithExpire</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>checkAlreadyExpired</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>when</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>when</name> <operator>&lt;=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>masterhost</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPIRE_NX</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPIRE_XX</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPIRE_GT</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPIRE_LT</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>parseExtendedExpireArgumentsOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>,<argument><expr><literal type="string">"nx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>EXPIRE_NX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>,<argument><expr><literal type="string">"xx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>EXPIRE_XX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>,<argument><expr><literal type="string">"gt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>EXPIRE_GT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>,<argument><expr><literal type="string">"lt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>EXPIRE_LT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Unsupported option %s"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nx</name> <operator>&amp;&amp;</operator> <name>xx</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nx</name> <operator>&amp;&amp;</operator> <name>gt</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nx</name> <operator>&amp;&amp;</operator> <name>lt</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"NX and XX, GT or LT options at the same time are not compatible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gt</name> <operator>&amp;&amp;</operator> <name>lt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GT and LT options at the same time are not compatible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>expireGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>basetime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>param</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>when</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>current_expire</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parseExtendedExpireArgumentsOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>when</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>UNIT_SECONDS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>when</name> <operator>&gt;</operator> <name>LLONG_MAX</name> <operator>/</operator> <literal type="number">1000</literal> <operator>||</operator> <name>when</name> <operator>&lt;</operator> <name>LLONG_MIN</name> <operator>/</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorExpireTime</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>when</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>when</name> <operator>&gt;</operator> <name>LLONG_MAX</name> <operator>-</operator> <name>basetime</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorExpireTime</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>when</name> <operator>+=</operator> <name>basetime</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_expire</name> <operator>=</operator> <call><name>getExpire</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>EXPIRE_NX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_expire</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>EXPIRE_XX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_expire</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>EXPIRE_GT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>when</name> <operator>&lt;=</operator> <name>current_expire</name> <operator>||</operator> <name>current_expire</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>EXPIRE_LT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_expire</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>when</name> <operator>&gt;=</operator> <name>current_expire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>checkAlreadyExpired</name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name></expr> ?</condition><then> <expr><call><name>dbAsyncDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>dbSyncDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>unlink</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>del</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteClientCommandVector</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>aux</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"del"</literal></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>when_obj</name> <init>= <expr><call><name>createStringObjectFromLongLong</name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rewriteClientCommandVector</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>pexpireat</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>when_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>when_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"expire"</literal></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>expireCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>expireGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>UNIT_SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>expireatCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>expireGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>UNIT_SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>pexpireCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>expireGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>UNIT_MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>pexpireatCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>expireGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>UNIT_MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ttlGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_abs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>expire</name></decl>, <decl><type ref="prev"/><name>ttl</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>LOOKUP_NOTOUCH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>expire</name> <operator>=</operator> <call><name>getExpire</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <ternary><condition><expr><name>output_abs</name></expr> ?</condition><then> <expr><name>expire</name></expr> </then><else>: <expr><name>expire</name><operator>-</operator><call><name>mstime</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name>output_ms</name></expr> ?</condition><then> <expr><name>ttl</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>ttl</name><operator>+</operator><literal type="number">500</literal><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ttlCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ttlGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>pttlCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ttlGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>expiretimeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ttlGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>pexpiretimeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ttlGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>persistCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>removeExpire</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"persist"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>touchCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>touched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>lookupKeyRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>touched</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>touched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
