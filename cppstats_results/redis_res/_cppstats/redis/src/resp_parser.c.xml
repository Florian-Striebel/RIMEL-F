<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/resp_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resp_parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseBulk</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>bulklen</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>bulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bulklen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>null_bulk_string_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>+=</operator> <name>bulklen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>bulk_string_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>bulklen</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseSimpleString</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>simple_str_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseError</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>error_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseLong</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>long_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseAttributes</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>attribute_callback</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseVerbatimString</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>bulklen</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>bulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>+=</operator> <name>bulklen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>verbatim_string_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>format</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bulklen</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseBigNumber</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>big_number_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseNull</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>null_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseDouble</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LONG_DOUBLE_CHARS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>MAX_LONG_DOUBLE_CHARS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>double_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseBool</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>bool_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name><name>proto</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseArray</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>null_array_callback</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>array_callback</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseSet</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>set_callback</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseMap</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>proto</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>proto</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>map_callback</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>parseReply</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>curr_location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'$'</literal></expr>:</case> <return>return <expr><call><name>parseBulk</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <return>return <expr><call><name>parseSimpleString</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <return>return <expr><call><name>parseError</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">':'</literal></expr>:</case> <return>return <expr><call><name>parseLong</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <return>return <expr><call><name>parseArray</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'~'</literal></expr>:</case> <return>return <expr><call><name>parseSet</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'%'</literal></expr>:</case> <return>return <expr><call><name>parseMap</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'#'</literal></expr>:</case> <return>return <expr><call><name>parseBool</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">','</literal></expr>:</case> <return>return <expr><call><name>parseDouble</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'_'</literal></expr>:</case> <return>return <expr><call><name>parseNull</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'('</literal></expr>:</case> <return>return <expr><call><name>parseBigNumber</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <return>return <expr><call><name>parseVerbatimString</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'|'</literal></expr>:</case> <return>return <expr><call><name>parseAttributes</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default> <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></switch>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>
</unit>
