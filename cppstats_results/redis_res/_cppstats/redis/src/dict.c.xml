<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/dict.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redisassert.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dict_can_resize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>dict_force_resize_ratio</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_dictExpandIfNeeded</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>signed</name> <name>char</name></type> <name>_dictNextExp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>_dictKeyIndex</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>existing</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_dictInit</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>dict_hash_function_seed</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dictSetHashFunctionSeed</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dict_hash_function_seed</name></expr></argument>,<argument><expr><name>seed</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dict_hash_function_seed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>dictGetHashFunctionSeed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>dict_hash_function_seed</name></expr>;</return>
</block_content>}</block></function>
<function_decl><type><name>uint64_t</name></type> <name>siphash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>siphash_nocase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>uint64_t</name></type> <name>dictGenHashFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>siphash</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>dict_hash_function_seed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>dictGenCaseHashFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>siphash_nocase</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>dict_hash_function_seed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_dictReset</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>htidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><name>htidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>dict</name> <modifier>*</modifier></type><name>dictCreate</name><parameter_list>(<parameter><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_dictInit</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>_dictInit</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_dictReset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dictReset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pauserehash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dictResize</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>minimal</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict_can_resize</name> <operator>||</operator> <call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>minimal</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>minimal</name> <operator>&lt;</operator> <name>DICT_HT_INITIAL_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minimal</name> <operator>=</operator> <name>DICT_HT_INITIAL_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>dictExpand</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>minimal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>_dictExpand</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>malloc_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>malloc_failed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>malloc_failed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_ht_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>new_ht_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>new_ht_size_exp</name> <init>= <expr><call><name>_dictNextExp</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><literal type="number">1ul</literal><operator>&lt;&lt;</operator><name>new_ht_size_exp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>&lt;</operator> <name>size</name> <operator>||</operator> <name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>newsize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_ht_size_exp</name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>malloc_failed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_ht_table</name> <operator>=</operator> <call><name>ztrycalloc</name><argument_list>(<argument><expr><name>newsize</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>malloc_failed</name> <operator>=</operator> <name>new_ht_table</name> <operator>==</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>malloc_failed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_ht_table</name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><name>newsize</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>new_ht_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>new_ht_size_exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>new_ht_used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>new_ht_table</name></expr>;</expr_stmt>
<return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>new_ht_size_exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>new_ht_used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>new_ht_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dictExpand</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_dictExpand</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dictTryExpand</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>malloc_failed</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_dictExpand</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>malloc_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>malloc_failed</name></expr>?</condition><then> <expr><name>DICT_ERR</name></expr> </then><else>: <expr><name>DICT_OK</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dictRehash</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>empty_visits</name> <init>= <expr><name>n</name><operator>*</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>n</name><operator>--</operator> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextde</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>empty_visits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name></expr>]</index></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nextde</name> <operator>=</operator> <name><name>de</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dictHashKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>de</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name>nextde</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dictReset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>timeInMilliseconds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dictRehashMilliseconds</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pauserehash</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start</name> <init>= <expr><call><name>timeInMilliseconds</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rehashes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>dictRehash</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rehashes</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>timeInMilliseconds</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name> <operator>&gt;</operator> <name>ms</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>rehashes</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_dictRehashStep</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pauserehash</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRehash</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dictAdd</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>dictAddRaw</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictAddRaw</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>existing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>htidx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_dictRehashStep</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>index</name> <operator>=</operator> <call><name>_dictKeyIndex</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>dictHashKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>existing</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>htidx</name> <operator>=</operator> <ternary><condition><expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>metasize</name> <init>= <expr><call><name>dictMetadataSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>metasize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>metasize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>dictMetadata</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>metasize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><name>htidx</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dictReplace</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>existing</name></decl>, <decl><type ref="prev"/><name>auxentry</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>dictAddRaw</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>auxentry</name> <operator>=</operator> <operator>*</operator><name>existing</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>existing</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictFreeVal</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auxentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictAddOrFind</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>existing</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>dictAddRaw</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name>entry</name></expr> </then><else>: <expr><name>existing</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>dictGenericDelete</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nofree</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prevHe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>table</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_dictRehashStep</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dictHashKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>table</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>table</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>table</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>table</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>table</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevHe</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name><operator>==</operator><name><name>he</name><operator>-&gt;</operator><name>key</name></name> <operator>||</operator> <call><name>dictCompareKeys</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prevHe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prevHe</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>table</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nofree</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictFreeUnlinkedEntry</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><name>table</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>he</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prevHe</name> <operator>=</operator> <name>he</name></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dictDelete</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>dictGenericDelete</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DICT_OK</name></expr> </then><else>: <expr><name>DICT_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictUnlink</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictGenericDelete</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dictFreeUnlinkedEntry</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>he</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dictFreeKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictFreeVal</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>_dictClear</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>htidx</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>DICTHT_SIZE</name><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><name>htidx</name></expr>]</index></name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextHe</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">65535</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>he</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nextHe</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictFreeKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictFreeVal</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><name>htidx</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name>nextHe</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dictReset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>htidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dictRelease</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_dictClear</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dictClear</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictFind</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>table</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_dictRehashStep</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dictHashKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>table</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>table</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>table</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>table</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>table</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name><operator>==</operator><name><name>he</name><operator>-&gt;</operator><name>key</name></name> <operator>||</operator> <call><name>dictCompareKeys</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>he</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>dictFetchValue</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>he</name></expr> ?</condition><then> <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>dictFingerprint</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>integers</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>integers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>integers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>integers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>integers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>integers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>integers</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hash</name> <operator>+=</operator> <name><name>integers</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><operator>~</operator><name>hash</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>hash</name> <operator>^</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>hash</name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>hash</name> <operator>^</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>hash</name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>hash</name> <operator>^</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>hash</name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>dictIterator</name> <modifier>*</modifier></type><name>dictGetIterator</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>safe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>dictIterator</name> <modifier>*</modifier></type><name>dictGetSafeIterator</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>safe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictNext</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>table</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>safe</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictPauseRehashing</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>fingerprint</name></name> <operator>=</operator> <call><name>dictFingerprint</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator> <call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>table</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>table</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>table</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>table</name></name></expr>]</index><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dictReleaseIterator</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>table</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>safe</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictResumeRehashing</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>fingerprint</name></name> <operator>==</operator> <call><name>dictFingerprint</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictGetRandomKey</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>orighe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listlen</name></decl>, <decl><type ref="prev"/><name>listele</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_dictRehashStep</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>s0</name> <init>= <expr><call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name> <operator>+</operator> <operator>(</operator><call><name>randomULong</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><call><name>dictSlots</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>h</name> <operator>&gt;=</operator> <name>s0</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>h</name> <operator>-</operator> <name>s0</name></expr>]</index></name></expr> </then><else>: <expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>h</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>he</name> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>m</name> <init>= <expr><call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>randomULong</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>he</name> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>listlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>orighe</name> <operator>=</operator> <name>he</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>listlen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>listele</name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call> <operator>%</operator> <name>listlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name>orighe</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>listele</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>he</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>unsigned</name> <name>int</name></type> <name>dictGetSomeKeys</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>des</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxsizemask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxsteps</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>maxsteps</name> <operator>=</operator> <name>count</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_dictRehashStep</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>tables</name> <operator>=</operator> <ternary><condition><expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>maxsizemask</name> <operator>=</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tables</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>maxsizemask</name> <operator>&lt;</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxsizemask</name> <operator>=</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name> <init>= <expr><call><name>randomULong</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>maxsizemask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>emptylen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>stored</name> <operator>&lt;</operator> <name>count</name> <operator>&amp;&amp;</operator> <name>maxsteps</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tables</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tables</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>he</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>emptylen</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>emptylen</name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>emptylen</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>randomULong</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>maxsizemask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emptylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>emptylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>des</name> <operator>=</operator> <name>he</name></expr>;</expr_stmt>
<expr_stmt><expr><name>des</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stored</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stored</name> <operator>==</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>stored</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>maxsizemask</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>stored</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETFAIR_NUM_ENTRIES</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<function><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictGetFairRandomKey</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name><name>entries</name><index>[<expr><name>GETFAIR_NUM_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><call><name>dictGetSomeKeys</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>entries</name></expr></argument>,<argument><expr><name>GETFAIR_NUM_ENTRIES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>dictGetRandomKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>count</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>rev</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>s</name> <init>= <expr><name>CHAR_BIT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name> <init>= <expr><operator>~</operator><literal type="number">0UL</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>^=</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>unsigned</name> <name>long</name></type> <name>dictScan</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>v</name></decl></parameter>,
<parameter><decl><type><name>dictScanFunction</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>,
<parameter><decl><type><name>dictScanBucketFunction</name><modifier>*</modifier></type> <name>bucketfn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>htidx0</name></decl>, <decl><type ref="prev"/><name>htidx1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>m0</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dictPauseRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>htidx0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m0</name> <operator>=</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bucketfn</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bucketfn</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx0</name></expr>]</index><index>[<expr><name>v</name> <operator>&amp;</operator> <name>m0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx0</name></expr>]</index><index>[<expr><name>v</name> <operator>&amp;</operator> <name>m0</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>de</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>~</operator><name>m0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rev</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rev</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>htidx0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>htidx1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx0</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>htidx0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>htidx1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>m0</name> <operator>=</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m1</name> <operator>=</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bucketfn</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bucketfn</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx0</name></expr>]</index><index>[<expr><name>v</name> <operator>&amp;</operator> <name>m0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx0</name></expr>]</index><index>[<expr><name>v</name> <operator>&amp;</operator> <name>m0</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>de</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bucketfn</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bucketfn</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx1</name></expr>]</index><index>[<expr><name>v</name> <operator>&amp;</operator> <name>m1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx1</name></expr>]</index><index>[<expr><name>v</name> <operator>&amp;</operator> <name>m1</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>de</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>~</operator><name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rev</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rev</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>m0</name> <operator>^</operator> <name>m1</name><operator>)</operator></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dictResumeRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dictTypeExpandAllowed</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>expandAllowed</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>d</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>expandAllowed</name></name><argument_list>(
<argument><expr><call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><call><name>_dictNextExp</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_dictExpandIfNeeded</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>DICT_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>dictExpand</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DICT_HT_INITIAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dict_can_resize</name> <operator>||</operator>
<name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator> <call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>dict_force_resize_ratio</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>dictTypeExpandAllowed</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>dictExpand</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>signed</name> <name>char</name></type> <name>_dictNextExp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>e</name> <init>= <expr><name>DICT_HT_INITIAL_EXP</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>LONG_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>e</name><operator>)</operator> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type> <name>_dictKeyIndex</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>existing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>existing</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_dictExpandIfNeeded</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>table</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>table</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>table</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>hash</name> <operator>&amp;</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>table</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>table</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name><operator>==</operator><name><name>he</name><operator>-&gt;</operator><name>key</name></name> <operator>||</operator> <call><name>dictCompareKeys</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>existing</name> <operator>=</operator> <name>he</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dictEmpty</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_dictClear</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dictClear</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>rehashidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pauserehash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dictEnableResize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>dict_can_resize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dictDisableResize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>dict_can_resize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>dictGetHash</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictHashKey</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>dictFindEntryRefByPtrAndHash</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>oldptr</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>heref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>table</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>table</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>table</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>table</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>hash</name> <operator>&amp;</operator> <call><name>DICTHT_SIZE_MASK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>table</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>heref</name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>table</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <operator>*</operator><name>heref</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oldptr</name><operator>==</operator><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>heref</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>heref</name> <operator>=</operator> <operator>&amp;</operator><name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <operator>*</operator><name>heref</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_STATS_VECTLEN</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<function><type><name>size_t</name></type> <name>_dictGetStatsHt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>htidx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>slots</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>chainlen</name></decl>, <decl><type ref="prev"/><name>maxchainlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>totchainlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>clvector</name><index>[<expr><name>DICT_STATS_VECTLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><name>htidx</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>bufsize</name></expr></argument>,
<argument><expr><literal type="string">"No stats available for empty dictionaries\n"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DICT_STATS_VECTLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>clvector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>clvector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slots</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>chainlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name>htidx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chainlen</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>clvector</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>chainlen</name> <operator>&lt;</operator> <name>DICT_STATS_VECTLEN</name><operator>)</operator></expr> ?</condition><then> <expr><name>chainlen</name></expr> </then><else>: <expr><operator>(</operator><name>DICT_STATS_VECTLEN</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chainlen</name> <operator>&gt;</operator> <name>maxchainlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxchainlen</name> <operator>=</operator> <name>chainlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>totchainlen</name> <operator>+=</operator> <name>chainlen</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>l</name></expr></argument>,<argument><expr><name>bufsize</name><operator>-</operator><name>l</name></expr></argument>,
<argument><expr><literal type="string">"Hash table %d stats (%s):\n"</literal>
<literal type="string">" table size: %lu\n"</literal>
<literal type="string">" number of elements: %lu\n"</literal>
<literal type="string">" different slots: %lu\n"</literal>
<literal type="string">" max chain length: %lu\n"</literal>
<literal type="string">" avg chain length (counted): %.02f\n"</literal>
<literal type="string">" avg chain length (computed): %.02f\n"</literal>
<literal type="string">" Chain length distribution:\n"</literal></expr></argument>,
<argument><expr><name>htidx</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>htidx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"main hash table"</literal></expr> </then><else>: <expr><literal type="string">"rehashing target"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><name>htidx</name></expr>]</index></name></expr></argument>, <argument><expr><name>slots</name></expr></argument>, <argument><expr><name>maxchainlen</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>totchainlen</name><operator>/</operator><name>slots</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>ht_used</name><index>[<expr><name>htidx</name></expr>]</index></name><operator>/</operator><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DICT_STATS_VECTLEN</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>clvector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>bufsize</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>l</name></expr></argument>,<argument><expr><name>bufsize</name><operator>-</operator><name>l</name></expr></argument>,
<argument><expr><literal type="string">" %ld: %ld (%.02f%%)\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>clvector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>clvector</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><call><name>DICTHT_SIZE</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_size_exp</name><index>[<expr><name>htidx</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>bufsize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufsize</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dictGetStats</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig_buf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>orig_bufsize</name> <init>= <expr><name>bufsize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>_dictGetStatsHt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>bufsize</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufsize</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bufsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_dictGetStatsHt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>bufsize</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>orig_bufsize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>orig_buf</name><index>[<expr><name>orig_bufsize</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDIS_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testhelp.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) V)</cpp:value></cpp:define>
<function><type><name>uint64_t</name></type> <name>hashCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>compareCallback</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l1</name></decl>,<decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>freeCallback</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>stringFromLongLong</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>dictType</name></type> <name>BenchmarkDictType</name> <init>= <expr><block>{
<expr><name>hashCallback</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>compareCallback</name></expr>,
<expr><name>freeCallback</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>start_benchmark</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>start = timeInMilliseconds()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>end_benchmark</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { elapsed = timeInMilliseconds()-start; printf(msg ": %ld items in %lld ms\n", count, elapsed); } while(0)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>dictTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>elapsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BenchmarkDictType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accurate</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDIS_TEST_ACCURATE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>accurate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">5000000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>start_benchmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,<argument><expr><call><name>stringFromLongLong</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_benchmark</name><argument_list>(<argument><expr><literal type="string">"Inserting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>dictSize</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictRehashMilliseconds</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>start_benchmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>stringFromLongLong</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_benchmark</name><argument_list>(<argument><expr><literal type="string">"Linear access of existing elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_benchmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>stringFromLongLong</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_benchmark</name><argument_list>(<argument><expr><literal type="string">"Linear access of existing elements (2nd round)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_benchmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>stringFromLongLong</name><argument_list>(<argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_benchmark</name><argument_list>(<argument><expr><literal type="string">"Random access of existing elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_benchmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictGetRandomKey</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_benchmark</name><argument_list>(<argument><expr><literal type="string">"Accessing random keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_benchmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>stringFromLongLong</name><argument_list>(<argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>de</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_benchmark</name><argument_list>(<argument><expr><literal type="string">"Accessing missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_benchmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>stringFromLongLong</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>dictDelete</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_benchmark</name><argument_list>(<argument><expr><literal type="string">"Removing and adding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
