<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/latency.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATENCY_TS_LEN</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>
<struct>struct <name>latencySample</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>latency</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>latencyTimeSeries</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>latencySample</name></name></type> <name><name>samples</name><index>[<expr><name>LATENCY_TS_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>latencyStats</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>all_time_high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>avg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>period</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>void</name></type> <name>latencyMonitorInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>latencyAddSample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>latency</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>THPIsEnabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>THPDisable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>latencyStartMonitor</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (server.latency_monitor_threshold) { var = mstime(); } else { var = 0; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>latencyEndMonitor</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (server.latency_monitor_threshold) { var = mstime() - var; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>latencyAddSampleIfNeeded</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (server.latency_monitor_threshold &amp;&amp; (var) &gt;= server.latency_monitor_threshold) latencyAddSample((event),(var));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>latencyRemoveNestedEvent</name><parameter_list>(<parameter><type><name>event_var</name></type></parameter>,<parameter><type><name>nested_var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>event_var += nested_var;</cpp:value></cpp:define>
</unit>
