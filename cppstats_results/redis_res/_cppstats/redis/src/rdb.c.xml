<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/rdb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zipmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"endianconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rdbReportCorruptRDB</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rdbReportError(1, __LINE__,__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rdbReportReadError</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rdbReportError(0, __LINE__,__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isRestoreContext</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(server.current_client == NULL || server.current_client-&gt;id == CLIENT_ID_AOF) ? 0 : 1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>rdbFileBeingLoaded</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>rdbCheckMode</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>rdbCheckError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rdbCheckSetError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>rdbReportError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>corruption_error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>3<operator>,</operator> 4</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type> <name>rdbReportError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>corruption_error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Internal error in RDB reading offset %llu, function at rdb.c:%d -&gt; "</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name><operator>+</operator><name>len</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>len</name></expr></argument>,<argument><expr><name>reason</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isRestoreContext</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbCheckMode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbCheckError</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbFileBeingLoaded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>,<expr><name>rdbFileBeingLoaded</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redis_check_rdb_main</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>corruption_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s. Failure loading rdb format"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s. Failure loading rdb format from socket, assuming connection error, resuming operation."</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Terminating server after rdb file reading failure."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>rdbWriteRaw</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdb</name> <operator>&amp;&amp;</operator> <call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveType</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoadType</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>time_t</name></type> <name>rdbLoadTime</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>t32</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t32</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>t32</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveMillisecondTime</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>t64</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>t</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t64</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>rdbLoadMillisecondTime</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbver</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>t64</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t64</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LLONG_MAX</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbver</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>t64</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveLen</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nwritten</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>RDB_6BITLEN</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>RDB_14BITLEN</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>len</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RDB_32BITLEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len32</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len32</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RDB_64BITLEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>htonu64</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoadLenByRef</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>isencoded</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>isencoded</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>isencoded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xC0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_ENCVAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isencoded</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>isencoded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_6BITLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_14BITLEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x3F</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>RDB_32BITLEN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>RDB_64BITLEN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <call><name>ntohu64</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(
<argument><expr><literal type="string">"Unknown length encoding %d in rdbLoadLen()"</literal></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>rdbLoadLen</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>isencoded</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbLoadLenByRef</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>isencoded</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RDB_LENERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbEncodeInteger</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RDB_ENCVAL</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator><operator>|</operator><name>RDB_ENC_INT8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">15</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RDB_ENCVAL</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator><operator>|</operator><name>RDB_ENC_INT16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RDB_ENCVAL</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator><operator>|</operator><name>RDB_ENC_INT32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>rdbLoadIntegerObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enctype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plain</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_PLAIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sds</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_SDS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encode</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_ENC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>enc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>enctype</name> <operator>==</operator> <name>RDB_ENC_INT8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>enc</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enctype</name> <operator>==</operator> <name>RDB_ENC_INT16</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>enc</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enctype</name> <operator>==</operator> <name>RDB_ENC_INT32</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>enc</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>enc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>enc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB integer encoding type %d"</literal></expr></argument>,<argument><expr><name>enctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>plain</name> <operator>||</operator> <name>sds</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lenptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>plain</name></expr> ?</condition><then> <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>createStringObjectFromLongLongForValue</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbTryIntegerEncoding</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>string2ll</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rdbEncodeInteger</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveLzfBlob</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>compress_len</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>original_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <operator>(</operator><name>RDB_ENCVAL</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator><operator>|</operator><name>RDB_ENC_LZF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>writeerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>compress_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>writeerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>original_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>writeerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>compress_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>writeerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>nwritten</name></expr>;</return>
<label><name>writeerr</name>:</label>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveLzfStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>comprlen</name></decl>, <decl><type ref="prev"/><name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <name>len</name><operator>-</operator><literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>out</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>outlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>comprlen</name> <operator>=</operator> <call><name>lzf_compress</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comprlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwritten</name> <init>= <expr><call><name>rdbSaveLzfBlob</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>comprlen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>rdbLoadLzfStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plain</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_PLAIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sds</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_SDS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>clen</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>ztrymalloc</name><argument_list>(<argument><expr><name>clen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isRestoreContext</name><argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>LL_VERBOSE</name></expr></then><else>: <expr><name>LL_WARNING</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"rdbLoadLzfStringObject failed allocating %llu bytes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>plain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ztrymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sdstrynewlen</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isRestoreContext</name><argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>LL_VERBOSE</name></expr></then><else>: <expr><name>LL_WARNING</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"rdbLoadLzfStringObject failed allocating %llu bytes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lenptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>clen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lzf_decompress</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>clen</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Invalid LZF compressed string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plain</name> <operator>||</operator> <name>sds</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plain</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveRawString</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>enclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enclen</name> <operator>=</operator> <call><name>rdbTryIntegerEncoding</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>enclen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>enclen</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_compression</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rdbSaveLzfStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveLongLongAsStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enclen</name> <init>= <expr><call><name>rdbEncodeInteger</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>enclen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>enclen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>enclen</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>enclen</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>enclen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>enclen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rdbSaveLongLongAsStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>obj</name></expr></argument>,<argument><expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>rdbGenericLoadStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>encode</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_ENC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plain</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_PLAIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sds</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_SDS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isencoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>isencoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isencoded</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RDB_ENC_INT8</name></expr>:</case>
<case>case <expr><name>RDB_ENC_INT16</name></expr>:</case>
<case>case <expr><name>RDB_ENC_INT32</name></expr>:</case>
<return>return <expr><call><name>rdbLoadIntegerObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr><name>lenptr</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>RDB_ENC_LZF</name></expr>:</case>
<return>return <expr><call><name>rdbLoadLzfStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr><name>lenptr</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB string encoding type %llu"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>plain</name> <operator>||</operator> <name>sds</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><ternary><condition><expr><name>plain</name></expr> ?</condition><then> <expr><call><name>ztrymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sdstrynewlen</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isRestoreContext</name><argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>LL_VERBOSE</name></expr></then><else>: <expr><name>LL_WARNING</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"rdbGenericLoadStringObject failed allocating %llu bytes"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lenptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>plain</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><ternary><condition><expr><name>encode</name></expr> ?</condition><then> <expr><call><name>tryCreateStringObject</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>tryCreateRawStringObject</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isRestoreContext</name><argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>LL_VERBOSE</name></expr></then><else>: <expr><name>LL_WARNING</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"rdbGenericLoadStringObject failed allocating %llu bytes"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>rdbLoadStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_NONE</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>rdbLoadEncodedStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_ENC</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveDoubleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">253</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">254</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DBL_MANT_DIG</name> <operator>&gt;=</operator> <literal type="number">52</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>LLONG_MAX</name> <operator>==</operator> <literal type="number">0x7fffffffffffffffLL</literal><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>min</name> <init>= <expr><operator>-</operator><literal type="number">4503599627370495</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>max</name> <init>= <expr><literal type="number">4503599627370496</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>min</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>val</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"%.17g"</literal></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoadDoubleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">255</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>R_NegInf</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">254</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>R_PosInf</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">253</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>R_Nan</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lg"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveBinaryDoubleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoadBinaryDoubleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveBinaryFloatValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoadBinaryFloatValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveObjectType</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_STRING</name></expr>:</case>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_STRING</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBJ_LIST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>RDB_TYPE_LIST_QUICKLIST_2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown list encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<case>case <expr><name>OBJ_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INTSET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_SET_INTSET</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_SET</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<case>case <expr><name>OBJ_ZSET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_ZSET_LISTPACK</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_ZSET_2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown sorted set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<case>case <expr><name>OBJ_HASH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_HASH_LISTPACK</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_HASH</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown hash encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_STREAM_LISTPACKS</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>OBJ_MODULE</name></expr>:</case>
<return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_MODULE_2</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoadObjectType</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>rdbLoadType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rdbIsObjectType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveStreamPEL</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>pel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nacks</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name>pel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>pel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nacks</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>streamNACK</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>nack</name><operator>-&gt;</operator><name>delivery_time</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>nack</name><operator>-&gt;</operator><name>delivery_count</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>rdbSaveStreamConsumers</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>streamConsumer</name> <modifier>*</modifier></type><name>consumer</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>consumer</name><operator>-&gt;</operator><name>seen_time</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveStreamPEL</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>consumer</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STRING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>ql</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ql</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>container</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>quicklistNodeIsCompressed</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>compress_len</name> <init>= <expr><call><name>quicklistGetLzf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLzfBlob</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>compress_len</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown list encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>ele</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>ele</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INTSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>intsetBlobLen</name><argument_list>(<argument><expr><operator>(</operator><name>intset</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>lpBytes</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name> <init>= <expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>zsl</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>zn</name> <init>= <expr><name><name>zsl</name><operator>-&gt;</operator><name>tail</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>zn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>zn</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>zn</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveBinaryDoubleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>zn</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zn</name> <operator>=</operator> <name><name>zn</name><operator>-&gt;</operator><name>backward</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown sorted set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>lpBytes</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><operator>(</operator><name>dict</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>field</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>value</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>field</name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown hash encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rax</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lp_bytes</name> <init>= <expr><call><name>lpBytes</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>lp</name></expr></argument>,<argument><expr><name>lp_bytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>ms</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_cgroups</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr> ?</condition><then> <expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>num_cgroups</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_cgroups</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cg</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>ms</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveStreamPEL</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveStreamConsumers</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>cg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_MODULE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>rdb_save</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_MODULE_OPCODE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>io</name><operator>.</operator><name>error</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>io</name><operator>.</operator><name>bytes</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>rdbSavedObjectLen</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>rdbSaveObject</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveKeyValuePair</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>expiretime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>savelru</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>&amp;</operator> <name>MAXMEMORY_FLAG_LRU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>savelfu</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>&amp;</operator> <name>MAXMEMORY_FLAG_LFU</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expiretime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_EXPIRETIME_MS</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>expiretime</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>savelru</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>idletime</name> <init>= <expr><call><name>estimateObjectIdleTime</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idletime</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_IDLE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>idletime</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>savelfu</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LFUDecrAndReturn</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_FREQ</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveObjectType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_key_save_delay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debugDelay</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_key_save_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveAuxField</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vallen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_AUX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><name>vallen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveAuxFieldStrStr</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rdbSaveAuxField</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveAuxFieldStrInt</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vlen</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rdbSaveAuxField</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveInfoAuxFields</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>redis_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_preamble</name> <init>= <expr><operator>(</operator><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_AOF_PREAMBLE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrStr</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"redis-ver"</literal></expr></argument>,<argument><expr><name>REDIS_VERSION</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"redis-bits"</literal></expr></argument>,<argument><expr><name>redis_bits</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"ctime"</literal></expr></argument>,<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"used-mem"</literal></expr></argument>,<argument><expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rsi</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"repl-stream-db"</literal></expr></argument>,<argument><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrStr</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"repl-id"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"repl-offset"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"aof-preamble"</literal></expr></argument>,<argument><expr><name>aof_preamble</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveSingleModuleAux</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>, <parameter><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>RDB_OPCODE_MODULE_AUX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_MODULE_OPCODE_UINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>aux_save</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_MODULE_OPCODE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>io</name><operator>.</operator><name>bytes</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveFunctions</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>functions</name> <init>= <expr><call><name>functionsLibGet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>RDB_OPCODE_FUNCTION</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>li</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>written</name></expr>;</return>
<label><name>werr</name>:</label>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type> <name>rdbSaveDb</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>key_counter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>info_updated_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_AOF_PREAMBLE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"AOF rewrite"</literal></expr> </then><else>: <expr><literal type="string">"RDB"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name></name> <operator>+</operator> <name>dbid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_SELECTDB</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>db_size</name></decl>, <decl><type ref="prev"/><name>expires_size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>db_size</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expires_size</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_RESIZEDB</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>db_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>expires_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>keystr</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name></type> <name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>expire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rdb_bytes_before_key</name> <init>= <expr><name><name>rdb</name><operator>-&gt;</operator><name>processed_bytes</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>initStaticStringObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expire</name> <operator>=</operator> <call><name>getExpire</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>rdbSaveKeyValuePair</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>expire</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dump_size</name> <init>= <expr><name><name>rdb</name><operator>-&gt;</operator><name>processed_bytes</name></name> <operator>-</operator> <name>rdb_bytes_before_key</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>in_fork_child</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dismissObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>dump_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>key_counter</name><operator>)</operator><operator>++</operator> <operator>&amp;</operator> <literal type="number">1023</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name>info_updated_time</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sendChildInfo</name><argument_list>(<argument><expr><name>CHILD_INFO_TYPE_CURRENT_INFO</name></expr></argument>, <argument><expr><operator>*</operator><name>key_counter</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info_updated_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>written</name></expr>;</return>
<label><name>werr</name>:</label>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveRio</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>key_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rdb</name><operator>-&gt;</operator><name>update_cksum</name></name> <operator>=</operator> <name>rioGenericUpdateChecksum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>magic</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"REDIS%04d"</literal></expr></argument>,<argument><expr><name>RDB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>magic</name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveInfoAuxFields</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>rdbflags</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>SLAVE_REQ_RDB_EXCLUDE_DATA</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>rdbSaveModulesAux</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>REDISMODULE_AUX_BEFORE_RDB</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>SLAVE_REQ_RDB_EXCLUDE_FUNCTIONS</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>rdbSaveFunctions</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>SLAVE_REQ_RDB_EXCLUDE_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveDb</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>rdbflags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_counter</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>SLAVE_REQ_RDB_EXCLUDE_DATA</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>rdbSaveModulesAux</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>REDISMODULE_AUX_AFTER_RDB</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_EOF</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <name><name>rdb</name><operator>-&gt;</operator><name>cksum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
<label><name>werr</name>:</label>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveRioWithEOFMark</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>eofmark</name><index>[<expr><name>RDB_EOF_MARK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>startSaving</name><argument_list>(<argument><expr><name>RDBFLAGS_REPLICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name>eofmark</name></expr></argument>,<argument><expr><name>RDB_EOF_MARK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"$EOF:"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>eofmark</name></expr></argument>,<argument><expr><name>RDB_EOF_MARK_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveRio</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>error</name></expr></argument>,<argument><expr><name>RDBFLAGS_NONE</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>eofmark</name></expr></argument>,<argument><expr><name>RDB_EOF_MARK_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stopSaving</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
<label><name>werr</name>:</label>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stopSaving</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpfile</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cwd</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name></type> <name>rdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>,<argument><expr><literal type="string">"temp-%d.rdb"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_err</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwdp</name> <init>= <expr><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>,<argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed opening the temp RDB file %s (in server root dir %s) "</literal>
<literal type="string">"for saving: %s"</literal></expr></argument>,
<argument><expr><name>tmpfile</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>cwdp</name></expr> ?</condition><then> <expr><name>cwdp</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>str_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rioInitWithFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>startSaving</name><argument_list>(<argument><expr><name>RDBFLAGS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_save_incremental_fsync</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rioSetAutoSync</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>REDIS_AUTOSYNC_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveRio</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,<argument><expr><name>RDBFLAGS_NONE</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<goto>goto <name>werr</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <goto>goto <name>werr</name>;</goto> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_err</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwdp</name> <init>= <expr><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>,<argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Error moving temp DB file %s on the final "</literal>
<literal type="string">"destination %s (in server root dir %s): %s"</literal></expr></argument>,
<argument><expr><name>tmpfile</name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>cwdp</name></expr> ?</condition><then> <expr><name>cwdp</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>str_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stopSaving</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"DB saved on disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastsave</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stopSaving</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
<label><name>werr</name>:</label>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Write error saving DB on disk: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stopSaving</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveBackground</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>childpid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty_before_bgsave</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dirty</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_try</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>childpid</name> <operator>=</operator> <call><name>redisFork</name><argument_list>(<argument><expr><name>CHILD_TYPE_RDB</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><literal type="string">"redis-rdb-bgsave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisSetCpuAffinity</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bgsave_cpulist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSave</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sendChildCowInfo</name><argument_list>(<argument><expr><name>CHILD_INFO_TYPE_RDB_COW_SIZE</name></expr></argument>, <argument><expr><literal type="string">"RDB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>childpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't save in background: fork: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Background saving started by pid %ld"</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>childpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_DISK</name></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rdbRemoveTempFile</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>childpid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from_signal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpfile</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pid</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid_len</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>childpid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><literal type="string">"temp-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>tmpfile</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>pid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmpfile</name><operator>+</operator><literal type="number">5</literal><operator>+</operator><name>pid_len</name></expr></argument>, <argument><expr><literal type="string">".rdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>from_signal</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>O_RDONLY</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bg_unlink</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>rdbLoadCheckModuleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>modulename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>opcode</name></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>opcode</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>RDB_MODULE_OPCODE_EOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_SINT</name> <operator>||</operator>
<name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_UINT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbLoadLenByRef</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(
<argument><expr><literal type="string">"Error reading integer from module %s value"</literal></expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_STRING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_NONE</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(
<argument><expr><literal type="string">"Error reading string from module %s value"</literal></expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_FLOAT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbLoadBinaryFloatValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(
<argument><expr><literal type="string">"Error reading float from module %s value"</literal></expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_DOUBLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbLoadBinaryDoubleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(
<argument><expr><literal type="string">"Error reading double from module %s value"</literal></expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"module-dummy-value"</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_ziplistPairsEntryConvertAndValidate</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>head_count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>vll</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>data</name> <init>= <expr><name>userdata</name></expr></init></decl>;</struct>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fields</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hashDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>head_count</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>field</name> <init>= <expr><ternary><condition><expr><name>str</name></expr>?</condition><then> <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name>vll</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>lp</name></name><operator>)</operator> <operator>=</operator> <call><name>lpAppend</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>lp</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>lp</name></name><operator>)</operator> <operator>=</operator> <call><name>lpAppendInteger</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>lp</name></name><operator>)</operator></expr></argument>, <argument><expr><name>vll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ziplistPairsConvertAndValidateIntegrity</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
}</block> <decl><name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>lp</name></expr>}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ziplistValidateIntegrity</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_ziplistPairsEntryConvertAndValidate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>fields</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_ziplistEntryConvertAndValidate</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>head_count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>head_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>vll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lp</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>userdata</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <call><name>lpAppend</name><argument_list>(<argument><expr><operator>*</operator><name>lp</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <call><name>lpAppendInteger</name><argument_list>(<argument><expr><operator>*</operator><name>lp</name></expr></argument>, <argument><expr><name>vll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_listZiplistEntryConvertAndValidate</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>head_count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>head_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>vll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>longstr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><operator>(</operator><name>quicklist</name><operator>*</operator><operator>)</operator><name>userdata</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>longstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>longstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>longstr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>quicklistPushTail</name><argument_list>(<argument><expr><name>ql</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_lpPairsEntryValidation</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>head_count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>data</name> <init>= <expr><name>userdata</name></expr></init></decl>;</struct>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fields</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hashDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>head_count</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>LP_INTBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>lpGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>field</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>lpPairsValidateIntegrityAndDups</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>deep</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>lpValidateIntegrity</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
}</block> <decl><name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>lpValidateIntegrity</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_lpPairsEntryValidation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>fields</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>rdbLoadObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rdbtype</name></decl></parameter>, <parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ele</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>RDB_LOAD_ERR_OTHER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deep_integrity_validation</name> <init>= <expr><name><name>server</name><operator>.</operator><name>sanitize_dump_payload</name></name> <operator>==</operator> <name>SANITIZE_DUMP_YES</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sanitize_dump_payload</name></name> <operator>==</operator> <name>SANITIZE_DUMP_CLIENTS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>server</name><operator>.</operator><name>current_client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>current_client</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>current_client</name><operator>-&gt;</operator><name>user</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>USER_FLAG_SANITIZE_PAYLOAD_SKIP</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>deep_integrity_validation</name> <operator>=</operator> <operator>!</operator><name>skip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_STRING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>rdbLoadEncodedStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>tryObjectEncoding</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>emptykey</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createQuicklistObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quicklistSetOptions</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>list_max_listpack_size</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ele</name> <operator>=</operator> <call><name>rdbLoadEncodedStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>quicklistPushTail</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_SET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>emptykey</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_entries</name> <init>= <expr><name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max_entries</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max_entries</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>max_entries</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createSetObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name> <operator>&amp;&amp;</operator> <call><name>dictTryExpand</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"OOM in dictTryExpand %llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createIntsetObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>llval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sdsele</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INTSET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isSdsRepresentableAsLongLong</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>llval</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>success</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>llval</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicate set members detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>setTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictTryExpand</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"OOM in dictTryExpand %llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><operator>(</operator><name>dict</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicate set members detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET_2</name> <operator>||</operator> <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>zsetlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxelelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>totelelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>zsetlen</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zsetlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>emptykey</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createZsetObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zs</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zsetlen</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name> <operator>&amp;&amp;</operator> <call><name>dictTryExpand</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name>zsetlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"OOM in dictTryExpand %llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>zsetlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>zsetlen</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>znode</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sdsele</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET_2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rdbLoadBinaryDoubleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rdbLoadDoubleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Zset with NAN score detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxelelen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxelelen</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>totelelen</name> <operator>+=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>znode</name> <operator>=</operator> <call><name>zslInsert</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name></expr></argument>,<argument><expr><name>score</name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>znode</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicate zset fields detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>server</name><operator>.</operator><name>zset_max_listpack_entries</name></name> <operator>&amp;&amp;</operator>
<name>maxelelen</name> <operator>&lt;=</operator> <name><name>server</name><operator>.</operator><name>zset_max_listpack_value</name></name> <operator>&amp;&amp;</operator>
<call><name>lpSafeToAdd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>totelelen</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>zsetConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_LISTPACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_HASH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>field</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>dupSearchDict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>emptykey</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createHashObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_listpack_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>deep_integrity_validation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dupSearchDict</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hashDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>field</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dupSearchDict</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dupSearchDict</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dupSearchDict</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>field_dup</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>, <argument><expr><name>field_dup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Hash with dup elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_listpack_value</name></name> <operator>||</operator>
<call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_listpack_value</name></name> <operator>||</operator>
<operator>!</operator><call><name>lpSafeToAdd</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><operator>(</operator><name>dict</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DICT_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicate hash fields detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dupSearchDict</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>lpAppend</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>field</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>lpAppend</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>dupSearchDict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dupSearchDict</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictTryExpand</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"OOM in dictTryExpand %llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>field</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><operator>(</operator><name>dict</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DICT_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicate hash fields detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST_QUICKLIST</name> <operator>||</operator> <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST_QUICKLIST_2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>emptykey</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createQuicklistObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quicklistSetOptions</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>list_max_listpack_size</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>container</name> <init>= <expr><name>QUICKLIST_NODE_CONTAINER_PACKED</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>encoded_len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST_QUICKLIST_2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>container</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>container</name> <operator>!=</operator> <name>QUICKLIST_NODE_CONTAINER_PACKED</name> <operator>&amp;&amp;</operator> <name>container</name> <operator>!=</operator> <name>QUICKLIST_NODE_CONTAINER_PLAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Quicklist integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>=
<expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_PLAIN</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>encoded_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>encoded_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>QUICKLIST_NODE_CONTAINER_PLAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>quicklistAppendPlainNode</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST_QUICKLIST_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>deep_integrity_validation</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_dump_payload_sanitizations</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lpValidateIntegrity</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><name>deep_integrity_validation</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Listpack integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <call><name>lpNew</name><argument_list>(<argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistValidateIntegrity</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>_ziplistEntryConvertAndValidate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Ziplist integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <call><name>lpShrinkToFit</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lpLength</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>quicklistAppendListpack</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>quicklistCount</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>emptykey</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_HASH_ZIPMAP</name> <operator>||</operator>
<name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST_ZIPLIST</name> <operator>||</operator>
<name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_SET_INTSET</name> <operator>||</operator>
<name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET_ZIPLIST</name> <operator>||</operator>
<name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET_LISTPACK</name> <operator>||</operator>
<name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_HASH_ZIPLIST</name> <operator>||</operator>
<name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_HASH_LISTPACK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>encoded_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>encoded</name> <init>=
<expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_PLAIN</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>encoded_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>encoded</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>rdbtype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RDB_TYPE_HASH_ZIPMAP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zipmapValidateIntegrity</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Zipmap integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><call><name>lpNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zi</name> <init>= <expr><call><name>zipmapRewind</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>dupSearchDict</name> <init>= <expr><call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hashDictType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>zi</name> <operator>=</operator> <call><name>zipmapNext</name><argument_list>(<argument><expr><name>zi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>flen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>vlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>field</name> <init>= <expr><call><name>sdstrynewlen</name><argument_list>(<argument><expr><name>fstr</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field</name> <operator>||</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name> <operator>||</operator>
<operator>!</operator><call><name>lpSafeToAdd</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>flen</name> <operator>+</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Hash zipmap with dup elements, or big length (%u)"</literal></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <call><name>lpAppend</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>fstr</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <call><name>lpAppend</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>dupSearchDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_HASH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_listpack_entries</name></name> <operator>||</operator>
<name>maxlen</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_listpack_value</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>RDB_TYPE_LIST_ZIPLIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><call><name>quicklistNew</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>list_max_listpack_size</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistValidateIntegrity</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>_listZiplistEntryConvertAndValidate</name></expr></argument>, <argument><expr><name>ql</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"List ziplist integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quicklistRelease</name><argument_list>(<argument><expr><name>ql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ql</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quicklistRelease</name><argument_list>(<argument><expr><name>ql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>emptykey</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ql</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>RDB_TYPE_SET_INTSET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>deep_integrity_validation</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_dump_payload_sanitizations</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>intsetValidateIntegrity</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><name>deep_integrity_validation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Intset integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_INTSET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>intsetLen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RDB_TYPE_ZSET_ZIPLIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><call><name>lpNew</name><argument_list>(<argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistPairsConvertAndValidateIntegrity</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Zset ziplist integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_ZSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>emptykey</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>zset_max_listpack_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zsetConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_SKIPLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>lpShrinkToFit</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>RDB_TYPE_ZSET_LISTPACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>deep_integrity_validation</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_dump_payload_sanitizations</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lpPairsValidateIntegrityAndDups</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><name>deep_integrity_validation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Zset listpack integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_ZSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>emptykey</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>zset_max_listpack_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zsetConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_SKIPLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RDB_TYPE_HASH_ZIPLIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><call><name>lpNew</name><argument_list>(<argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistPairsConvertAndValidateIntegrity</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Hash ziplist integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_HASH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>emptykey</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_listpack_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>lpShrinkToFit</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>RDB_TYPE_HASH_LISTPACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>deep_integrity_validation</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_dump_payload_sanitizations</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lpPairsValidateIntegrityAndDups</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><name>deep_integrity_validation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Hash listpack integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_HASH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>emptykey</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_listpack_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB encoding type %d"</literal></expr></argument>,<argument><expr><name>rdbtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_STREAM_LISTPACKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createStreamObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>listpacks</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>listpacks</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream listpacks len loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>listpacks</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>nodekey</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nodekey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream master ID loading failed: invalid encoding or I/O error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>nodekey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Stream node key entry is not the "</literal>
<literal type="string">"size of a stream ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>nodekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lp_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>=
<expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_PLAIN</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>lp_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream listpacks loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>nodekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>deep_integrity_validation</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_dump_payload_sanitizations</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>streamValidateListpackIntegrity</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>lp_size</name></expr></argument>, <argument><expr><name>deep_integrity_validation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Stream listpack integrity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>nodekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>lpFirst</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Empty listpack inside stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>nodekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>nodekey</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>lp</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>nodekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>retval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Listpack re-added with existing key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioGetReadError</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream object metadata loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cgroups_count</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cgroups_count</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream cgroup count loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>cgroups_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>streamID</name></type> <name>cg_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>cgname</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cgname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(
<argument><expr><literal type="string">"Error reading the consumer group name from Stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cg_id</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cg_id</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioGetReadError</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream cgroup ID loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cgroup</name> <init>= <expr><call><name>streamCreateCG</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>cgname</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>cgname</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>cg_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cgroup</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicated consumer group name %s"</literal></expr></argument>,
<argument><expr><name>cgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pel_size</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pel_size</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream PEL size loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>pel_size</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rawid</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream PEL ID loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>streamNACK</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><call><name>streamCreateNACK</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nack</name><operator>-&gt;</operator><name>delivery_time</name></name> <operator>=</operator> <call><name>rdbLoadMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nack</name><operator>-&gt;</operator><name>delivery_count</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioGetReadError</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream PEL NACK loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>streamFreeNACK</name><argument_list>(<argument><expr><name>nack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxTryInsert</name><argument_list>(<argument><expr><name><name>cgroup</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>nack</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicated global PEL entry "</literal>
<literal type="string">"loading stream consumer group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>streamFreeNACK</name><argument_list>(<argument><expr><name>nack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>consumers_num</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>consumers_num</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream consumers num loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>consumers_num</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>cname</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(
<argument><expr><literal type="string">"Error reading the consumer name from Stream group."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>streamConsumer</name> <modifier>*</modifier></type><name>consumer</name> <init>= <expr><call><name>streamCreateConsumer</name><argument_list>(<argument><expr><name>cgroup</name></expr></argument>,<argument><expr><name>cname</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>SCC_NO_NOTIFY</name><operator>|</operator><name>SCC_NO_DIRTIFY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>consumer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicate stream consumer detected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>consumer</name><operator>-&gt;</operator><name>seen_time</name></name> <operator>=</operator> <call><name>rdbLoadMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioGetReadError</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Stream short read reading seen time."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pel_size</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pel_size</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(
<argument><expr><literal type="string">"Stream consumer PEL num loading failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>pel_size</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rawid</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(
<argument><expr><literal type="string">"Stream short read reading PEL streamID."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>streamNACK</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>cgroup</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nack</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Consumer entry not found in "</literal>
<literal type="string">"group global PEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>nack</name><operator>-&gt;</operator><name>consumer</name></name> <operator>=</operator> <name>consumer</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxTryInsert</name><argument_list>(<argument><expr><name><name>consumer</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>nack</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicated consumer PEL entry "</literal>
<literal type="string">" loading a stream consumer "</literal>
<literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>streamFreeNACK</name><argument_list>(<argument><expr><name>nack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>deep_integrity_validation</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri_cg_pel</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri_cg_pel</name></expr></argument>,<argument><expr><name><name>cgroup</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri_cg_pel</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri_cg_pel</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>streamNACK</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><name><name>ri_cg_pel</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nack</name><operator>-&gt;</operator><name>consumer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri_cg_pel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Stream CG PEL entry without consumer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri_cg_pel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_MODULE</name> <operator>||</operator> <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_MODULE_2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>moduleid</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioGetReadError</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Short read module id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><call><name>moduleTypeLookupModuleByID</name><argument_list>(<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbCheckMode</name> <operator>&amp;&amp;</operator> <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_MODULE_2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rdbLoadCheckModuleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"The RDB file contains module data I can't load: no matching module type '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name></type> <name>keyobj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>initStaticStringObject</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>keyobj</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>ver</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_MODULE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name><name>mt</name><operator>-&gt;</operator><name>rdb_load</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name>moduleid</name><operator>&amp;</operator><literal type="number">1023</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ver</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>eof</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createModuleObject</name><argument_list>(<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"The RDB file contains module data for the module '%s' that is not terminated by "</literal>
<literal type="string">"the proper module value EOF marker"</literal></expr></argument>, <argument><expr><call><name>moduleTypeModuleName</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createModuleObject</name><argument_list>(<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"The RDB file contains module data for the module type '%s', that the responsible "</literal>
<literal type="string">"module is not able to load. Check for modules log above for additional clues."</literal></expr></argument>,
<argument><expr><call><name>moduleTypeModuleName</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createModuleObject</name><argument_list>(<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB encoding type %d"</literal></expr></argument>,<argument><expr><name>rdbtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
<label><name>emptykey</name>:</label>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>RDB_LOAD_ERR_EMPTY_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>startLoading</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>async</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>async_loading</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_start_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_rdb_used_mem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_expired</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_loaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blockingOperationStarts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subevent</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_AOF_PREAMBLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subevent</name> <operator>=</operator> <name>REDISMODULE_SUBEVENT_LOADING_AOF_START</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_REPLICATION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subevent</name> <operator>=</operator> <name>REDISMODULE_SUBEVENT_LOADING_REPL_START</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>subevent</name> <operator>=</operator> <name>REDISMODULE_SUBEVENT_LOADING_RDB_START</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_LOADING</name></expr></argument>,<argument><expr><name>subevent</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>startLoadingFile</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>rdbFileBeingLoaded</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>startLoading</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>rdbflags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>loadingAbsProgress</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>&lt;</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>loadingIncrProgress</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>&lt;</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>updateLoadingFileName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>rdbFileBeingLoaded</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>stopLoading</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>async_loading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blockingOperationEnds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdbFileBeingLoaded</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_LOADING</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>success</name></expr>?</condition><then>
<expr><name>REDISMODULE_SUBEVENT_LOADING_ENDED</name></expr></then><else>:
<expr><name>REDISMODULE_SUBEVENT_LOADING_FAILED</name></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>startSaving</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>subevent</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_AOF_PREAMBLE</name> <operator>&amp;&amp;</operator> <call><name>getpid</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subevent</name> <operator>=</operator> <name>REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_AOF_PREAMBLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subevent</name> <operator>=</operator> <name>REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_AOF_START</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>getpid</name><argument_list>()</argument_list></call><operator>!=</operator><name><name>server</name><operator>.</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subevent</name> <operator>=</operator> <name>REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>subevent</name> <operator>=</operator> <name>REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_PERSISTENCE</name></expr></argument>,<argument><expr><name>subevent</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>stopSaving</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_PERSISTENCE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>success</name></expr>?</condition><then>
<expr><name>REDISMODULE_SUBEVENT_PERSISTENCE_ENDED</name></expr></then><else>:
<expr><name>REDISMODULE_SUBEVENT_PERSISTENCE_FAILED</name></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rdbLoadProgressCallback</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rioGenericUpdateChecksum</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name> <operator>+</operator> <name>len</name><operator>)</operator><operator>/</operator><name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name><operator>/</operator><name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>replicationSendNewlineToMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>loadingAbsProgress</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>processEventsWhileBlocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>processModuleLoadingProgressEvent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbFunctionLoad</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>lib_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>engine_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>blob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>has_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>C_ERR</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>RDB_LOAD_SDS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Failed loading library name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>engine_name</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>RDB_LOAD_SDS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Failed loading engine name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>has_desc</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Failed loading library description indicator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_desc</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>RDB_LOAD_SDS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Failed loading library description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>blob</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>RDB_LOAD_SDS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Failed loading library blob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lib_ctx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>functionsCreateWithLibraryCtx</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>engine_name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_ALLOW_DUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lib_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Failed creating the library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>engine_name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>engine_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>blob</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed creating function, %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoadRio</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>functions_lib_ctx</name> <init>= <expr><call><name>functionsLibCtxGetCurrent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rdbLoadingCtx</name></type> <name>loading_ctx</name> <init>= <expr><block>{ <expr><operator>.</operator><name>dbarray</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>db</name></name></expr>, <expr><operator>.</operator><name>functions_lib_ctx</name> <operator>=</operator> <name>functions_lib_ctx</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbLoadRioWithLoadingCtx</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>rdbflags</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>loading_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoadRioWithLoadingCtx</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>, <parameter><decl><type><name>rdbLoadingCtx</name> <modifier>*</modifier></type><name>rdb_loading_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dbid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>rdbver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>rdb_loading_ctx</name><operator>-&gt;</operator><name>dbarray</name></name><operator>+</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>empty_keys_skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rdb</name><operator>-&gt;</operator><name>update_cksum</name></name> <operator>=</operator> <name>rdbLoadProgressCallback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rdb</name><operator>-&gt;</operator><name>max_processing_chunk</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"REDIS"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Wrong signature trying to load DB from file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rdbver</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rdbver</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>rdbver</name></expr></argument> &gt;</argument_list></name> <name>RDB_VERSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't handle RDB format version %d"</literal></expr></argument>,<argument><expr><name>rdbver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lru_idle</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>lfu_freq</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>expiretime</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lru_clock</name> <init>= <expr><call><name>LRU_CLOCK</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>rdbLoadType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_EXPIRETIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expiretime</name> <operator>=</operator> <call><name>rdbLoadTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expiretime</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioGetReadError</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_EXPIRETIME_MS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expiretime</name> <operator>=</operator> <call><name>rdbLoadMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>rdbver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioGetReadError</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_FREQ</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lfu_freq</name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_IDLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>qword</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>qword</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lru_idle</name> <operator>=</operator> <name>qword</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_EOF</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_SELECTDB</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dbid</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dbid</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"FATAL: Data file was created with a Redis "</literal>
<literal type="string">"server configured to handle more than %d "</literal>
<literal type="string">"databases. Exiting\n"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>db</name> <operator>=</operator> <name><name>rdb_loading_ctx</name><operator>-&gt;</operator><name>dbarray</name></name><operator>+</operator><name>dbid</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_RESIZEDB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>db_size</name></decl>, <decl><type ref="prev"/><name>expires_size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>db_size</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>expires_size</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name>db_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,<argument><expr><name>expires_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_AUX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>auxkey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>auxval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>auxkey</name> <operator>=</operator> <call><name>rdbLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>auxval</name> <operator>=</operator> <call><name>rdbLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>auxkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>eoferr</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"RDB '%s': %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"repl-stream-db"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rsi</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"repl-id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rsi</name> <operator>&amp;&amp;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_id</name></name></expr></argument>,<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_id_is_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"repl-offset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rsi</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_offset</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"lua"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"redis-ver"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Loading RDB produced by version %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"ctime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>age</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>age</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>age</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"RDB age %ld seconds"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"used-mem"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>usedmem</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"RDB memory usage when created %.2f Mb"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>usedmem</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_rdb_used_mem</name></name> <operator>=</operator> <name>usedmem</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"aof-preamble"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>haspreamble</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>haspreamble</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"RDB has an AOF tail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"redis-bits"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Unrecognized RDB AUX field: '%s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>auxkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>auxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_MODULE_AUX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>moduleid</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>when_opcode</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>when</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioGetReadError</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>when_opcode</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_UINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"bad when_opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>eoferr</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><call><name>moduleTypeLookupModuleByID</name><argument_list>(<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdbCheckMode</name> <operator>&amp;&amp;</operator> <name>mt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains AUX module data I can't load: no matching module '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>rdbCheckMode</name> <operator>&amp;&amp;</operator> <name>mt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mt</name><operator>-&gt;</operator><name>aux_load</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module AUX data, but the module '%s' doesn't seem to support it."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>ver</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name><name>mt</name><operator>-&gt;</operator><name>aux_load</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name>moduleid</name><operator>&amp;</operator><literal type="number">1023</literal></expr></argument>, <argument><expr><name>when</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>REDISMODULE_OK</name> <operator>||</operator> <name><name>io</name><operator>.</operator><name>error</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module AUX data for the module type '%s', that the responsible module is not able to load. Check for modules log above for additional clues."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>eoferr</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>eof</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module AUX data for the module '%s' that is not terminated by the proper module value EOF marker"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>eoferr</name>;</goto>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><call><name>rdbLoadCheckModuleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_FUNCTION</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbFunctionLoad</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>rdbver</name></expr></argument>, <argument><expr><name><name>rdb_loading_ctx</name><operator>-&gt;</operator><name>functions_lib_ctx</name></name></expr></argument>, <argument><expr><name>rdbflags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Failed loading library, %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>eoferr</name>;</goto>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rdbLoadObject</name><argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>RDB_LOAD_ERR_EMPTY_KEY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>empty_keys_skipped</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"rdbLoadObject skipping empty key: %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>eoferr</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>iAmMaster</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>rdbflags</name><operator>&amp;</operator><name>RDBFLAGS_AOF_PREAMBLE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>expiretime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>expiretime</name> <operator>&lt;</operator> <name>now</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_FEED_REPL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name></type> <name>keyobj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>initStaticStringObject</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>unlink</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>del</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>keyobj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationFeedSlaves</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_expired</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>robj</name></type> <name>keyobj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>initStaticStringObject</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>added</name> <init>= <expr><call><name>dbAddRDBLoad</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_loaded</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>added</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdbflags</name> <operator>&amp;</operator> <name>RDBFLAGS_ALLOW_DUP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dbSyncDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbAddRDBLoad</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"RDB has duplicated key '%s' in DB %d"</literal></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Duplicated key found in RDB file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>expiretime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>db</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>keyobj</name></expr></argument>,<argument><expr><name>expiretime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>objectSetLRUOrLFU</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>lfu_freq</name></expr></argument>,<argument><expr><name>lru_idle</name></expr></argument>,<argument><expr><name>lru_clock</name></expr></argument>,<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleNotifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_LOADED</name></expr></argument>, <argument><expr><literal type="string">"loaded"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyobj</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>key_load_delay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debugDelay</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>key_load_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>expiretime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lfu_freq</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lru_idle</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>rdbver</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cksum</name></decl>, <decl><type ref="prev"/><name>expected</name> <init>= <expr><name><name>rdb</name><operator>-&gt;</operator><name>cksum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>skip_checksum_validation</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cksum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"RDB file was saved with checksum disabled: no check performed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cksum</name> <operator>!=</operator> <name>expected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Wrong RDB checksum expected: (%llx) but "</literal>
<literal type="string">"got (%llx). Aborting now."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>expected</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdbReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"RDB CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>empty_keys_skipped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Done loading RDB, keys loaded: %lld, keys expired: %lld, empty keys skipped: %lld."</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_loaded</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_expired</name></name></expr></argument>, <argument><expr><name>empty_keys_skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Done loading RDB, keys loaded: %lld, keys expired: %lld."</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_loaded</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_expired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
<label><name>eoferr</name>:</label>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Short read or OOM loading DB. Unrecoverable error, aborting now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdbReportReadError</name><argument_list>(<argument><expr><literal type="string">"Unexpected EOF reading RDB file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbLoad</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name></type> <name>rdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>startLoadingFile</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>rdbflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rioInitWithFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbLoadRio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>rdbflags</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stopLoading</name><argument_list>(<argument><expr><name>retval</name><operator>==</operator><name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>backgroundSaveDoneHandlerDisk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Background saving terminated with success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>dirty_before_bgsave</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastsave</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Background saving error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>latency</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Background saving terminated by signal %d"</literal></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyStartMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdbRemoveTempFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyEndMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"rdb-unlink-temp-file"</literal></expr></argument>,<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bysignal</name> <operator>!=</operator> <name>SIGUSR1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>backgroundSaveDoneHandlerSocket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Background RDB transfer terminated with success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Background transfer error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Background transfer terminated by signal %d"</literal></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_exit_pipe</name></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_child_exit_pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_exit_pipe</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>backgroundSaveDoneHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RDB_CHILD_TYPE_DISK</name></expr>:</case>
<expr_stmt><expr><call><name>backgroundSaveDoneHandlerDisk</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>,<argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RDB_CHILD_TYPE_SOCKET</name></expr>:</case>
<expr_stmt><expr><call><name>backgroundSaveDoneHandlerSocket</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>,<argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB child type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_last</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateSlavesWaitingBgsave</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>C_OK</name></expr> </then><else>: <expr><name>C_ERR</name></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>killRDBChild</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rdbSaveToSlavesSockets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>childpid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pipefds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>rdb_pipe_write</name></decl>, <decl><type ref="prev"/><name>safe_to_exit_pipe</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetPipe</name><argument_list>(<argument><expr><name>pipefds</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name> <operator>=</operator> <name><name>pipefds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rdb_pipe_write</name> <operator>=</operator> <name><name>pipefds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetPipe</name><argument_list>(<argument><expr><name>pipefds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>rdb_pipe_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>safe_to_exit_pipe</name> <operator>=</operator> <name><name>pipefds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_exit_pipe</name></name> <operator>=</operator> <name><name>pipefds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>connection</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>slave_req</name></name> <operator>!=</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name><index>[<expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>slave</name><operator>-&gt;</operator><name>conn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationSetupSlaveForFullResync</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,<argument><expr><call><name>getPsyncInitialOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>childpid</name> <operator>=</operator> <call><name>redisFork</name><argument_list>(<argument><expr><name>CHILD_TYPE_RDB</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name></type> <name>rdb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rioInitWithFd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>rdb_pipe_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><literal type="string">"redis-rdb-to-slaves"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisSetCpuAffinity</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bgsave_cpulist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveRioWithEOFMark</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name> <operator>&amp;&amp;</operator> <call><name>rioFlush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sendChildCowInfo</name><argument_list>(<argument><expr><name>CHILD_INFO_TYPE_RDB_COW_SIZE</name></expr></argument>, <argument><expr><literal type="string">"RDB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rioFreeFd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>rdb_pipe_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_child_exit_pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dummy</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>safe_to_exit_pipe</name></expr></argument>, <argument><expr><name>pipefds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>childpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't save in background: fork: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>=</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>rdb_pipe_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Background RDB transfer started by pid %ld"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>childpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>rdb_pipe_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>, <argument><expr><name>rdbPipeReadHandler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating server.rdb_pipe_read file event."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>safe_to_exit_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>childpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>C_ERR</name></expr> </then><else>: <expr><name>C_OK</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>saveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Background save already in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSave</name><argument_list>(<argument><expr><name>SLAVE_REQ_NONE</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>bgsaveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>schedule</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"schedule"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>schedule</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Background save already in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>server</name><operator>.</operator><name>in_exec</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>schedule</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>in_exec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_bgsave_scheduled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Background saving scheduled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Another child process is active (AOF?): can't BGSAVE right now. "</literal>
<literal type="string">"Use BGSAVE SCHEDULE in order to schedule a BGSAVE whenever "</literal>
<literal type="string">"possible."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rdbSaveBackground</name><argument_list>(<argument><expr><name>SLAVE_REQ_NONE</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Background saving started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rdbPopulateSaveInfo</name><parameter_list>(<parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi_init</name> <init>= <expr><name>RDB_SAVE_INFO_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>rsi</name> <operator>=</operator> <name>rsi_init</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>rsi</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<return>return <expr><name>rsi</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<return>return <expr><name>rsi</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
