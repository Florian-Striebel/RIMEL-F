<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/lolwut6.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lolwut.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>sds</name></type> <name>renderCanvas</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>text</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>ce</name> <operator>=</operator> <literal type="string">"0;30;40m"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>ce</name> <operator>=</operator> <literal type="string">"0;90;100m"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>ce</name> <operator>=</operator> <literal type="string">"0;37;47m"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>ce</name> <operator>=</operator> <literal type="string">"0;97;107m"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>ce</name> <operator>=</operator> <literal type="string">"0;30;40m"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>text</name></expr></argument>,<argument><expr><literal type="string">"\033[%s \033[0m"</literal></expr></argument>,<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>text</name></expr>;</return>
</block_content>}</block></function>
<struct>struct <name>skyscraper</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>xoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>windows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>void</name></type> <name>generateSkyscraper</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>skyscraper</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>starty</name> <init>= <expr><name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endy</name> <init>= <expr><name>starty</name> <operator>-</operator> <name><name>si</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>starty</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <name>endy</name></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>xoff</name></name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>xoff</name></name><operator>+</operator><name><name>si</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>endy</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;=</operator> <name><name>si</name><operator>-&gt;</operator><name>xoff</name></name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>si</name><operator>-&gt;</operator><name>xoff</name></name><operator>+</operator><name><name>si</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>color</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>windows</name></name> <operator>&amp;&amp;</operator>
<name>x</name> <operator>&gt;</operator> <name><name>si</name><operator>-&gt;</operator><name>xoff</name></name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>x</name> <argument_list type="generic">&lt; <argument><expr><name><name>si</name><operator>-&gt;</operator><name>xoff</name></name><operator>+</operator><name><name>si</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name>y</name></expr></argument> &gt;</argument_list></name> <name>endy</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>y</name> <operator>&lt;</operator> <name>starty</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>relx</name> <init>= <expr><name>x</name> <operator>-</operator> <operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>xoff</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rely</name> <init>= <expr><name>y</name> <operator>-</operator> <operator>(</operator><name>endy</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>relx</name><operator>/</operator><literal type="number">2</literal> <operator>%</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>rely</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>color</name> <operator>==</operator> <name><name>si</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>relx</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lwDrawPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>generateSkyline</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>skyscraper</name></name></type> <name>si</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>color</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>color</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>color</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>-</operator><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>xoff</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">9</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>windows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generateSkyscraper</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>si</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>si</name><operator>.</operator><name>width</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>color</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>-</operator><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>xoff</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">14</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>.</operator><name>width</name></name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>si</name><operator>.</operator><name>width</name></name> <operator>+=</operator> <operator>(</operator><name><name>si</name><operator>.</operator><name>width</name></name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">3</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>windows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generateSkyscraper</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>si</name><operator>.</operator><name>width</name></name><operator>+</operator><literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>lolwut6Command</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>cols</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rows</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rows</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rows</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name> <init>= <expr><call><name>lwCreateCanvas</name><argument_list>(<argument><expr><name>cols</name></expr></argument>,<argument><expr><name>rows</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>generateSkyline</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>rendered</name> <init>= <expr><call><name>renderCanvas</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,
<argument><expr><literal type="string">"\nDedicated to the 8 bit game developers of past and present.\n"</literal>
<literal type="string">"Original 8 bit image from Plaguemon by hikikomori. Redis ver. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,<argument><expr><name>REDIS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyVerbatim</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>rendered</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lwFreeCanvas</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
