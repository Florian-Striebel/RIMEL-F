<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/db.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomicvar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"latency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<function_decl><type><name>int</name></type> <name>expireIfNeeded</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_delete_expired</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>keyIsExpired</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>updateLFU</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>counter</name> <init>= <expr><call><name>LFUDecrAndReturn</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <call><name>LFULogIncr</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>lru</name></name> <operator>=</operator> <operator>(</operator><call><name>LFUGetTimeInMinutes</name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>counter</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>lookupKey</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_delete_expired</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>LOOKUP_WRITE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>force_delete_expired</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>in_script</name></name></expr> ?</condition><then> <expr><call><name>scriptGetClient</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>current_client</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name> <operator>||</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CMD_WRITE</name><operator>|</operator><name>CMD_MODULE</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>expireIfNeeded</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>force_delete_expired</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOOKUP_NOTOUCH</name><operator>)</operator></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>&amp;</operator> <name>MAXMEMORY_FLAG_LFU</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>updateLFU</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>lru</name></name> <operator>=</operator> <call><name>LRU_CLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>LOOKUP_NOSTATS</name> <operator>|</operator> <name>LOOKUP_WRITE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_hits</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>LOOKUP_NONOTIFY</name> <operator>|</operator> <name>LOOKUP_WRITE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_KEY_MISS</name></expr></argument>, <argument><expr><literal type="string">"keymiss"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>LOOKUP_NOSTATS</name> <operator>|</operator> <name>LOOKUP_WRITE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_misses</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyReadWithFlags</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOOKUP_WRITE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lookupKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyRead</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>LOOKUP_NONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyWriteWithFlags</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>lookupKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOOKUP_WRITE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyWrite</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>lookupKeyWriteWithFlags</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>LOOKUP_NONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyReadOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>lookupKeyRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>addReplyOrErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyWriteOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>addReplyOrErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dbAdd</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>copy</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictAddRaw</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalKeyAsReady</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>slotToKeyAddEntry</name><argument_list>(<argument><expr><name>de</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dbAddRDBLoad</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictAddRaw</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>de</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>slotToKeyAddEntry</name><argument_list>(<argument><expr><name>de</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dbOverwrite</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictEntry</name></type> <name>auxentry</name> <init>= <expr><operator>*</operator><name>de</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>&amp;</operator> <name>MAXMEMORY_FLAG_LFU</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>lru</name></name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>lru</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>moduleNotifyKeyUnlink</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>old</name></expr></argument>,<argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_server_del</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeObjAsync</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>old</name></expr></argument>,<argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auxentry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dictFreeVal</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auxentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>setKey</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keyfound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SETKEY_ALREADY_EXIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keyfound</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SETKEY_DOESNT_EXIST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keyfound</name> <operator>=</operator> <operator>(</operator><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyfound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dbOverwrite</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SETKEY_KEEPTTL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>removeExpire</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SETKEY_NO_SIGNAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>dbRandomKey</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxtries</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allvolatile</name> <init>= <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name></decl>;</decl_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictGetFairRandomKey</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>de</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keyobj</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allvolatile</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <operator>--</operator><name>maxtries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>keyobj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>expireIfNeeded</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>keyobj</name></expr>;</return>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbGenericDelete</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictUnlink</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleNotifyKeyUnlink</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>async</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeObjAsync</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>slotToKeyDelEntry</name><argument_list>(<argument><expr><name>de</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dictFreeUnlinkedEntry</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dbSyncDelete</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dbGenericDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dbAsyncDelete</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dbGenericDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dbDelete</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dbGenericDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_server_del</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>robj</name> <modifier>*</modifier></type><name>dbUnshareStringValue</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>OBJ_ENCODING_RAW</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>decoded</name> <init>= <expr><call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createRawStringObject</name><argument_list>(<argument><expr><name><name>decoded</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>decoded</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbOverwrite</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>emptyDbStructure</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>dbarray</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startdb</name></decl>, <decl><type ref="prev"/><name>enddb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startdb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>enddb</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>startdb</name> <operator>=</operator> <name>enddb</name> <operator>=</operator> <name>dbnum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>startdb</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>enddb</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>removed</name> <operator>+=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>dbarray</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>async</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emptyDbAsync</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbarray</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dictEmpty</name><argument_list>(<argument><expr><name><name>dbarray</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>,<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictEmpty</name><argument_list>(<argument><expr><name><name>dbarray</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>,<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dbarray</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>avg_ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbarray</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires_cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>removed</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>emptyData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>async</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EMPTYDB_ASYNC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>with_functions</name> <init>= <expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EMPTYDB_NOFUNCTIONS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleFlushInfoV1</name></type> <name>fi</name> <init>= <expr><block>{<expr><name>REDISMODULE_FLUSHINFO_VERSION</name></expr>,<expr><operator>!</operator><name>async</name></expr>,<expr><name>dbnum</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbnum</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>dbnum</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_FLUSHDB</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_FLUSHDB_START</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalFlushedDb</name><argument_list>(<argument><expr><name>dbnum</name></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>removed</name> <operator>=</operator> <call><name>emptyDbStructure</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>dbnum</name></expr></argument>, <argument><expr><name>async</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>slotToKeyFlush</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dbnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>flushSlaveKeysWithExpireList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>with_functions</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>dbnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>functionsLibCtxClearCurrent</name><argument_list>(<argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_FLUSHDB</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_FLUSHDB_END</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>removed</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>redisDb</name> <modifier>*</modifier></type><name>initTempDb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>tempDb</name> <init>= <expr><call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisDb</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tempDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tempDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expires</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbExpiresDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tempDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>slots_to_keys</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>slotToKeyInit</name><argument_list>(<argument><expr><name>tempDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>tempDb</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>discardTempDb</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>tempDb</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>async</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>emptyDbStructure</name><argument_list>(<argument><expr><name>tempDb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>async</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>tempDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>tempDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>slotToKeyDestroy</name><argument_list>(<argument><expr><name>tempDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>tempDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>selectDb</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>dbTotalServerKeyCount</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>signalModifiedKey</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>touchWatchedKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trackingInvalidateKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>signalFlushedDb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>startdb</name></decl>, <decl><type ref="prev"/><name>enddb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startdb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>enddb</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>startdb</name> <operator>=</operator> <name>enddb</name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>startdb</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>enddb</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>touchAllWatchedKeysInDb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>trackingInvalidateKeysOnFlush</name><argument_list>(<argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>getFlushCommandFlags</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>EMPTYDB_NO_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"async"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>EMPTYDB_ASYNC</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_user_flush</name></name></expr> ?</condition><then> <expr><name>EMPTYDB_ASYNC</name></expr> </then><else>: <expr><name>EMPTYDB_NO_FLAGS</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>flushAllDataAndResetRDB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>+=</operator> <call><name>emptyData</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>killRDBChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saved_dirty</name> <init>= <expr><name><name>server</name><operator>.</operator><name>dirty</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdbSave</name><argument_list>(<argument><expr><name>SLAVE_REQ_NONE</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <name>saved_dirty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JEMALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EMPTYDB_ASYNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jemalloc_purge</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>flushdbCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getFlushCommandFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>+=</operator> <call><name>emptyData</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>flags</name> <operator>|</operator> <name>EMPTYDB_NOFUNCTIONS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JEMALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EMPTYDB_ASYNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jemalloc_purge</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>flushallCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getFlushCommandFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flushAllDataAndResetRDB</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>EMPTYDB_NOFUNCTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>delGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lazy</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numdel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>expireIfNeeded</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr><ternary><condition><expr><name>lazy</name></expr> ?</condition><then> <expr><call><name>dbAsyncDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>dbSyncDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>deleted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,
<argument><expr><literal type="string">"del"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>numdel</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>numdel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>delCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>delGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_user_del</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>unlinkCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>delGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>existsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>LOOKUP_NOTOUCH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>selectCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getIntFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SELECT is not allowed in cluster mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>selectDb</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DB index is out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>randomkeyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>dbRandomKey</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>keysCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>pattern</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>allkeys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>numkeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>replylen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>allkeys</name> <operator>=</operator> <operator>(</operator><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name>plen</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>allkeys</name> <operator>||</operator> <call><name>stringmatchlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><name>plen</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keyobj</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>keyIsExpired</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numkeys</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>replylen</name></expr></argument>,<argument><expr><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>scanCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pd</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>keys</name> <init>= <expr><name><name>pd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>pd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sdskey</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>keysds</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>keysds</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>keysds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sdskey</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsval</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>sdsval</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdsval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sdskey</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdskey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>createStringObjectFromLongDouble</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Type not handled in SCAN callback."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>parseScanCursorOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>eptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"invalid cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>scanGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>keys</name> <init>= <expr><call><name>listCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>pat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>typename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>patlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>use_pattern</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>o</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name> <operator>||</operator>
<name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>o</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition>
<block>{<block_content>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"match"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pat</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>patlen</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>use_pattern</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>patlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>o</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>typename</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>privdata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxiterations</name> <init>= <expr><name>count</name><operator>*</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>privdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>keys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>privdata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>dictScan</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>scanCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>cursor</name> <operator>&amp;&amp;</operator>
<name>maxiterations</name><operator>--</operator> <operator>&amp;&amp;</operator>
<call><name>listLength</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>count</name></expr>)</condition>;</do>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ll</name></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>intsetGet</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>pos</name><operator>++</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>keys</name></expr></argument>,<argument><expr><call><name>createStringObjectFromLongLong</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lpFirst</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>vstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>intbuf</name><index>[<expr><name>LP_INTBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vstr</name> <operator>=</operator> <call><name>lpGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>,<argument><expr><name>intbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>createStringObject</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>vstr</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lpNext</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Not handled encoding in SCAN."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>kobj</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>nextnode</name> <operator>=</operator> <call><name>listNextNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>use_pattern</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>kobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stringmatchlen</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>, <argument><expr><name><name>kobj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>kobj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>kobj</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>kobj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stringmatchlen</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>filter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name> <operator>&amp;&amp;</operator> <name>o</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>typename</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>robj</name><modifier>*</modifier></type> <name>typecheck</name> <init>= <expr><call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>kobj</name></expr></argument>, <argument><expr><name>LOOKUP_NOTOUCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>type</name> <init>= <expr><call><name>getObjectTypeName</name><argument_list>(<argument><expr><name>typecheck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>typename</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>filter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name> <operator>&amp;&amp;</operator> <name>o</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>expireIfNeeded</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>kobj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>filter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>kobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>nextnode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nextnode</name> <operator>=</operator> <call><name>listNextNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kobj</name> <operator>=</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>kobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>nextnode</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>kobj</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>kobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>kobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name>keys</name></expr></argument>,<argument><expr><name>decrRefCountVoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>scanCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cursor</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parseScanCursorOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>scanGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dbsizeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>lastsaveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lastsave</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>char</name><modifier>*</modifier></type> <name>getObjectTypeName</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch<condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_STRING</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"string"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_LIST</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"list"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_SET</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"set"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_ZSET</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"zset"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_HASH</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"hash"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"stream"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_MODULE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>mv</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>typeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>LOOKUP_NOTOUCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>getObjectTypeName</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>shutdownCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SHUTDOWN_NOFLAGS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abort</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"nosave"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SHUTDOWN_NOSAVE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"save"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SHUTDOWN_SAVE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SHUTDOWN_NOW</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"force"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SHUTDOWN_FORCE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"abort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>abort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>!=</operator> <name>SHUTDOWN_NOFLAGS</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SHUTDOWN_NOSAVE</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>SHUTDOWN_SAVE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>abort</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>abortShutdown</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"No shutdown in progress."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SHUTDOWN_NOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_DENY_BLOCKING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"SHUTDOWN without NOW or ABORT isn't allowed for DENY BLOCKING client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SHUTDOWN_NOSAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>scriptIsTimedout</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>busy_module_yield_reply</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"-BUSY %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>slowmoduleerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>scriptIsEval</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>slowevalerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>slowscripterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>blockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BLOCKED_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>prepareForShutdown</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>renameGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>expire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samekey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdscmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>samekey</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookupKeyWriteOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nokeyerr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>samekey</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name>nx</name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expire</name> <operator>=</operator> <call><name>getExpire</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dbDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dbDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"rename_from"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"rename_to"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name>nx</name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>renameCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>renameGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>renamenxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>renameGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>moveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcid</name></decl>, <decl><type ref="prev"/><name>dbid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>expire</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"MOVE is not allowed in cluster mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcid</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getIntFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>selectDb</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DB index is out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>srcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>sameobjecterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>expire</name> <operator>=</operator> <call><name>getExpire</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>dst</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbDelete</name><argument_list>(<argument><expr><name>src</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>dst</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,
<argument><expr><literal type="string">"move_from"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>src</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,
<argument><expr><literal type="string">"move_to"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>copyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcid</name></decl>, <decl><type ref="prev"/><name>dbid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>expire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>replace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcid</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dbid</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>additional</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>additional</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getIntFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>selectDb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DB index is out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>srcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>srcid</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>dbid</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Copying to another database is not allowed in cluster mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>newkey</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>dst</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>sdscmp</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>newkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>sameobjecterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>lookupKeyRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>expire</name> <operator>=</operator> <call><name>getExpire</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name>newkey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>replace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delete</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>newobj</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_STRING</name></expr>:</case> <expr_stmt><expr><name>newobj</name> <operator>=</operator> <call><name>dupStringObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_LIST</name></expr>:</case> <expr_stmt><expr><name>newobj</name> <operator>=</operator> <call><name>listTypeDup</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_SET</name></expr>:</case> <expr_stmt><expr><name>newobj</name> <operator>=</operator> <call><name>setTypeDup</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_ZSET</name></expr>:</case> <expr_stmt><expr><name>newobj</name> <operator>=</operator> <call><name>zsetDup</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_HASH</name></expr>:</case> <expr_stmt><expr><name>newobj</name> <operator>=</operator> <call><name>hashTypeDup</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_STREAM</name></expr>:</case> <expr_stmt><expr><name>newobj</name> <operator>=</operator> <call><name>streamDup</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>OBJ_MODULE</name></expr>:</case>
<expr_stmt><expr><name>newobj</name> <operator>=</operator> <call><name>moduleTypeDupOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newobj</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"unknown type object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>delete</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dbDelete</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name>newkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name>newkey</name></expr></argument>,<argument><expr><name>newobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>dst</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"copy_to"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>scanDatabaseForReadyLists</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>blocking_keys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kde</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>signalKeyAsReady</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>dbSwapDatabases</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>id1</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name> <operator>||</operator>
<name>id2</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>id2</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id1</name> <operator>==</operator> <name>id2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_OK</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>redisDb</name></type> <name>aux</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>id1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db1</name> <init>= <expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>id1</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>db2</name> <init>= <expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>id2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>db1</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name><name>db2</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db1</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name><name>db2</name><operator>-&gt;</operator><name>expires</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db1</name><operator>-&gt;</operator><name>avg_ttl</name></name> <operator>=</operator> <name><name>db2</name><operator>-&gt;</operator><name>avg_ttl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db1</name><operator>-&gt;</operator><name>expires_cursor</name></name> <operator>=</operator> <name><name>db2</name><operator>-&gt;</operator><name>expires_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db2</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name><name>aux</name><operator>.</operator><name>dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db2</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name><name>aux</name><operator>.</operator><name>expires</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db2</name><operator>-&gt;</operator><name>avg_ttl</name></name> <operator>=</operator> <name><name>aux</name><operator>.</operator><name>avg_ttl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db2</name><operator>-&gt;</operator><name>expires_cursor</name></name> <operator>=</operator> <name><name>aux</name><operator>.</operator><name>expires_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanDatabaseForReadyLists</name><argument_list>(<argument><expr><name>db1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>touchAllWatchedKeysInDb</name><argument_list>(<argument><expr><name>db1</name></expr></argument>, <argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanDatabaseForReadyLists</name><argument_list>(<argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>touchAllWatchedKeysInDb</name><argument_list>(<argument><expr><name>db2</name></expr></argument>, <argument><expr><name>db1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>swapMainDbWithTempDb</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>tempDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clusterSlotToKeyMapping</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>slots_to_keys</name></name> <operator>=</operator> <name><name>tempDb</name><operator>-&gt;</operator><name>slots_to_keys</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tempDb</name><operator>-&gt;</operator><name>slots_to_keys</name></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>redisDb</name></type> <name>aux</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>activedb</name> <init>= <expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newdb</name> <init>= <expr><operator>&amp;</operator><name><name>tempDb</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>activedb</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name><name>newdb</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activedb</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name><name>newdb</name><operator>-&gt;</operator><name>expires</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activedb</name><operator>-&gt;</operator><name>avg_ttl</name></name> <operator>=</operator> <name><name>newdb</name><operator>-&gt;</operator><name>avg_ttl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activedb</name><operator>-&gt;</operator><name>expires_cursor</name></name> <operator>=</operator> <name><name>newdb</name><operator>-&gt;</operator><name>expires_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newdb</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name><name>aux</name><operator>.</operator><name>dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newdb</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name><name>aux</name><operator>.</operator><name>expires</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newdb</name><operator>-&gt;</operator><name>avg_ttl</name></name> <operator>=</operator> <name><name>aux</name><operator>.</operator><name>avg_ttl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newdb</name><operator>-&gt;</operator><name>expires_cursor</name></name> <operator>=</operator> <name><name>aux</name><operator>.</operator><name>expires_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanDatabaseForReadyLists</name><argument_list>(<argument><expr><name>activedb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>touchAllWatchedKeysInDb</name><argument_list>(<argument><expr><name>activedb</name></expr></argument>, <argument><expr><name>newdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>trackingInvalidateKeysOnFlush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushSlaveKeysWithExpireList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>swapdbCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id1</name></decl>, <decl><type ref="prev"/><name>id2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SWAPDB is not allowed in cluster mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getIntFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id1</name></expr></argument>,
<argument><expr><literal type="string">"invalid first DB index"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getIntFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id2</name></expr></argument>,
<argument><expr><literal type="string">"invalid second DB index"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dbSwapDatabases</name><argument_list>(<argument><expr><name>id1</name></expr></argument>,<argument><expr><name>id2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DB index is out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleSwapDbInfo</name></type> <name>si</name> <init>= <expr><block>{<expr><name>REDISMODULE_SWAPDBINFO_VERSION</name></expr>,<expr><name>id1</name></expr>,<expr><name>id2</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_SWAPDB</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>removeExpire</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>setExpire</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>when</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><name>kde</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>kde</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictAddOrFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,<argument><expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetSignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>,<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>writable_slave</name> <init>= <expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>writable_slave</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rememberSlaveKeyWithExpire</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>getExpire</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dictGetSignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>deleteExpiredKeyAndPropagate</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>expire_latency</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>latencyStartMonitor</name><argument_list>(<argument><expr><name>expire_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbAsyncDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbSyncDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>latencyEndMonitor</name><argument_list>(<argument><expr><name>expire_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"expire-del"</literal></expr></argument>,<argument><expr><name>expire_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_EXPIRED</name></expr></argument>,<argument><expr><literal type="string">"expired"</literal></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>,<argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>propagateDeletion</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expiredkeys</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>propagateDeletion</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lazy</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>lazy</name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>unlink</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>del</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_replication_allowed</name> <init>= <expr><name><name>server</name><operator>.</operator><name>replication_allowed</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>replication_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alsoPropagate</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>replication_allowed</name></name> <operator>=</operator> <name>prev_replication_allowed</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>keyIsExpired</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>when</name> <init>= <expr><call><name>getExpire</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>when</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>script_caller</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>scriptTimeSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>fixed_time_expire</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>mstime</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>now</name> <operator>&gt;</operator> <name>when</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>expireIfNeeded</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_delete_expired</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>keyIsExpired</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_delete_expired</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>checkClientPauseTimeoutAndReturnIfPaused</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>deleteExpiredKeyAndPropagate</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>keyReference</name> <modifier>*</modifier></type><name>getKeysPrepareResult</name><parameter_list>(<parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numkeys</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>result</name><operator>-&gt;</operator><name>keys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>keysbuf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numkeys</name> <operator>&gt;</operator> <name><name>result</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name> <operator>!=</operator> <name><name>result</name><operator>-&gt;</operator><name>keysbuf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name>numkeys</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keyReference</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>numkeys</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keyReference</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>keysbuf</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keyReference</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>numkeys</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int64_t</name></type> <name>getAllKeySpecsFlags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>keySpec</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><name>inv</name></expr>?</condition><then> <expr><operator>~</operator><name><name>spec</name><operator>-&gt;</operator><name>flags</name></name></expr> </then><else>: <expr><name><name>spec</name><operator>-&gt;</operator><name>flags</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>getKeysUsingKeySpecs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>first</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>keySpec</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>begin_search_type</name></name> <operator>!=</operator> <name>KSPEC_BS_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CMD_KEY_CHANNEL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>search_flags</name> <operator>&amp;</operator> <name>GET_KEYSPEC_INCLUDE_CHANNELS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>begin_search_type</name></name> <operator>==</operator> <name>KSPEC_BS_INDEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>begin_search_type</name></name> <operator>==</operator> <name>KSPEC_BS_KEYWORD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start_index</name> <init>= <expr><ternary><condition><expr><name><name>spec</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>startfrom</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>spec</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>startfrom</name></name></expr> </then><else>: <expr><name>argc</name><operator>+</operator><name><name>spec</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>startfrom</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_index</name> <init>= <expr><ternary><condition><expr><name><name>spec</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>startfrom</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_index</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>end_index</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>start_index</name> <operator>&lt;=</operator> <name>end_index</name></expr> ?</condition><then> <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>argc</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>invalid_spec</name>;</goto>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>find_keys_type</name></name> <operator>==</operator> <name>KSPEC_FK_RANGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>keystep</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>first</name> <operator>+</operator> <name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>argc</name> <operator>+</operator> <name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>first</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>argc</name><operator>-</operator><name>first</name><operator>)</operator><operator>/</operator><name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>limit</name></name> <operator>+</operator> <name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>find_keys_type</name></name> <operator>==</operator> <name>KSPEC_FK_KEYNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>keystep</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>numkeys</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>keynumidx</name></name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_spec</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>keynum_str</name> <init>= <expr><name><name>argv</name><index>[<expr><name>first</name> <operator>+</operator> <name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>keynumidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string2ll</name><argument_list>(<argument><expr><name>keynum_str</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>keynum_str</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>numkeys</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>numkeys</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>invalid_spec</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>+=</operator> <name><name>spec</name><operator>-&gt;</operator><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>firstkey</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>first</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>numkeys</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>invalid_spec</name>;</goto>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>(</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>argc</name> <operator>||</operator> <name>last</name> <operator>&lt;</operator> <name>first</name> <operator>||</operator> <name>first</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>invalid_spec</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>argc</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name> <operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Redis built-in command declared keys positions not matching the arity requirements."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<continue>continue;</continue>
<label><name>invalid_spec</name>:</label>
<if_stmt><if>if <condition>(<expr><name>search_flags</name> <operator>&amp;</operator> <name>GET_KEYSPEC_RETURN_PARTIAL</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>getKeysFromCommandWithSpecs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE_GETKEYS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>moduleGetCommandKeysViaAPI</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getAllKeySpecsFlags</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>CMD_KEY_INCOMPLETE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>getKeysUsingKeySpecs</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>search_flags</name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>doesCommandHaveKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE_GETKEYS</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>getAllKeySpecsFlags</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>CMD_KEY_CHANNEL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>getKeysUsingLegacyRangeSpec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>first</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>begin_search_type</name></name> <operator>==</operator> <name>KSPEC_BS_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>+=</operator> <name>first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>keystep</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>argc</name><operator>+</operator><name>last</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>(</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>last</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>argc</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name> <operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Redis built-in command declared keys positions not matching the arity requirements."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>getKeysFromCommand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE_GETKEYS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>moduleGetCommandKeysViaAPI</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>getKeysUsingLegacyRangeSpec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>getKeysFreeResult</name><parameter_list>(<parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>keys</name></name> <operator>!=</operator> <name><name>result</name><operator>-&gt;</operator><name>keysbuf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>genericGetKeys</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>storeKeyOfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyCountOfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstKeyOfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyStep</name></decl></parameter>,
<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>keyCountOfs</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>num</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>num</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>argc</name> <operator>-</operator> <name>firstKeyOfs</name></expr></argument>)</argument_list></call><operator>/</operator><name>keyStep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numkeys</name> <init>= <expr><ternary><condition><expr><name>storeKeyOfs</name></expr> ?</condition><then> <expr><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>num</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <name>numkeys</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>firstKeyOfs</name><operator>+</operator><operator>(</operator><name>i</name><operator>*</operator><name>keyStep</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>storeKeyOfs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>storeKeyOfs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sintercardGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>zunionInterDiffStoreGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>zunionInterDiffGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>evalGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>functionGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>lmpopGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>blmpopGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>zmpopGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>bzmpopGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>genericGetKeys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sortROGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>CMD_KEY_RO</name> <operator>|</operator> <name>CMD_KEY_ACCESS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sortGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>num</name></decl>, <decl><type ref="prev"/><name>found_store</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>num</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>CMD_KEY_RO</name> <operator>|</operator> <name>CMD_KEY_ACCESS</name></expr>;</expr_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>
}</block> <decl><name><name>skiplist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"limit"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"get"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"by"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>skiplist</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name><name>skiplist</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>skiplist</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>skip</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"store"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_store</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>CMD_KEY_OW</name> <operator>|</operator> <name>CMD_KEY_UPDATE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <name>num</name> <operator>+</operator> <name>found_store</name></expr>;</expr_stmt>
<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>migrateGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"keys"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name>argc</name><operator>-</operator><name>first</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>first</name><operator>+</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>CMD_KEY_RW</name> <operator>|</operator> <name>CMD_KEY_ACCESS</name> <operator>|</operator> <name>CMD_KEY_DELETE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>georadiusGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stored_key</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"store"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"storedist"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>argc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stored_key</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>stored_key</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>stored_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>xreadGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>streams_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"noack"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"streams"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>streams_pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>streams_pos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>num</name> <operator>=</operator> <name>argc</name> <operator>-</operator> <name>streams_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>streams_pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>num</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysPrepareResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>streams_pos</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name><operator>-</operator><name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name><operator>-</operator><name>streams_pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name><operator>-</operator><name>streams_pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numkeys</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>
</unit>
