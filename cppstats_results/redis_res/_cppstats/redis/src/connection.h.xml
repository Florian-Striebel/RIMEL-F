<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/connection.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_INFO_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<struct_decl>struct <name>aeEventLoop</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>connection</name></name></type> <name>connection</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>CONN_STATE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CONN_STATE_CONNECTING</name></decl>,
<decl><name>CONN_STATE_ACCEPTING</name></decl>,
<decl><name>CONN_STATE_CONNECTED</name></decl>,
<decl><name>CONN_STATE_CLOSED</name></decl>,
<decl><name>CONN_STATE_ERROR</name></decl>
}</block></enum></type> <name>ConnectionState</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_FLAG_CLOSE_SCHEDULED</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_FLAG_WRITE_BARRIER</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_TYPE_SOCKET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_TYPE_TLS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ConnectionCallbackFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>ConnectionType</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ae_handler</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>connect</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>connect_handler</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accept</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>accept_handler</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>set_write_handler</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>barrier</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>set_read_handler</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>handler</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_last_error</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>blocking_connect</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>sync_write</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>sync_read</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>sync_readline</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_type</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>ConnectionType</name>;</typedef>
<struct>struct <name>connection</name> <block>{
<decl_stmt><decl><type><name>ConnectionType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConnectionState</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name>refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConnectionCallbackFunc</name></type> <name>conn_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConnectionCallbackFunc</name></type> <name>write_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConnectionCallbackFunc</name></type> <name>read_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connAccept</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>accept_handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>accept</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>accept_handler</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connConnect</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_addr</name></decl></parameter>,
<parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>connect_handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>connect</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>connect_handler</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connBlockingConnect</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>blocking_connect</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connWrite</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connRead</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connSetWriteHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>set_write_handler</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connSetReadHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>set_read_handler</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connSetWriteHandlerWithBarrier</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ConnectionCallbackFunc</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>barrier</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>set_write_handler</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>barrier</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>connClose</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connGetLastError</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>get_last_error</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>connSyncWrite</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>sync_write</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>connSyncRead</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>sync_read</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>connSyncReadLine</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>sync_readline</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connGetType</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>get_type</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>connLastErrorRetryable</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>last_errno</name></name> <operator>==</operator> <name>EINTR</name></expr>;</return>
</block_content>}</block></function>
<function_decl><type><name>connection</name> <modifier>*</modifier></type><name>connCreateSocket</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>connection</name> <modifier>*</modifier></type><name>connCreateAcceptedSocket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>connection</name> <modifier>*</modifier></type><name>connCreateTLS</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>connection</name> <modifier>*</modifier></type><name>connCreateAcceptedTLS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>require_auth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>connSetPrivateData</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>connGetPrivateData</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connGetState</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connHasWriteHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connHasReadHandler</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connGetSocketError</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connBlock</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connNonBlock</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connEnableTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connDisableTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connKeepAlive</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connSendTimeout</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ms</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connRecvTimeout</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ms</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connPeerToString</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ip_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connFormatFdAddr</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_to_str_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>connSockName</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ip_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connGetInfo</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>connTLSGetPeerCert</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tlsHasPendingData</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tlsProcessPendingData</name><parameter_list>()</parameter_list>;</function_decl>
</unit>
