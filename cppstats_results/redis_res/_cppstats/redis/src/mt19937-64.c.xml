<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/mt19937-64.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mt19937-64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN</name></cpp:macro> <cpp:value>312</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM</name></cpp:macro> <cpp:value>156</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATRIX_A</name></cpp:macro> <cpp:value>0xB5026F5AA96619E9ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UM</name></cpp:macro> <cpp:value>0xFFFFFFFF80000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LM</name></cpp:macro> <cpp:value>0x7FFFFFFFULL</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>mt</name><index>[<expr><name>NN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mti</name><init>=<expr><name>NN</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init_genrand64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mti</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>mti</name><operator>&lt;</operator><name>NN</name></expr>;</condition> <incr><expr><name>mti</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>mti</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">6364136223846793005ULL</literal> <operator>*</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>mti</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>mti</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>mti</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>init_by_array64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>init_key</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>key_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_genrand64</name><argument_list>(<argument><expr><literal type="number">19650218ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>NN</name><operator>&gt;</operator><name>key_length</name></expr> ?</condition><then> <expr><name>NN</name></expr> </then><else>: <expr><name>key_length</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>mt</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">3935559000370003845ULL</literal><operator>)</operator><operator>)</operator>
<operator>+</operator> <name><name>init_key</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>&gt;=</operator><name>NN</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>NN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name><operator>&gt;=</operator><name>key_length</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>NN</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>mt</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2862933555777941757ULL</literal><operator>)</operator><operator>)</operator>
<operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>&gt;=</operator><name>NN</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>NN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>genrand64_int64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>mag01</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0ULL</literal></expr>, <expr><name>MATRIX_A</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mti</name> <operator>&gt;=</operator> <name>NN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mti</name> <operator>==</operator> <name>NN</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_genrand64</name><argument_list>(<argument><expr><literal type="number">5489ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>NN</name><operator>-</operator><name>MM</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><name>UM</name><operator>)</operator><operator>|</operator><operator>(</operator><name><name>mt</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><name>LM</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>i</name><operator>+</operator><name>MM</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1ULL</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>NN</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><name>UM</name><operator>)</operator><operator>|</operator><operator>(</operator><name><name>mt</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><name>LM</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>MM</name><operator>-</operator><name>NN</name><operator>)</operator></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1ULL</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>NN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><name>UM</name><operator>)</operator><operator>|</operator><operator>(</operator><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><name>LM</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>NN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>MM</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1ULL</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mti</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>mti</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>^=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x5555555555555555ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>^=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x71D67FFFEDA60000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>^=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">37</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF7EEE000000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>^=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">43</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>genrand64_int63</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><call><name>genrand64_int64</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>double</name></type> <name>genrand64_real1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>genrand64_int64</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">9007199254740991.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>double</name></type> <name>genrand64_real2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>genrand64_int64</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">9007199254740992.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>double</name></type> <name>genrand64_real3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><call><name>genrand64_int64</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">4503599627370496.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MT19937_64_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>init</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0x12345ULL</literal></expr>, <expr><literal type="number">0x23456ULL</literal></expr>, <expr><literal type="number">0x34567ULL</literal></expr>, <expr><literal type="number">0x45678ULL</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>length</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_by_array64</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1000 outputs of genrand64_int64()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%20llu "</literal></expr></argument>, <argument><expr><call><name>genrand64_int64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">5</literal><operator>==</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n1000 outputs of genrand64_real2()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%10.8f "</literal></expr></argument>, <argument><expr><call><name>genrand64_real2</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">5</literal><operator>==</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
