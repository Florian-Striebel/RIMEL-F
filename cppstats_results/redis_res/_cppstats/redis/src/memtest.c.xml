<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/memtest.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stropts.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ULONG_MAX</name> <operator>==</operator> <literal type="number">4294967295UL</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_32BIT</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>ULONG_MAX</name> <operator>==</operator> <literal type="number">18446744073709551615ULL</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_64BIT</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"ULONG_MAX value not supported."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEMTEST_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_ONEZERO</name></cpp:macro> <cpp:value>0xaaaaaaaaUL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_ZEROONE</name></cpp:macro> <cpp:value>0x55555555UL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_ONEZERO</name></cpp:macro> <cpp:value>0xaaaaaaaaaaaaaaaaUL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_ZEROONE</name></cpp:macro> <cpp:value>0x5555555555555555UL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>no_sanitize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_SANITIZE</name><parameter_list>(<parameter><type><name>sanitizer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((no_sanitize(sanitizer)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SANITIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_SANITIZE</name><parameter_list>(<parameter><type><name>sanitizer</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>progress_printed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>progress_full</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>memtest_progress_start</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[H\x1b[2J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name><operator>*</operator><operator>(</operator><name><name>ws</name><operator>.</operator><name>ws_row</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Please keep the test running several minutes per GB of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[H\x1b[2K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s [%d]\n"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>progress_printed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>progress_full</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ws</name><operator>.</operator><name>ws_col</name></name><operator>*</operator><operator>(</operator><name><name>ws</name><operator>.</operator><name>ws_row</name></name><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>memtest_progress_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[H\x1b[2J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>memtest_progress_step</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>curr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>chars</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>curr</name><operator>*</operator><name>progress_full</name><operator>)</operator><operator>/</operator><name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chars</name><operator>-</operator><name>progress_printed</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>progress_printed</name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>memtest_addressing</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>words</name> <init>= <expr><name>bytes</name><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>words</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n*** MEMORY ADDRESSING ERROR: %p contains %lu\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><name>words</name></expr></argument>,<argument><expr><name>words</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xorshift64star_next</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { rseed ^= rseed &gt;&gt; 12; rseed ^= rseed &lt;&lt; 25; rseed ^= rseed &gt;&gt; 27; rout = rseed * UINT64_C(2685821657736338717); } while(0)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>memtest_fill_random</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>step</name> <init>= <expr><literal type="number">4096</literal><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>words</name> <init>= <expr><name>bytes</name><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>iwords</name> <init>= <expr><name>words</name><operator>/</operator><name>step</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rseed</name> <init>= <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xd13133de9afdb566</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>bytes</name> <operator>&amp;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <name>l</name><operator>+</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <name>l1</name><operator>+</operator><name>words</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>iwords</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xorshift64star_next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l1</name> <operator>=</operator> <operator>*</operator><name>l2</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>rout</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>w</name><operator>+</operator><name>iwords</name><operator>*</operator><name>off</name></expr></argument>,<argument><expr><name>words</name></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>memtest_fill_value</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>v1</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sym</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>step</name> <init>= <expr><literal type="number">4096</literal><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>words</name> <init>= <expr><name>bytes</name><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>iwords</name> <init>= <expr><name>words</name><operator>/</operator><name>step</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>bytes</name> <operator>&amp;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <name>l</name><operator>+</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <name>l1</name><operator>+</operator><name>words</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>v2</name></expr> </then><else>: <expr><name>v1</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>iwords</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEMTEST_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>l1</name> <operator>=</operator> <operator>*</operator><name>l2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>v</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>l1</name> <operator>=</operator> <operator>*</operator><name>l2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>v</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>l1</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>w</name><operator>+</operator><name>iwords</name><operator>*</operator><name>off</name></expr></argument>,<argument><expr><name>words</name></expr></argument>,<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>memtest_compare</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>words</name> <init>= <expr><name>bytes</name><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>bytes</name> <operator>&amp;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <name>l1</name><operator>+</operator><name>words</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l1</name> <operator>!=</operator> <operator>*</operator><name>l2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n*** MEMORY ERROR DETECTED: %p != %p (%lu vs %lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>l1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>l2</name></expr></argument>, <argument><expr><operator>*</operator><name>l1</name></expr></argument>, <argument><expr><operator>*</operator><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l1</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>words</name></expr></argument>,<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>memtest_compare_times</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>times</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>times</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Compare"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>memtest_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pass</name> <operator>!=</operator> <name>passes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Addressing test"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_addressing</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Random fill"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memtest_fill_random</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Solid fill"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memtest_fill_value</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Checkerboard fill"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memtest_fill_value</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>ULONG_ONEZERO</name></expr></argument>,<argument><expr><name>ULONG_ZEROONE</name></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_BACKUP_WORDS</name></cpp:macro> <cpp:value>(1024*(1024/sizeof(long)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_DECACHE_SIZE</name></cpp:macro> <cpp:value>(1024*8)</cpp:value></cpp:define>
<macro><name>NO_SANITIZE</name><argument_list>(<argument><literal type="string">"undefined"</literal></argument>)</argument_list></macro>
<function><type><name>int</name></type> <name>memtest_preserving_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>backup</name><index>[<expr><name>MEMTEST_BACKUP_WORDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>m</name><operator>)</operator><operator>+</operator><operator>(</operator><name>bytes</name><operator>-</operator><name>MEMTEST_DECACHE_SIZE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&amp;</operator> <literal type="number">4095</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">4096</literal><operator>*</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>left</name> <operator>+=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>-=</operator> <literal type="number">4096</literal><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>left</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name><operator>/</operator><literal type="number">4096</literal> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>backup</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>pass</name> <operator>!=</operator> <name>passes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_addressing</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memtest_fill_random</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <name>MEMTEST_DECACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>end</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memtest_fill_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <name>MEMTEST_DECACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>end</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memtest_fill_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>ULONG_ONEZERO</name></expr></argument>,<argument><expr><name>ULONG_ZEROONE</name></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <name>MEMTEST_DECACHE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>end</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>backup</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>memtest_alloc_and_test</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>megabytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><name>megabytes</name><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Unable to allocate %zu megabytes: %s"</literal></expr></argument>,
<argument><expr><name>megabytes</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memtest_test</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>passes</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>memtest</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>megabytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memtest_alloc_and_test</name><argument_list>(<argument><expr><name>megabytes</name></expr></argument>,<argument><expr><name>passes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nYour memory passed this test.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Please if you are still in doubt use the following two tools:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1) memtest86: http://www.memtest86.com/\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"2) memtester: http://pyropus.ca/software/memtester/\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
