<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/anet.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"anet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name></type> <name>anetSetError</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>ANET_ERR_LEN</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetSetBlock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>non_block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"fcntl(F_GETFL): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name><operator>)</operator> <operator>==</operator> <operator>!</operator><operator>!</operator><name>non_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANET_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>non_block</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NONBLOCK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"fcntl(F_SETFL,O_NONBLOCK): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetNonBlock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>anetSetBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetBlock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>anetSetBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetCloexec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <name>FD_CLOEXEC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>r</name> <operator>|</operator> <name>FD_CLOEXEC</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetKeepAlive</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_KEEPALIVE: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPIDLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt TCP_KEEPIDLE: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>interval</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPINTVL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt TCP_KEEPINTVL: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPCNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt TCP_KEEPCNT: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>interval</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetSetTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt TCP_NODELAY: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetEnableTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>anetSetTcpNoDelay</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetDisableTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>anetSetTcpNoDelay</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetSendTimeout</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>ms</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>ms</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDTIMEO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_SNDTIMEO: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetRecvTimeout</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>ms</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>ms</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_RCVTIMEO: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetResolve</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ipbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ipbuf_len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ANET_IP_ONLY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name>ipbuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>sin6_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name>ipbuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetSetReuseAddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_REUSEADDR: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetCreateSocket</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"creating socket: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetSetReuseAddr</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANET_CONNECT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANET_CONNECT_NONBLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANET_CONNECT_BE_BINDING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetTcpGenericConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>ANET_ERR</name></expr></init></decl>, <decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>servinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bservinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>portstr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>servinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>servinfo</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetSetReuseAddr</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name> <operator>&amp;&amp;</operator> <call><name>anetNonBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ANET_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>source_addr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>source_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bservinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>bservinfo</name></expr>;</init> <condition><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>bservinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"bind: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ANET_ERR</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"creating socket: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ANET_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>servinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>ANET_ERR</name> <operator>&amp;&amp;</operator> <name>source_addr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_BE_BINDING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>anetTcpGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetTcpNonBlockConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>anetTcpGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>ANET_CONNECT_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetTcpNonBlockBestEffortBindConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>anetTcpGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>source_addr</name></expr></argument>,
<argument><expr><name>ANET_CONNECT_NONBLOCK</name><operator>|</operator><name>ANET_CONNECT_BE_BINDING</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetUnixGenericConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>anetCreateSocket</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ANET_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>&amp;&amp;</operator>
<name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"connect: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetListen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>sa</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"bind: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"listen: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetV6Only</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>IPPROTO_IPV6</name></expr></argument>,<argument><expr><name>IPV6_V6ONLY</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_anetTcpServer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bindaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>_port</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>servinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_port</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>af</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bindaddr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>bindaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bindaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <name>bindaddr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"::*"</literal></expr></argument>, <argument><expr><name>bindaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bindaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>bindaddr</name></expr></argument>,<argument><expr><name>_port</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>servinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>servinfo</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <call><name>anetV6Only</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetSetReuseAddr</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetListen</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>,<argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>ANET_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to bind socket, errno: %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ANET_ERR</name></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>servinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetTcpServer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bindaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_anetTcpServer</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>bindaddr</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetTcp6Server</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bindaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_anetTcpServer</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>bindaddr</name></expr></argument>, <argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetUnixServer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><literal type="string">"unix socket path too long (%zu), must be under %zu"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>anetCreateSocket</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetListen</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>perm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>chmod</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetGenericAccept</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACCEPT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>accept4</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SOCK_NONBLOCK</name> <operator>|</operator> <name>SOCK_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>sa</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> while<condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"accept: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACCEPT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>anetCloexec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"anetCloexec: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ANET_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ANET_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetTcpAccept</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serversock</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ip_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>salen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>anetGenericAccept</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>serversock</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>salen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin6_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetUnixAccept</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>salen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>anetGenericAccept</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>salen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetFdToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ip_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_to_str_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>salen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd_to_str_type</name> <operator>==</operator> <name>FD_TO_PEER_NAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>salen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>salen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin6_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>ip_len</name></expr></argument>, <argument><expr><literal type="string">"/unixsocket"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>res</name> <operator>&gt;=</operator> <name>ip_len</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ip_len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ip_len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetFormatAddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>buf_len</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><literal type="string">"[%s]:%d"</literal></expr> </then><else>: <expr><literal type="string">"%s:%d"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetFormatFdAddr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_to_str_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>anetFdToString</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,<argument><expr><name>fd_to_str_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>anetFormatAddr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>anetPipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pipe_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pipe_flags</name> <operator>=</operator> <name>O_CLOEXEC</name> <operator>|</operator> <operator>(</operator><name>read_flags</name> <operator>&amp;</operator> <name>write_flags</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pipe2</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>pipe_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOSYS</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pipe_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>O_CLOEXEC</name> <operator>|</operator> <name>read_flags</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>O_CLOEXEC</name> <operator>|</operator> <name>write_flags</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>read_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>pipe_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>write_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>pipe_flags</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pipe_flags</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>pipe</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>read_flags</name> <operator>&amp;</operator> <name>O_CLOEXEC</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>write_flags</name> <operator>&amp;</operator> <name>O_CLOEXEC</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>read_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>O_CLOEXEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_flags</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>read_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>write_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>O_CLOEXEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>write_flags</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>write_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
