<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/atomicvar.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>redisAtomic</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_VAR_FORCE_SYNC_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/helgrind.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANNOTATE_HAPPENS_BEFORE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANNOTATE_HAPPENS_AFTER</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) v)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_VAR_FORCE_SYNC_MACROS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_NO_ATOMICS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>redisAtomic</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>redisAtomic</name></cpp:macro> <cpp:value>_Atomic</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicIncr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_fetch_add_explicit(&amp;var,(count),memory_order_relaxed)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGetIncr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>oldvalue_var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { oldvalue_var = atomic_fetch_add_explicit(&amp;var,(count),memory_order_relaxed); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicDecr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_fetch_sub_explicit(&amp;var,(count),memory_order_relaxed)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGet</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>dstvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dstvar = atomic_load_explicit(&amp;var,memory_order_relaxed); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicSet</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_store_explicit(&amp;var,value,memory_order_relaxed)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGetWithSync</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>dstvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dstvar = atomic_load_explicit(&amp;var,memory_order_seq_cst); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicSetWithSync</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_store_explicit(&amp;var,value,memory_order_seq_cst)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ATOMIC_API</name></cpp:macro> <cpp:value>"c11-builtin"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_VAR_FORCE_SYNC_MACROS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__apple_build_version__</name> <operator>&gt;</operator> <literal type="number">4210057</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicIncr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_add_fetch(&amp;var,(count),__ATOMIC_RELAXED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGetIncr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>oldvalue_var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { oldvalue_var = __atomic_fetch_add(&amp;var,(count),__ATOMIC_RELAXED); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicDecr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_sub_fetch(&amp;var,(count),__ATOMIC_RELAXED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGet</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>dstvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dstvar = __atomic_load_n(&amp;var,__ATOMIC_RELAXED); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicSet</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_store_n(&amp;var,value,__ATOMIC_RELAXED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGetWithSync</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>dstvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dstvar = __atomic_load_n(&amp;var,__ATOMIC_SEQ_CST); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicSetWithSync</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__atomic_store_n(&amp;var,value,__ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ATOMIC_API</name></cpp:macro> <cpp:value>"atomic-builtin"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ATOMIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicIncr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_add_and_fetch(&amp;var,(count))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGetIncr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>oldvalue_var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { oldvalue_var = __sync_fetch_and_add(&amp;var,(count)); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicDecr</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_sub_and_fetch(&amp;var,(count))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGet</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>dstvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dstvar = __sync_sub_and_fetch(&amp;var,0); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicSet</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { while(!__sync_bool_compare_and_swap(&amp;var,var,value)); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicGetWithSync</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>dstvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ dstvar = __sync_sub_and_fetch(&amp;var,0,__sync_synchronize); ANNOTATE_HAPPENS_AFTER(&amp;var); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicSetWithSync</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ANNOTATE_HAPPENS_BEFORE(&amp;var); while(!__sync_bool_compare_and_swap(&amp;var,var,value,__sync_synchronize)); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ATOMIC_API</name></cpp:macro> <cpp:value>"sync-builtin"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unable to determine atomic operations for your platform"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
