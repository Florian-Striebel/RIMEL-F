<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/sentinel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"openssl/ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis_ssl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type><name>redis_tls_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type><name>redis_tls_client_ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_SENTINEL_PORT</name></cpp:macro> <cpp:value>26379</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>sentinelAddr</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
}</block></struct></type> <name>sentinelAddr</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_MASTER</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_SLAVE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_SENTINEL</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_S_DOWN</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_O_DOWN</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_MASTER_DOWN</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_FAILOVER_IN_PROGRESS</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_PROMOTED</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_RECONF_SENT</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_RECONF_INPROG</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_RECONF_DONE</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_FORCE_FAILOVER</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_SCRIPT_KILL_SENT</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_MASTER_REBOOT</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_PING_PERIOD</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_info_period</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_ping_period</name> <init>= <expr><name>SENTINEL_PING_PERIOD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_ask_period</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_publish_period</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_default_down_after</name> <init>= <expr><literal type="number">30000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_tilt_trigger</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_tilt_period</name> <init>= <expr><name>SENTINEL_PING_PERIOD</name> <operator>*</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_slave_reconf_timeout</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_min_link_reconnect_period</name> <init>= <expr><literal type="number">15000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_election_timeout</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_script_max_runtime</name> <init>= <expr><literal type="number">60000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_script_retry_delay</name> <init>= <expr><literal type="number">30000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mstime_t</name></type> <name>sentinel_default_failover_timeout</name> <init>= <expr><literal type="number">60</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_HELLO_CHANNEL</name></cpp:macro> <cpp:value>"__sentinel__:hello"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_SLAVE_PRIORITY</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_PARALLEL_SYNCS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MAX_PENDING_COMMANDS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MAX_DESYNC</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_RESOLVE_HOSTNAMES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_ANNOUNCE_HOSTNAMES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_WAIT_START</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_SELECT_SLAVE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_UPDATE_CONFIG</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MASTER_LINK_STATUS_UP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MASTER_LINK_STATUS_DOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_NO_FLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_GENERATE_EVENT</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_LEADER</name></cpp:macro> <cpp:value>(1&lt;&lt;17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_OBSERVER</name></cpp:macro> <cpp:value>(1&lt;&lt;18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_RUNNING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_QUEUE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_RUNNING</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_RETRY</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SIMFAILURE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>instanceLink</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disconnected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pending_commands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>cc_conn_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>pc_conn_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>pc_last_activity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>last_avail_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>act_ping_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>last_ping_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>last_pong_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>last_reconn_time</name></decl>;</decl_stmt>
}</block></struct></type> <name>instanceLink</name>;</typedef>
<typedef>typedef <type><struct>struct <name>sentinelRedisInstance</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>config_epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>last_pub_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>last_hello_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>last_master_down_reply_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>s_down_since_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>o_down_since_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>down_after_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>master_reboot_down_after_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>master_reboot_since_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>info_refresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>renamed_commands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>role_reported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>role_reported_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>slave_conf_change_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>sentinels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>slaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quorum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parallel_syncs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth_pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>master_link_down_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slave_priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>replica_announced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>slave_reconf_sent_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sentinelRedisInstance</name></name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slave_master_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slave_master_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slave_master_link_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>slave_repl_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>leader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>leader_epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>failover_epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failover_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_state_change_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_delay_logged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sentinelRedisInstance</name></name> <modifier>*</modifier></type><name>promoted_slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>notification_script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_reconfig_script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>info</name></decl>;</decl_stmt>
}</block></struct></type> <name>sentinelRedisInstance</name>;</typedef>
<struct>struct <name>sentinelState</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>myid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>current_epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>masters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tilt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>running_scripts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>tilt_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>previous_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>scripts_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>announce_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>announce_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>simfailure_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deny_scripts_reconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sentinel_auth_pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sentinel_auth_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resolve_hostnames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>announce_hostnames</name></decl>;</decl_stmt>
}</block> <decl><name>sentinel</name></decl>;</struct>
<typedef>typedef <type><struct>struct <name>sentinelScriptJob</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
}</block></struct></type> <name>sentinelScriptJob</name>;</typedef>
<typedef>typedef <type><struct>struct <name>redisAeEvents</name> <block>{
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reading</name></decl>, <name>writing</name>;</decl_stmt>
}</block></struct></type> <name>redisAeEvents</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeReadEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>el</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>fd</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAsyncHandleRead</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeWriteEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>el</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>fd</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAsyncHandleWrite</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeAddRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>reading</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>,<argument><expr><name>redisAeReadEvent</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeDelRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeAddWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>,<argument><expr><name>redisAeWriteEvent</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeDelWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>redisAeDelRead</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAeDelWrite</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>redisAeAttach</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>redisAeAddRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>redisAeDelRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>redisAeAddWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>redisAeDelWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>redisAeCleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function_decl><type><name>void</name></type> <name>sentinelLinkEstablishedCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelDisconnectCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelReceiveHelloMessages</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelGetMasterByName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>sentinelGetSubjectiveLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>sentinelGetObjectiveLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>yesnotoi</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>instanceLinkConnectionError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelRedisInstanceTypeStr</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelAbortFailover</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelSelectSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelScheduleScriptExecution</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelStartFailover</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelDiscardReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sentinelSendSlaveOf</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>sentinelVoteLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>req_epoch</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>req_runid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>leader_epoch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sentinelFlushConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelGenerateInitialMonitorEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sentinelSendPing</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sentinelForceHelloUpdateForMaster</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>getSentinelRedisInstanceByAddrAndRunID</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelSimFailureCrash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>releaseSentinelRedisInstance</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>dictInstancesValDestructor</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>releaseSentinelRedisInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>dictType</name></type> <name>instancesDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictInstancesValDestructor</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictType</name></type> <name>leaderVotesDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictType</name></type> <name>renamedCommandsDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>sentinelSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelConfigGetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelConfigSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>preMonitorCfgName</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"announce-ip"</literal></expr>,
<expr><literal type="string">"announce-port"</literal></expr>,
<expr><literal type="string">"deny-scripts-reconfig"</literal></expr>,
<expr><literal type="string">"sentinel-user"</literal></expr>,
<expr><literal type="string">"sentinel-pass"</literal></expr>,
<expr><literal type="string">"current-epoch"</literal></expr>,
<expr><literal type="string">"myid"</literal></expr>,
<expr><literal type="string">"resolve-hostnames"</literal></expr>,
<expr><literal type="string">"announce-hostnames"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>initSentinelConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>REDIS_SENTINEL_PORT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>protected_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function_decl><type><name>void</name></type> <name>freeSentinelLoadQueueEntry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>initSentinel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>previous_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>=</operator> <name>SENTINEL_SIMFAILURE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_RESOLVE_HOSTNAMES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_hostnames</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_ANNOUNCE_HOSTNAMES</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelCheckConfigFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Sentinel needs config file on disk to save state. Exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>,<argument><expr><name>W_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Sentinel config file %s is not writable: %s. Exiting..."</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelIsRunning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>myid</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Sentinel ID is %s"</literal></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelGenerateInitialMonitorEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>createSentinelAddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>port</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>port</name></expr></argument> &gt;</argument_list></name> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetResolve</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>hostname</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name></expr> ?</condition><then> <expr><name>ANET_NONE</name></expr> </then><else>: <expr><name>ANET_IP_ONLY</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>ip</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<return>return <expr><name>sa</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>dupSentinelAddr</name><parameter_list>(<parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>ip</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
<return>return <expr><name>sa</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>releaseSentinelAddr</name><parameter_list>(<parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelAddrIsEqual</name><parameter_list>(<parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>port</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelAddrEqualsHostname</name><parameter_list>(<parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetResolve</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name></expr> ?</condition><then> <expr><name>ANET_NONE</name></expr> </then><else>: <expr><name>ANET_IP_ONLY</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>announceSentinelAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sentinelAddr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>announce_hostnames</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>hostname</name></name></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>ip</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>sds</name></type> <name>announceSentinelAddrAndPort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sentinelAddr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[%s]:%d"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>LOG_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>payload</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr> ?</condition><then>
<expr><name>NULL</name></expr> </then><else>: <expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>master</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s %s %d @ %s %s %d"</literal></expr></argument>,
<argument><expr><call><name>sentinelRedisInstanceTypeStr</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s %s %d"</literal></expr></argument>,
<argument><expr><call><name>sentinelRedisInstanceTypeStr</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>fmt</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>verbosity</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>level</name></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>type</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>!=</operator> <name>LL_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>msg</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pubsubPublishMessage</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>LL_WARNING</name> <operator>&amp;&amp;</operator> <name>ri</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr> ?</condition><then>
<expr><name>ri</name></expr> </then><else>: <expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>master</name> <operator>&amp;&amp;</operator> <name><name>master</name><operator>-&gt;</operator><name>notification_script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelScheduleScriptExecution</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelGenerateInitialMonitorEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+monitor"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ quorum %d"</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelReleaseScriptJob</name><parameter_list>(<parameter><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_ARGS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>sentinelScheduleScriptExecution</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><name>SENTINEL_SCRIPT_MAX_ARGS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>argc</name> <operator>&lt;</operator> <name>SENTINEL_SCRIPT_MAX_ARGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sj</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>SENTINEL_SCRIPT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>argc</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>argc</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>SENTINEL_SCRIPT_MAX_QUEUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sj</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelReleaseScriptJob</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></while>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator>
<name>SENTINEL_SCRIPT_MAX_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>listNode</name> <modifier>*</modifier></type><name>sentinelGetScriptListNodeByPid</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ln</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelRunPendingScripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name> <operator>&lt;</operator> <name>SENTINEL_SCRIPT_MAX_RUNNING</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>&amp;&amp;</operator> <name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>&gt;</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SENTINEL_SCRIPT_RUNNING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-script-error"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SENTINEL_SCRIPT_RUNNING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tlsCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>execve</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name>environ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"+script-child"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"%ld"</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>mstime_t</name></type> <name>sentinelScriptRetryDelay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>retry_num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>delay</name> <init>= <expr><name>sentinel_script_retry_delay</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>retry_num</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>delay</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>delay</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelCollectTerminatedScripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>statloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>statloc</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exitcode</name> <init>= <expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bysignal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bysignal</name> <operator>=</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-script-child"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"%ld %d %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>, <argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>sentinelGetScriptListNodeByPid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"waitpid() returned a pid (%ld) we can't find in our scripts execution queue!"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sj</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bysignal</name> <operator>||</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name> <operator>!=</operator> <name>SENTINEL_SCRIPT_MAX_RETRY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SENTINEL_SCRIPT_RUNNING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>+</operator>
<call><name>sentinelScriptRetryDelay</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bysignal</name> <operator>||</operator> <name>exitcode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-script-error"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>, <argument><expr><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelReleaseScriptJob</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelKillTimedoutScripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>now</name> <operator>-</operator> <name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>sentinel_script_max_runtime</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-script-timeout"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"%s %ld"</literal></expr></argument>,
<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,<argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelPendingScriptsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"argv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"running"</literal></expr> </then><else>: <expr><literal type="string">"scheduled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"run-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>delay</name> <init>= <expr><ternary><condition><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name><operator>-</operator><call><name>mstime</name><argument_list>()</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"run-delay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"retry-num"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelCallClientReconfScript</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fromport</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>toport</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>client_reconfig_script</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>fromport</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fromport</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>from</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>toport</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>toport</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>to</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelScheduleScriptExecution</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>role</name> <operator>==</operator> <name>SENTINEL_LEADER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"leader"</literal></expr> </then><else>: <expr><literal type="string">"observer"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fromport</name></expr></argument>,
<argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>toport</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>instanceLink</name> <modifier>*</modifier></type><name>createInstanceLink</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>link</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc_conn_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc_conn_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_reconn_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc_last_activity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>link</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>instanceLinkCloseConnection</name><parameter_list>(<parameter><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAsyncFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>instanceLink</name> <modifier>*</modifier></type><name>releaseInstanceLink</name><parameter_list>(<parameter><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCallbackList</name> <modifier>*</modifier></type><name>callbacks</name> <init>= <expr><operator>&amp;</operator><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>replies</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>callbacks</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>privdata</name></name> <operator>==</operator> <name>ri</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>sentinelDiscardReplyCallback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>privdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>link</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelTryConnectionSharing</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>master</name> <operator>==</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>ri</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>releaseInstanceLink</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelDropConnections</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dropped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>sdi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>sde</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sdi</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>sde</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>sdi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>sde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>link</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>link</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dropped</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>sdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dropped</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelUpdateSentinelAddressInAllMasters</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reconfigured</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,<argument><expr><name><name>match</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>ri</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>dupSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reconfigured</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reconfigured</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+sentinel-address-update"</literal></expr></argument>, <argument><expr><name>ri</name></expr></argument>,
<argument><expr><literal type="string">"%@ %d additional matching instances"</literal></expr></argument>, <argument><expr><name>reconfigured</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>reconfigured</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>instanceLinkConnectionError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pubsub</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pubsub</name> <operator>=</operator> <operator>(</operator><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pubsub</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelLinkEstablishedCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>instanceLinkConnectionError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelDisconnectCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>instanceLinkConnectionError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>createSentinelRedisInstance</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quorum</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsname</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>|</operator><name>SRI_SENTINEL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator> <operator>||</operator> <name>master</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>createSentinelAddr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sdsname</name> <operator>=</operator> <call><name>announceSentinelAddrAndPort</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sdsname</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictFind</name><argument_list>(<argument><expr><name>table</name></expr></argument>,<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>sdsname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <call><name>createInstanceLink</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_hello_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_master_down_reply_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>s_down_since_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>o_down_since_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>=</operator> <ternary><condition><expr><name>master</name></expr> ?</condition><then> <expr><name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name></expr> </then><else>: <expr><name>sentinel_default_down_after</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_reboot_down_after_period</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_priority</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_SLAVE_PRIORITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>replica_announced</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_reconf_sent_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_link_status</name></name> <operator>=</operator> <name>SENTINEL_MASTER_LINK_STATUS_DOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_repl_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <name>quorum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_PARALLEL_SYNCS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>master</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>renamedCommandsDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>=</operator> <name>sentinel_default_failover_timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_delay_logged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ri</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>releaseSentinelRedisInstance</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>releaseInstanceLink</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_PROMOTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelRedisInstanceLookupSlave</name><parameter_list>(
<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>slave_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>createSentinelAddr</name><argument_list>(<argument><expr><name>slave_addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>announceSentinelAddrAndPort</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slave</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>slave</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelRedisInstanceTypeStr</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"master"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"slave"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"sentinel"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="string">"unknown"</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>removeMatchingSentinelFromMaster</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>runid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>,<argument><expr><name>runid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>removed</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>removed</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>getSentinelRedisInstanceByAddrAndRunID</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>instance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>ri_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>addr</name> <operator>||</operator> <name>runid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri_addr</name> <operator>=</operator> <call><name>createSentinelAddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri_addr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>runid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>runid</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>, <argument><expr><name>runid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>addr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>ri_addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>port</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>instance</name> <operator>=</operator> <name>ri</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ri_addr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name>ri_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>instance</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelGetMasterByName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsname</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>,<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ri</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_RESET_NO_SENTINELS</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>sentinelResetMaster</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SENTINEL_RESET_NO_SENTINELS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SRI_MASTER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>=</operator> <name>SRI_MASTER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SENTINEL_GENERATE_EVENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+reset-master"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelResetMastersByPattern</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelResetMaster</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>reset</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelResetMasterAndChangeAddress</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>oldaddr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier><modifier>*</modifier></type><name>slaves</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numslaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newaddr</name> <operator>=</operator> <call><name>createSentinelAddr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newaddr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>slaves</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sentinelAddr</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><call><name>dictSize</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sentinelAddrIsEqual</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,<argument><expr><name>newaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>slaves</name><index>[<expr><name>numslaves</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>dupSentinelAddr</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sentinelAddrIsEqual</name><argument_list>(<argument><expr><name>newaddr</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slaves</name><index>[<expr><name>numslaves</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>dupSentinelAddr</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelResetMaster</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name>SENTINEL_RESET_NO_SENTINELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldaddr</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>newaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>o_down_since_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>s_down_since_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numslaves</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
<expr_stmt><expr><name>slave</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>SRI_SLAVE</name></expr></argument>,<argument><expr><name><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>hostname</name></expr></argument>,
<argument><expr><name><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>port</name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>, <argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slave</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name>oldaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelRedisInstanceNoDownFor</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>most_recent</name></decl>;</decl_stmt>
<expr_stmt><expr><name>most_recent</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>s_down_since_time</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>o_down_since_time</name></name> <operator>&gt;</operator> <name>most_recent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>most_recent</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>o_down_since_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>most_recent</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>most_recent</name><operator>)</operator> <operator>&gt;</operator> <name>ms</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>sentinelGetCurrentMasterAddress</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>&amp;&amp;</operator>
<name><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>&gt;=</operator> <name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelPropagateDownAfterPeriod</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name><name>d</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr>, <expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>sentinelInstanceMapCommand</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sc</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ri</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>retval</name></expr> ?</condition><then> <expr><name>retval</name></expr> </then><else>: <expr><name>command</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelCheckCreateInstanceErrors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EBUSY</name></expr>:</case>
<switch>switch <condition>(<expr><name>role</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SRI_MASTER</name></expr>:</case>
<return>return <expr><literal type="string">"Duplicate master name."</literal></expr>;</return>
<case>case <expr><name>SRI_SLAVE</name></expr>:</case>
<return>return <expr><literal type="string">"Duplicate hostname and port for replica."</literal></expr>;</return>
<case>case <expr><name>SRI_SENTINEL</name></expr>:</case>
<return>return <expr><literal type="string">"Duplicate runid for sentinel."</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>ENOENT</name></expr>:</case>
<return>return <expr><literal type="string">"Can't resolve instance hostname."</literal></expr>;</return>
<case>case <expr><name>EINVAL</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid port number."</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"Unknown Error for creating instances."</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>initializeSentinelConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sentinelConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>monitor_cfg</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>pre_monitor_cfg</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>post_monitor_cfg</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>monitor_cfg</name></name></expr></argument>,<argument><expr><name>freeSentinelLoadQueueEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>pre_monitor_cfg</name></name></expr></argument>,<argument><expr><name>freeSentinelLoadQueueEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>post_monitor_cfg</name></name></expr></argument>,<argument><expr><name>freeSentinelLoadQueueEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>freeSentinelConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>pre_monitor_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>monitor_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>post_monitor_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>searchPreMonitorCfgName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>preMonitorCfgName</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>preMonitorCfgName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>preMonitorCfgName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>freeSentinelLoadQueueEntry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sentinelLoadQueueEntry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>item</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>queueSentinelConfig</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenum</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sentinelLoadQueueEntry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_config</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>initializeSentinelConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sentinelLoadQueueEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>linenum</name></name> <operator>=</operator> <name>linenum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>monitor_cfg</name></name></expr></argument>,<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>searchPreMonitorCfgName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>pre_monitor_cfg</name></name></expr></argument>,<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>post_monitor_cfg</name></name></expr></argument>,<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>loadSentinelConfigFromQueue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_config</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name><name>sentinel_configs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>pre_monitor_cfg</name></name></expr>,
<expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>monitor_cfg</name></name></expr>,
<expr><name><name>server</name><operator>.</operator><name>sentinel_config</name><operator>-&gt;</operator><name>post_monitor_cfg</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sentinel_configs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sentinel_configs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel_configs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sentinelLoadQueueEntry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sentinelHandleConfiguration</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>linenum</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>linenum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<goto>goto <name>loaderr</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><call><name>freeSentinelConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<label><name>loaderr</name>:</label>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n*** FATAL CONFIG FILE ERROR (Redis %s) ***\n"</literal></expr></argument>,
<argument><expr><name>REDIS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Reading the configuration file, at line %d\n"</literal></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; '%s'\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelHandleConfiguration</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>quorum</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>quorum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Quorum must be 1 or greater."</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>SRI_MASTER</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>quorum</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>sentinelCheckCreateInstanceErrors</name><argument_list>(<argument><expr><name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"down-after-milliseconds"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"negative or zero time parameter."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelPropagateDownAfterPeriod</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"failover-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"negative or zero time parameter."</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"parallel-syncs"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"notification-script"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Notification script seems non existing or non executable."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"client-reconfig-script"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Client reconfiguration script seems non existing or "</literal>
<literal type="string">"non executable."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"auth-pass"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"auth-user"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_user</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"current-epoch"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>current_epoch</name> <init>= <expr><call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current_epoch</name> <operator>&gt;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <name>current_epoch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"myid"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Malformed Sentinel id in myid option."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"config-epoch"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>&gt;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"leader-epoch"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"known-slave"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"known-replica"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slave</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>SRI_SLAVE</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>sentinelCheckCreateInstanceErrors</name><argument_list>(<argument><expr><name>SRI_SLAVE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"known-sentinel"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>argc</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>si</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name>SRI_SENTINEL</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>sentinelCheckCreateInstanceErrors</name><argument_list>(<argument><expr><name>SRI_SENTINEL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelTryConnectionSharing</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rename-command"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>oldcmd</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>newcmd</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>,<argument><expr><name>oldcmd</name></expr></argument>,<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>oldcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"Same command renamed multiple times with rename-command."</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"announce-ip"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"announce-port"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"deny-scripts-reconfig"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"Please specify yes or no for the "</literal>
<literal type="string">"deny-scripts-reconfig options."</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"sentinel-user"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"sentinel-pass"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"resolve-hostnames"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"Please specify yes or no for the resolve-hostnames option."</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"announce-hostnames"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sentinel</name><operator>.</operator><name>announce_hostnames</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"Please specify yes or no for the announce-hostnames option."</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"master-reboot-down-after-period"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_reboot_down_after_period</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>master_reboot_down_after_period</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"negative time parameter."</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="string">"Unrecognized sentinel configuration statement."</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rewriteConfigSentinelOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>di2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sentinel myid %s"</literal></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel myid"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sentinel deny-scripts-reconfig %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel deny-scripts-reconfig"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,
<argument><expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name> <operator>!=</operator> <name>SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sentinel resolve-hostnames %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel resolve-hostnames"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,
<argument><expr><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name> <operator>!=</operator> <name>SENTINEL_DEFAULT_RESOLVE_HOSTNAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sentinel announce-hostnames %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>announce_hostnames</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel announce-hostnames"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,
<argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_hostnames</name></name> <operator>!=</operator> <name>SENTINEL_DEFAULT_ANNOUNCE_HOSTNAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>master_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>master_addr</name> <operator>=</operator> <call><name>sentinelGetCurrentMasterAddress</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"sentinel monitor %s %s %d %d"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>master_addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel monitor"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>!=</operator> <name>sentinel_default_down_after</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel down-after-milliseconds %s %ld"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel down-after-milliseconds"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>!=</operator> <name>sentinel_default_failover_timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel failover-timeout %s %ld"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel failover-timeout"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>!=</operator> <name>SENTINEL_DEFAULT_PARALLEL_SYNCS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel parallel-syncs %s %d"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>parallel_syncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel parallel-syncs"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>notification_script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel notification-script %s %s"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel notification-script"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel client-reconfig-script %s %s"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel client-reconfig-script"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>auth_pass</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel auth-pass %s %s"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>auth_pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel auth-pass"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>auth_user</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel auth-user %s %s"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>auth_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel auth-user"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>master_reboot_down_after_period</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel master-reboot-down-after-period %s %ld"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>master_reboot_down_after_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel master-reboot-down-after-period"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel config-epoch %s %llu"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel config-epoch"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel leader-epoch %s %llu"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel leader-epoch"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di2</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>slave_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slave_addr</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sentinelAddrIsEqual</name><argument_list>(<argument><expr><name>slave_addr</name></expr></argument>,<argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slave_addr</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel known-replica %s %s %d"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name>slave_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>slave_addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel known-replica"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di2</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel known-sentinel %s %s %d %s"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel known-sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di2</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>oldname</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>newname</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel rename-command %s %s %s"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>oldname</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel rename-command"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"sentinel current-epoch %llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel current-epoch"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"sentinel announce-ip "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel announce-ip"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel announce-ip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"sentinel announce-port %d"</literal></expr></argument>,
<argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel announce-port"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel announce-port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sentinel sentinel-user %s"</literal></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel sentinel-user"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel sentinel-user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sentinel sentinel-pass %s"</literal></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel sentinel-pass"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel sentinel-pass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel down-after-milliseconds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel failover-timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel parallel-syncs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel notification-script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel client-reconfig-script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel auth-pass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel auth-user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel config-epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel leader-epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel known-replica"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel known-sentinel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel rename-command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel master-reboot-down-after-period"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelFlushConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_hz</name> <init>= <expr><name><name>server</name><operator>.</operator><name>hz</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rewrite_status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_HZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rewrite_status</name> <operator>=</operator> <call><name>rewriteConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>saved_hz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rewrite_status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>,<argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Sentinel new configuration saved on disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
<label><name>werr</name>:</label>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: Sentinel was not able to save the new configuration on disk!!!: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelSendAuthIfNeeded</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth_pass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth_user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth_pass</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_user</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>auth_user</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth_pass</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>auth_pass</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_user</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>auth_user</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth_pass</name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_user</name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>auth_pass</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>requirepass</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_user</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>auth_pass</name> <operator>&amp;&amp;</operator> <name>auth_user</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"AUTH"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>auth_pass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>auth_pass</name> <operator>&amp;&amp;</operator> <name>auth_user</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"AUTH"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>auth_user</name></expr></argument>, <argument><expr><name>auth_pass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelSetClientName</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"sentinel-%.8s-%s"</literal></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>,
<argument><expr><literal type="string">"%s SETNAME %s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"CLIENT"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>instanceLinkNegotiateTLS</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>redis_tls_ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><call><name>SSL_new</name><argument_list>(<argument><expr><ternary><condition><expr><name>redis_tls_client_ctx</name></expr> ?</condition><then> <expr><name>redis_tls_client_ctx</name></expr> </then><else>: <expr><name>redis_tls_ctx</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ssl</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redisInitiateSSL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelReconnectInstance</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_reconn_time</name></name> <operator>&lt;</operator> <name>sentinel_ping_period</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_reconn_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <call><name>redisAsyncConnectBind</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>bind_source_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>anetCloexec</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-cmd-link-reconnection"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ #Failed to establish connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>tls_replication</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>instanceLinkNegotiateTLS</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-cmd-link-reconnection"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ #Failed to initialize TLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-cmd-link-reconnection"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ #%s"</literal></expr></argument>,
<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc_conn_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>link</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAeAttach</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAsyncSetConnectCallback</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelLinkEstablishedCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAsyncSetDisconnectCallback</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelDisconnectCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelSendAuthIfNeeded</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelSetClientName</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,<argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelSendPing</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <call><name>redisAsyncConnectBind</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>bind_source_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>anetCloexec</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-pubsub-link-reconnection"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ #Failed to establish connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>err</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>tls_replication</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>instanceLinkNegotiateTLS</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-pubsub-link-reconnection"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ #Failed to initialize TLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-pubsub-link-reconnection"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ #%s"</literal></expr></argument>,
<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc_conn_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>link</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAeAttach</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAsyncSetConnectCallback</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>,
<argument><expr><name>sentinelLinkEstablishedCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAsyncSetDisconnectCallback</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>,
<argument><expr><name>sentinelDisconnectCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelSendAuthIfNeeded</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelSetClientName</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>,<argument><expr><literal type="string">"pubsub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>,
<argument><expr><name>sentinelReceiveHelloMessages</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"SUBSCRIBE"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SENTINEL_HELLO_CHANNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name> <operator>||</operator> <name><name>link</name><operator>-&gt;</operator><name>pc</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelMasterLooksSane</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return
<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator>
<name><name>master</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>==</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_S_DOWN</name><operator>|</operator><name>SRI_O_DOWN</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>master</name><operator>-&gt;</operator><name>info_refresh</name></name><operator>)</operator> <operator>&lt;</operator> <name>sentinel_info_period</name><operator>*</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelRefreshInstanceInfo</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numlines</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>role</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>numlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numlines</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>l</name> <init>= <expr><name><name>lines</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">47</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"run_id:"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>,<argument><expr><name>l</name><operator>+</operator><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+reboot"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>master_reboot_down_after_period</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_MASTER_REBOOT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_reboot_since_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"slave"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"ip="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>port</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>port</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"ip="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"port="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>port</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>port</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>port</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sentinelRedisInstanceLookupSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slave</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>SRI_SLAVE</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,
<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"master_link_down_since_seconds"</literal></expr></argument>,<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">31</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"role:master"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>role</name> <operator>=</operator> <name>SRI_MASTER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"role:slave"</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>role</name> <operator>=</operator> <name>SRI_SLAVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"master_host:"</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">12</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"master_port:"</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>slave_master_port</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>!=</operator> <name>slave_master_port</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>=</operator> <name>slave_master_port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">19</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"master_link_status:"</literal></expr></argument>,<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_link_status</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="string">"up"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>SENTINEL_MASTER_LINK_STATUS_UP</name></expr> </then><else>:
<expr><name>SENTINEL_MASTER_LINK_STATUS_DOWN</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"slave_priority:"</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_priority</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">18</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"slave_repl_offset:"</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_repl_offset</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">18</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">18</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"replica_announced:"</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>replica_announced</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>lines</name></expr></argument>,<argument><expr><name>numlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>!=</operator> <name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>=</operator> <name>role</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>role</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"+role-change"</literal></expr> </then><else>: <expr><literal type="string">"-role-change"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%@ new reported role is %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>role</name> <operator>==</operator> <name>SRI_MASTER</name></expr> ?</condition><then> <expr><literal type="string">"master"</literal></expr> </then><else>: <expr><literal type="string">"slave"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>role</name> <operator>==</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>role</name> <operator>==</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_PROMOTED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>==</operator>
<name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_epoch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+promoted-slave"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>&amp;</operator>
<name>SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelSimFailureCrash</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+failover-state-reconf-slaves"</literal></expr></argument>,
<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelCallClientReconfScript</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>,<argument><expr><name>SENTINEL_LEADER</name></expr></argument>,
<argument><expr><literal type="string">"start"</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelForceHelloUpdateForMaster</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>wait_time</name> <init>= <expr><name>sentinel_publish_period</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_PROMOTED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>sentinelMasterLooksSane</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>sentinelRedisInstanceNoDownFor</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>&gt;</operator> <name>wait_time</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+convert-to-slave"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>role</name> <operator>==</operator> <name>SRI_SLAVE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>!=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>||</operator>
<operator>!</operator><call><name>sentinelAddrEqualsHostname</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>wait_time</name> <init>= <expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sentinelMasterLooksSane</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>sentinelRedisInstanceNoDownFor</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>&gt;</operator> <name>wait_time</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+fix-slave-config"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>role</name> <operator>==</operator> <name>SRI_SLAVE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_RECONF_SENT</name><operator>|</operator><name>SRI_RECONF_INPROG</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_SENT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>&amp;&amp;</operator>
<call><name>sentinelAddrEqualsHostname</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>==</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_RECONF_SENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_INPROG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave-reconf-inprog"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_INPROG</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>ri</name><operator>-&gt;</operator><name>slave_master_link_status</name></name> <operator>==</operator> <name>SENTINEL_MASTER_LINK_STATUS_UP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_RECONF_INPROG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave-reconf-done"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelInfoReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelRefreshInstanceInfo</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelDiscardReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>link</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelPingReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>||</operator>
<name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ERROR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"PONG"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"LOADING"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"MASTERDOWN"</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER_REBOOT</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"PONG"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_MASTER_REBOOT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"BUSY"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SCRIPT_KILL_SENT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>,
<argument><expr><literal type="string">"%s KILL"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"SCRIPT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_SCRIPT_KILL_SENT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelPublishReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDIS_REPLY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelProcessHelloMessage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hello</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hello_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numtokens</name></decl>, <decl><type ref="prev"/><name>port</name></decl>, <decl><type ref="prev"/><name>removed</name></decl>, <decl><type ref="prev"/><name>master_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>current_epoch</name></decl>, <decl><type ref="prev"/><name>master_config_epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><name>hello_len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numtokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>numtokens</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>master</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>master_port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,<argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_epoch</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>master_config_epoch</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>si</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>removed</name> <operator>=</operator> <call><name>removeMatchingSentinelFromMaster</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>removed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+sentinel-address-switch"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,
<argument><expr><literal type="string">"%@ ip %s port %d for %s"</literal></expr></argument>, <argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>other</name> <init>=
<expr><call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>, <argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+sentinel-invalid-addr"</literal></expr></argument>,<argument><expr><name>other</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>other</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelUpdateSentinelAddressInAllMasters</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>SRI_SENTINEL</name></expr></argument>,
<argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>,<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>si</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>removed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+sentinel"</literal></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelTryConnectionSharing</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>removed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelUpdateSentinelAddressInAllMasters</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>current_epoch</name> <operator>&gt;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <name>current_epoch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+new-epoch"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%llu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>si</name> <operator>&amp;&amp;</operator> <name><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>&lt;</operator> <name>master_config_epoch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>=</operator> <name>master_config_epoch</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>master_port</name> <operator>!=</operator> <name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>||</operator>
<operator>!</operator><call><name>sentinelAddrEqualsHostname</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>token</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>old_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+config-update-from"</literal></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+switch-master"</literal></expr></argument>,
<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%s %s %d %s %d"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><name><name>token</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>master_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_addr</name> <operator>=</operator> <call><name>dupSentinelAddr</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelResetMasterAndChangeAddress</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name><name>token</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>master_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelCallClientReconfScript</name><argument_list>(<argument><expr><name>master</name></expr></argument>,
<argument><expr><name>SENTINEL_OBSERVER</name></expr></argument>,<argument><expr><literal type="string">"start"</literal></expr></argument>,
<argument><expr><name>old_addr</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name>old_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>si</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>last_hello_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>token</name></expr></argument>,<argument><expr><name>numtokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelReceiveHelloMessages</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc_last_activity</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDIS_REPLY_ARRAY</name> <operator>||</operator>
<name><name>r</name><operator>-&gt;</operator><name>elements</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator>
<name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>REDIS_REPLY_STRING</name> <operator>||</operator>
<name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>REDIS_REPLY_STRING</name> <operator>||</operator>
<name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>REDIS_REPLY_STRING</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelProcessHelloMessage</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelSendHello</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>payload</name><index>[<expr><name>NET_IP_STR_LEN</name><operator>+</operator><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>announce_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>announce_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr> ?</condition><then> <expr><name>ri</name></expr> </then><else>: <expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>master_addr</name> <init>= <expr><call><name>sentinelGetCurrentMasterAddress</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>announce_ip</name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>anetFdToString</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>FD_TO_SOCK_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>announce_ip</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>announce_port</name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>tls_replication</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>tls_port</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>announce_port</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>tls_port</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>announce_port</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>payload</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s,%d,%s,%llu,"</literal>
<literal type="string">"%s,%s,%d,%llu"</literal></expr></argument>,
<argument><expr><name>announce_ip</name></expr></argument>, <argument><expr><name>announce_port</name></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>master_addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelPublishReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"PUBLISH"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SENTINEL_HELLO_CHANNEL</name></expr></argument>,<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelForceHelloUpdateDictOfRedisInstances</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>&gt;=</operator> <operator>(</operator><name>sentinel_publish_period</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>-=</operator> <operator>(</operator><name>sentinel_publish_period</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelForceHelloUpdateForMaster</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>&gt;=</operator> <operator>(</operator><name>sentinel_publish_period</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>-=</operator> <operator>(</operator><name>sentinel_publish_period</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelForceHelloUpdateDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelForceHelloUpdateDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelSendPing</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelPingReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelSendPeriodicCommands</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>info_period</name></decl>, <decl><type ref="prev"/><name>ping_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name> <operator>&gt;=</operator>
<name>SENTINEL_MAX_PENDING_COMMANDS</name> <operator>*</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_O_DOWN</name><operator>|</operator><name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>info_period</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>info_period</name> <operator>=</operator> <name>sentinel_info_period</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ping_period</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ping_period</name> <operator>&gt;</operator> <name>sentinel_ping_period</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ping_period</name> <operator>=</operator> <name>sentinel_ping_period</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name><operator>)</operator> <operator>&gt;</operator> <name>info_period</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelInfoReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"INFO"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>ping_period</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>ping_period</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelSendPing</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>sentinel_publish_period</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelSendHello</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelConfigSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>numval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drop_conns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"resolve-hostnames"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>numval</name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>badfmt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"announce-hostnames"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>numval</name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>badfmt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_hostnames</name></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"announce-ip"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"announce-port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numval</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator>
<name><name>numval</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>numval</name></expr></argument> &gt;</argument_list></name> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badfmt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"sentinel-user"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name> <operator>=</operator> <ternary><condition><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name>NULL</name></expr> </then><else>: <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>drop_conns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"sentinel-pass"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name> <operator>=</operator> <ternary><condition><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name>NULL</name></expr> </then><else>: <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>drop_conns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Invalid argument '%s' to SENTINEL CONFIG SET"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>drop_conns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelDropConnections</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
<label><name>badfmt</name>:</label>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Invalid value '%s' to SENTINEL CONFIG SET '%s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelConfigGetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>replylen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"resolve-hostnames"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"resolve-hostnames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"announce-hostnames"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"announce-hostnames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>announce_hostnames</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"announce-ip"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"announce-ip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr> ?</condition><then> <expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"announce-port"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"announce-port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"sentinel-user"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"sentinel-user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name></expr> ?</condition><then> <expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_user</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"sentinel-pass"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"sentinel-pass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name></expr> ?</condition><then> <expr><name><name>sentinel</name><operator>.</operator><name>sentinel_auth_pass</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>replylen</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelFailoverStateStr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_NONE</name></expr>:</case> <return>return <expr><literal type="string">"none"</literal></expr>;</return>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_WAIT_START</name></expr>:</case> <return>return <expr><literal type="string">"wait_start"</literal></expr>;</return>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_SELECT_SLAVE</name></expr>:</case> <return>return <expr><literal type="string">"select_slave"</literal></expr>;</return>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE</name></expr>:</case> <return>return <expr><literal type="string">"send_slaveof_noone"</literal></expr>;</return>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></expr>:</case> <return>return <expr><literal type="string">"wait_promotion"</literal></expr>;</return>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></expr>:</case> <return>return <expr><literal type="string">"reconf_slaves"</literal></expr>;</return>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_UPDATE_CONFIG</name></expr>:</case> <return>return <expr><literal type="string">"update_config"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>addReplySentinelRedisInstance</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fields</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mbl</name> <operator>=</operator> <call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"ip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"runid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr> ?</condition><then> <expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"s_down,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"o_down,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"master,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"slave,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"sentinel,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"disconnected,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"master_down,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"failover_in_progress,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_PROMOTED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"promoted,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_SENT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"reconf_sent,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_INPROG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"reconf_inprog,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_DONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"reconf_done,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FORCE_FAILOVER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"force_failover,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SCRIPT_KILL_SENT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"script_kill_sent,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"link-pending-commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"link-refcount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"failover-state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sentinelFailoverStateStr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"last-ping-sent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"last-ok-ping-reply"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"last-ping-reply"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"s-down-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>ri</name><operator>-&gt;</operator><name>s_down_since_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"o-down-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>ri</name><operator>-&gt;</operator><name>o_down_since_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"down-after-milliseconds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"info-refresh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"role-reported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>==</operator> <name>SRI_MASTER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"master"</literal></expr> </then><else>:
<expr><literal type="string">"slave"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"role-reported-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"config-epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"num-slaves"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"num-other-sentinels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"quorum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"failover-timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"parallel-syncs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>parallel_syncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"notification-script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"client-reconfig-script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master-link-down-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master-link-status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>slave_master_link_status</name></name> <operator>==</operator> <name>SENTINEL_MASTER_LINK_STATUS_UP</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"ok"</literal></expr> </then><else>: <expr><literal type="string">"err"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr> ?</condition><then> <expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master-port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"slave-priority"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"slave-repl-offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_repl_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"replica-announced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>replica_announced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"last-hello-message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>last_hello_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"voted-leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr> ?</condition><then> <expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"voted-leader-epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>mbl</name></expr></argument>,<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelSetDebugConfigParameters</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>badarg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>moreargs</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>option</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"info-period"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_info_period</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"ping-period"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_ping_period</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"ask-period"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_ask_period</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"publish-period"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_publish_period</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"default-down-after"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_default_down_after</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"tilt-trigger"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_tilt_trigger</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"tilt-period"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_tilt_period</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"slave-reconf-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_slave_reconf_timeout</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"min-link-reconnect-period"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_min_link_reconnect_period</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"default-failover-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_default_failover_timeout</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"election-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_election_timeout</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"script-max-runtime"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_script_max_runtime</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"script-retry-delay"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sentinel_script_retry_delay</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown option or number of arguments for "</literal>
<literal type="string">"SENTINEL SET '%s'"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<label><name>badfmt</name>:</label>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid argument '%s' for SENTINEL SET '%s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>badarg</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>addReplySentinelDebugInfo</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fields</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mbl</name> <operator>=</operator> <call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"INFO-PERIOD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_info_period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING-PERIOD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_ping_period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"ASK-PERIOD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_ask_period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PUBLISH-PERIOD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_publish_period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DEFAULT-DOWN-AFTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_default_down_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DEFAULT-FAILOVER-TIMEOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_default_failover_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"TILT-TRIGGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_tilt_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"TILT-PERIOD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_tilt_period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SLAVE-RECONF-TIMEOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_slave_reconf_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"MIN-LINK-RECONNECT-PERIOD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_min_link_reconnect_period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"ELECTION-TIMEOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_election_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SCRIPT-MAX-RUNTIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_script_max_runtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SCRIPT-RETRY-DELAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sentinel_script_retry_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>mbl</name></expr></argument>,<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>addReplyDictOfRedisInstances</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>slaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>replylen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ri</name><operator>-&gt;</operator><name>replica_announced</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplySentinelRedisInstance</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slaves</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>replylen</name></expr></argument>, <argument><expr><name>slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelGetMasterByNameOrReplyError</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>,<argument><expr><name><name>name</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"No such master with that name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ri</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ISQR_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ISQR_NOQUORUM</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ISQR_NOAUTH</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>sentinelIsQuorumReachable</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>usableptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>usable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>SENTINEL_ISQR_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>voters</name> <init>= <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_S_DOWN</name><operator>|</operator><name>SRI_O_DOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>usable</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>usable</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>|=</operator> <name>SENTINEL_ISQR_NOQUORUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>usable</name> <operator>&lt;</operator> <name>voters</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>|=</operator> <name>SENTINEL_ISQR_NOAUTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>usableptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>usableptr</name> <operator>=</operator> <name>usable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"CKQUORUM &lt;master-name&gt;"</literal></expr>,
<expr><literal type="string">" Check if the current Sentinel configuration is able to reach the quorum"</literal></expr>,
<expr><literal type="string">" needed to failover a master and the majority needed to authorize the"</literal></expr>,
<expr><literal type="string">" failover."</literal></expr>,
<expr><literal type="string">"CONFIG SET &lt;param&gt; &lt;value&gt;"</literal></expr>,
<expr><literal type="string">" Set a global Sentinel configuration parameter."</literal></expr>,
<expr><literal type="string">"CONFIG GET &lt;param&gt;"</literal></expr>,
<expr><literal type="string">" Get global Sentinel configuration parameter."</literal></expr>,
<expr><literal type="string">"DEBUG"</literal></expr>,
<expr><literal type="string">" Show a list of configurable time parameters and their values (milliseconds)."</literal></expr>,
<expr><literal type="string">"GET-MASTER-ADDR-BY-NAME &lt;master-name&gt;"</literal></expr>,
<expr><literal type="string">" Return the ip and port number of the master with that name."</literal></expr>,
<expr><literal type="string">"FAILOVER &lt;master-name&gt;"</literal></expr>,
<expr><literal type="string">" Manually failover a master node without asking for agreement from other"</literal></expr>,
<expr><literal type="string">" Sentinels"</literal></expr>,
<expr><literal type="string">"FLUSHCONFIG"</literal></expr>,
<expr><literal type="string">" Force Sentinel to rewrite its configuration on disk, including the current"</literal></expr>,
<expr><literal type="string">" Sentinel state."</literal></expr>,
<expr><literal type="string">"INFO-CACHE &lt;master-name&gt;"</literal></expr>,
<expr><literal type="string">" Return last cached INFO output from masters and all its replicas."</literal></expr>,
<expr><literal type="string">"IS-MASTER-DOWN-BY-ADDR &lt;ip&gt; &lt;port&gt; &lt;current-epoch&gt; &lt;runid&gt;"</literal></expr>,
<expr><literal type="string">" Check if the master specified by ip:port is down from current Sentinel's"</literal></expr>,
<expr><literal type="string">" point of view."</literal></expr>,
<expr><literal type="string">"MASTER &lt;master-name&gt;"</literal></expr>,
<expr><literal type="string">" Show the state and info of the specified master."</literal></expr>,
<expr><literal type="string">"MASTERS"</literal></expr>,
<expr><literal type="string">" Show a list of monitored masters and their state."</literal></expr>,
<expr><literal type="string">"MONITOR &lt;name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;"</literal></expr>,
<expr><literal type="string">" Start monitoring a new master with the specified name, ip, port and quorum."</literal></expr>,
<expr><literal type="string">"MYID"</literal></expr>,
<expr><literal type="string">" Return the ID of the Sentinel instance."</literal></expr>,
<expr><literal type="string">"PENDING-SCRIPTS"</literal></expr>,
<expr><literal type="string">" Get pending scripts information."</literal></expr>,
<expr><literal type="string">"REMOVE &lt;master-name&gt;"</literal></expr>,
<expr><literal type="string">" Remove master from Sentinel's monitor list."</literal></expr>,
<expr><literal type="string">"REPLICAS &lt;master-name&gt;"</literal></expr>,
<expr><literal type="string">" Show a list of replicas for this master and their state."</literal></expr>,
<expr><literal type="string">"RESET &lt;pattern&gt;"</literal></expr>,
<expr><literal type="string">" Reset masters for specific master name matching this pattern."</literal></expr>,
<expr><literal type="string">"SENTINELS &lt;master-name&gt;"</literal></expr>,
<expr><literal type="string">" Show a list of Sentinel instances for this master and their state."</literal></expr>,
<expr><literal type="string">"SET &lt;master-name&gt; &lt;option&gt; &lt;value&gt; [&lt;option&gt; &lt;value&gt; ...]"</literal></expr>,
<expr><literal type="string">" Set configuration parameters for certain masters."</literal></expr>,
<expr><literal type="string">"SIMULATE-FAILURE [CRASH-AFTER-ELECTION] [CRASH-AFTER-PROMOTION] [HELP]"</literal></expr>,
<expr><literal type="string">" Simulate a Sentinel crash."</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"masters"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyDictOfRedisInstances</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplySentinelRedisInstance</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"slaves"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"replicas"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyDictOfRedisInstances</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sentinels"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyDictOfRedisInstances</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"myid"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"is-master-down-by-addr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>req_epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>leader_epoch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>leader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name> <operator>||</operator>
<call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>req_epoch</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sentinel</name><operator>.</operator><name>tilt</name></name> <operator>&amp;&amp;</operator> <name>ri</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>isdown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>leader</name> <operator>=</operator> <call><name>sentinelVoteLeader</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>req_epoch</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>leader_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isdown</name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>leader</name></expr> ?</condition><then> <expr><name>leader</name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>leader_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>leader</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sentinelResetMastersByPattern</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>SENTINEL_GENERATE_EVENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"get-master-addr-by-name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNullArray</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>sentinelGetCurrentMasterAddress</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"failover"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-INPROG Failover already in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sentinelSelectSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"-NOGOODSLAVE No suitable replica to promote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Executing user requested FAILOVER of '%s'"</literal></expr></argument>,
<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelStartFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_FORCE_FAILOVER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"pending-scripts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelPendingScriptsCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>quorum</name></decl>, <decl><type ref="prev"/><name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>quorum</name></expr></argument>,<argument><expr><literal type="string">"Invalid quorum"</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,<argument><expr><literal type="string">"Invalid port"</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quorum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Quorum must be 1 or greater."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>anetResolve</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>resolve_hostnames</name></name></expr> ?</condition><then> <expr><name>ANET_NONE</name></expr> </then><else>: <expr><name>ANET_IP_ONLY</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Invalid IP address or hostname specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>SRI_MASTER</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>quorum</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sentinelCheckCreateInstanceErrors</name><argument_list>(<argument><expr><name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+monitor"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ quorum %d"</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"flushconfig"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-monitor"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"ckquorum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>usable</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>sentinelIsQuorumReachable</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>usable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SENTINEL_ISQR_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"+OK %i usable Sentinels. Quorum and failover authorization "</literal>
<literal type="string">"can be reached\r\n"</literal></expr></argument>,<argument><expr><name>usable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>e</name> <init>= <expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"-NOQUORUM %i usable Sentinels. "</literal></expr></argument>,<argument><expr><name>usable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;</operator> <name>SENTINEL_ISQR_NOQUORUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="string">"Not enough available Sentinels to reach the"</literal>
<literal type="string">" specified quorum for this master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;</operator> <name>SENTINEL_ISQR_NOAUTH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;</operator> <name>SENTINEL_ISQR_NOQUORUM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="string">". "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"Not enough available Sentinels to reach the"</literal>
<literal type="string">" majority and authorize a failover"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyErrorSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelSetCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelConfigSetCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelConfigGetCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Only SENTINEL CONFIG GET &lt;option&gt; / SET &lt;option&gt; &lt;value&gt; are supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"info-cache"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictType</name></type> <name>copy_keeper</name> <init>= <expr><name>instancesDictType</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>copy_keeper</name><operator>.</operator><name>valDestructor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>masters_local</name> <init>= <expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>masters_local</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy_keeper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>masters_local</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name>masters_local</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>masters_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>sdi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>sde</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sdi</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>sde</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>sdi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>sde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>sri</name><operator>-&gt;</operator><name>info_refresh</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sri</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>sri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>sdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>masters_local</name> <operator>!=</operator> <name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>masters_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"simulate-failure"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>=</operator> <name>SENTINEL_SIMFAILURE_NONE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"crash-after-election"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>|=</operator>
<name>SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Failure simulation: this Sentinel "</literal>
<literal type="string">"will crash after being successfully elected as failover "</literal>
<literal type="string">"leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"crash-after-promotion"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>|=</operator>
<name>SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Failure simulation: this Sentinel "</literal>
<literal type="string">"will crash after promoting the selected replica to master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"crash-after-election"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"crash-after-promotion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown failure simulation specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplySentinelDebugInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelSetDebugConfigParameters</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
<label><name>numargserr</name>:</label>
<expr_stmt><expr><call><name>addReplyErrorArity</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info_section_from_redis</name><parameter_list>(<parameter><type><name>section_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (defsections || allsections || !strcasecmp(section,section_name)) { sds redissection; if (sections++) info = sdscat(info,"\r\n"); redissection = genRedisInfoString(section_name); info = sdscatlen(info,redissection,sdslen(redissection)); sdsfree(redissection); } } while(0)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>sentinelInfoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>defsections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>allsections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>allsections</name> <operator>=</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>defsections</name> <operator>=</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>defsections</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>info</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>info_section_from_redis</name><argument_list>(<argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_section_from_redis</name><argument_list>(<argument><expr><literal type="string">"clients"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_section_from_redis</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_section_from_redis</name><argument_list>(<argument><expr><literal type="string">"stats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>defsections</name> <operator>||</operator> <name>allsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>master_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#Sentinel\r\n"</literal>
<literal type="string">"sentinel_masters:%lu\r\n"</literal>
<literal type="string">"sentinel_tilt:%d\r\n"</literal>
<literal type="string">"sentinel_tilt_since_seconds:%jd\r\n"</literal>
<literal type="string">"sentinel_running_scripts:%d\r\n"</literal>
<literal type="string">"sentinel_scripts_queue_length:%ld\r\n"</literal>
<literal type="string">"sentinel_simulate_failure_flags:%lu\r\n"</literal></expr></argument>,
<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>intmax_t</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>sentinel</name><operator>.</operator><name>tilt_start_time</name></name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name></expr></argument>,
<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><literal type="string">"ok"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"odown"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"sdown"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"master%d:name=%s,status=%s,address=%s:%d,"</literal>
<literal type="string">"slaves=%lu,sentinels=%lu\r\n"</literal></expr></argument>,
<argument><expr><name>master_id</name><operator>++</operator></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelRoleCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>changes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>badarg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redacted</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>moreargs</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>option</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_j</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>redacted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"down-after-milliseconds"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelPropagateDownAfterPeriod</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"failover-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"parallel-syncs"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"notification-script"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Reconfiguration of scripts path is denied for "</literal>
<literal type="string">"security reasons. Check the deny-scripts-reconfig "</literal>
<literal type="string">"configuration directive in your Sentinel configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>seterr</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>access</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Notification script seems non existing or non executable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>seterr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"client-reconfig-script"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Reconfiguration of scripts path is denied for "</literal>
<literal type="string">"security reasons. Check the deny-scripts-reconfig "</literal>
<literal type="string">"configuration directive in your Sentinel configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>seterr</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>access</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Client reconfiguration script seems non existing or "</literal>
<literal type="string">"non executable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>seterr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"auth-pass"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>redacted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"auth-user"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_user</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"quorum"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"rename-command"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>oldname</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>newname</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <ternary><condition><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>j</name></expr></else></ternary></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>,<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dictSdsKeyCaseCompare</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>,<argument><expr><name>oldname</name></expr></argument>,<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oldname</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newname</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>,<argument><expr><name>oldname</name></expr></argument>,<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"master-reboot-down-after-period"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<goto>goto <name>badfmt</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_reboot_down_after_period</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown option or number of arguments for "</literal>
<literal type="string">"SENTINEL SET '%s'"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>seterr</name>;</goto>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numargs</name> <init>= <expr><name>j</name><operator>-</operator><name>old_j</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>numargs</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+set"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ %s %s"</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>redacted</name></expr> ?</condition><then> <expr><literal type="string">"******"</literal></expr> </then><else>: <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+set"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ %s %s %s"</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+set"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ %s"</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>changes</name> <operator>&amp;&amp;</operator> <call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Failed to save Sentinel new configuration on disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<label><name>badfmt</name>:</label>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid argument '%s' for SENTINEL SET '%s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>badarg</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>seterr</name>:</label>
<if_stmt><if>if <condition>(<expr><name>changes</name> <operator>&amp;&amp;</operator> <call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Failed to save Sentinel new configuration on disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelPublishCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>SENTINEL_HELLO_CHANNEL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Only HELLO messages are accepted by Sentinel instances."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelProcessHelloMessage</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelCheckSubjectivelyDown</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>elapsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc_conn_time</name></name><operator>)</operator> <operator>&gt;</operator>
<name>sentinel_min_link_reconnect_period</name> <operator>&amp;&amp;</operator>
<name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc_conn_time</name></name><operator>)</operator> <operator>&gt;</operator>
<name>sentinel_min_link_reconnect_period</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc_last_activity</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>sentinel_publish_period</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>||</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator>
<name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>==</operator> <name>SRI_SLAVE</name> <operator>&amp;&amp;</operator>
<call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>&gt;</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name><operator>+</operator><name>sentinel_info_period</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER_REBOOT</name> <operator>&amp;&amp;</operator>
<call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>ri</name><operator>-&gt;</operator><name>master_reboot_since_time</name></name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>master_reboot_down_after_period</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+sdown"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>s_down_since_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_S_DOWN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-sdown"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SRI_S_DOWN</name><operator>|</operator><name>SRI_SCRIPT_KILL_SENT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelCheckObjectivelyDown</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quorum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>odown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quorum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>quorum</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quorum</name> <operator>&gt;=</operator> <name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>odown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>odown</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+odown"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@ #quorum %d/%d"</literal></expr></argument>,
<argument><expr><name>quorum</name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_O_DOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>o_down_since_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-odown"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_O_DOWN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelReceiveIsMasterDownReply</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>elements</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
<name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name> <operator>&amp;&amp;</operator>
<name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STRING</name> <operator>&amp;&amp;</operator>
<name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_master_down_reply_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_MASTER_DOWN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_MASTER_DOWN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"%s voted for %s %llu"</literal></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ASK_FORCED</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>sentinelAskMasterStateToOtherSentinels</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>elapsed</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>last_master_down_reply_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>port</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name>sentinel_ask_period</name><operator>*</operator><literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_MASTER_DOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SENTINEL_ASK_FORCED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>last_master_down_reply_time</name></name> <operator>&lt;</operator> <name>sentinel_ask_period</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>port</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelReceiveIsMasterDownReply</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>,
<argument><expr><literal type="string">"%s is-master-down-by-addr %s %s %llu %s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"SENTINEL"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>&gt;</operator> <name>SENTINEL_FAILOVER_STATE_NONE</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelSimFailureCrash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Sentinel CRASH because of SENTINEL simulate-failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>sentinelVoteLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>req_epoch</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>req_runid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>leader_epoch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>req_epoch</name> <operator>&gt;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <name>req_epoch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+new-epoch"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%llu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>&lt;</operator> <name>req_epoch</name> <operator>&amp;&amp;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>&lt;=</operator> <name>req_epoch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>req_runid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+vote-for-leader"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%s %llu"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call><operator>+</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name>SENTINEL_MAX_DESYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>leader_epoch</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<struct>struct <name>sentinelLeader</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>votes</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>int</name></type> <name>sentinelLeaderIncr</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>counters</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>existing</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>oldval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictAddRaw</name><argument_list>(<argument><expr><name>counters</name></expr></argument>,<argument><expr><name>runid</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oldval</name> <operator>=</operator> <call><name>dictGetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>existing</name></expr></argument>,<argument><expr><name>oldval</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>oldval</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>sentinelGetLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>epoch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>counters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>voters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>voters_quorum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>myvote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>winner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>leader_epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_votes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_O_DOWN</name><operator>|</operator><name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counters</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leaderVotesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>voters</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>==</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelLeaderIncr</name><argument_list>(<argument><expr><name>counters</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>votes</name> <init>= <expr><call><name>dictGetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>votes</name> <operator>&gt;</operator> <name>max_votes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_votes</name> <operator>=</operator> <name>votes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>winner</name> <operator>=</operator> <call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>winner</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>myvote</name> <operator>=</operator> <call><name>sentinelVoteLeader</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name>epoch</name></expr></argument>,<argument><expr><name>winner</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>leader_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>myvote</name> <operator>=</operator> <call><name>sentinelVoteLeader</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name>epoch</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>leader_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>myvote</name> <operator>&amp;&amp;</operator> <name>leader_epoch</name> <operator>==</operator> <name>epoch</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>votes</name> <init>= <expr><call><name>sentinelLeaderIncr</name><argument_list>(<argument><expr><name>counters</name></expr></argument>,<argument><expr><name>myvote</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>votes</name> <operator>&gt;</operator> <name>max_votes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_votes</name> <operator>=</operator> <name>votes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>winner</name> <operator>=</operator> <name>myvote</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>voters_quorum</name> <operator>=</operator> <name>voters</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>winner</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>max_votes</name> <operator>&lt;</operator> <name>voters_quorum</name> <operator>||</operator> <name>max_votes</name> <operator>&lt;</operator> <name><name>master</name><operator>-&gt;</operator><name>quorum</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>winner</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>winner</name> <operator>=</operator> <ternary><condition><expr><name>winner</name></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>winner</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>myvote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>winner</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelSendSlaveOf</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>host</name> <operator>=</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>,<argument><expr><literal type="string">"ONE"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"MULTI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"SLAVEOF"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s REWRITE"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"CONFIG"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s KILL TYPE %s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"CLIENT"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"normal"</literal></expr> </then><else>: <expr><literal type="string">"pubsub"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
<argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"EXEC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelStartFailover</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_WAIT_START</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_epoch</name></name> <operator>=</operator> <operator>++</operator><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+new-epoch"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%llu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+try-failover"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call><operator>+</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name>SENTINEL_MAX_DESYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sentinelStartFailoverIfNeeded</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>&lt;</operator>
<name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name><operator>*</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>failover_delay_logged</name></name> <operator>!=</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>clock</name> <init>= <expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>+</operator>
<name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ctimebuf</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ctime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock</name></expr></argument>,<argument><expr><name>ctimebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctimebuf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_delay_logged</name></name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Next failover delay: I will not start a failover before %s"</literal></expr></argument>,
<argument><expr><name>ctimebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelStartFailover</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>compareSlavesForPromotion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier><modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator><name>sentinelRedisInstance</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>(</operator><name>sentinelRedisInstance</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sa_runid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb_runid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>slave_priority</name></name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>slave_priority</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>slave_priority</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>slave_priority</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>slave_repl_offset</name></name> <operator>&gt;</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>slave_repl_offset</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>slave_repl_offset</name></name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>slave_repl_offset</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sa_runid</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>runid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sb_runid</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>runid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sa_runid</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>sb_runid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sa_runid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sb_runid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sa_runid</name></expr></argument>, <argument><expr><name>sb_runid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelSelectSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier><modifier>*</modifier></type><name>instance</name> <init>=
<expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>instance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><call><name>dictSize</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>selected</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>instances</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>max_master_down_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_master_down_time</name> <operator>+=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>master</name><operator>-&gt;</operator><name>s_down_since_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>max_master_down_time</name> <operator>+=</operator> <name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>info_validity_time</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_S_DOWN</name><operator>|</operator><name>SRI_O_DOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name> <operator>&gt;</operator> <name>sentinel_ping_period</name><operator>*</operator><literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>slave_priority</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>info_validity_time</name> <operator>=</operator> <name>sentinel_ping_period</name><operator>*</operator><literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>info_validity_time</name> <operator>=</operator> <name>sentinel_info_period</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>info_refresh</name></name> <operator>&gt;</operator> <name>info_validity_time</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>&gt;</operator> <name>max_master_down_time</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>instance</name><index>[<expr><name>instances</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>slave</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>instances</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>instance</name></expr></argument>,<argument><expr><name>instances</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sentinelRedisInstance</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>compareSlavesForPromotion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>selected</name> <operator>=</operator> <name><name>instance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>selected</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelFailoverWaitStart</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>leader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isleader</name></decl>;</decl_stmt>
<expr_stmt><expr><name>leader</name> <operator>=</operator> <call><name>sentinelGetLeader</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isleader</name> <operator>=</operator> <name>leader</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>leader</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isleader</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FORCE_FAILOVER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>election_timeout</name> <init>= <expr><name>sentinel_election_timeout</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>election_timeout</name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>election_timeout</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>&gt;</operator> <name>election_timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-failover-abort-not-elected"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelAbortFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+elected-leader"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelSimFailureCrash</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_SELECT_SLAVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+failover-state-select-slave"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelFailoverSelectSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>sentinelSelectSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slave</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-failover-abort-no-good-slave"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelAbortFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+selected-slave"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_PROMOTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>slave</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+failover-state-send-slaveof-noone"</literal></expr></argument>,
<argument><expr><name>slave</name></expr></argument>, <argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelFailoverSendSlaveOfNoOne</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-failover-abort-slave-timeout"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelAbortFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"+failover-state-wait-promotion"</literal></expr></argument>,
<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelFailoverWaitPromotion</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-failover-abort-slave-timeout"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelAbortFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelFailoverDetectEnd</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>not_reconfigured</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>elapsed</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_state_change_time</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_PROMOTED</name><operator>|</operator><name>SRI_RECONF_DONE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>not_reconfigured</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>not_reconfigured</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+failover-end-for-timeout"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>not_reconfigured</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+failover-end"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_UPDATE_CONFIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_PROMOTED</name><operator>|</operator><name>SRI_RECONF_DONE</name><operator>|</operator><name>SRI_RECONF_SENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave-reconf-sent-be"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_SENT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelFailoverReconfNextSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_progress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_RECONF_SENT</name><operator>|</operator><name>SRI_RECONF_INPROG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in_progress</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>in_progress</name> <operator>&lt;</operator> <name><name>master</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_PROMOTED</name><operator>|</operator><name>SRI_RECONF_DONE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_SENT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>slave_reconf_sent_time</name></name><operator>)</operator> <operator>&gt;</operator>
<name>sentinel_slave_reconf_timeout</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"-slave-reconf-sent-timeout"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_RECONF_SENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_DONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_RECONF_SENT</name><operator>|</operator><name>SRI_RECONF_INPROG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_SENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>slave_reconf_sent_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave-reconf-sent"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_progress</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelFailoverDetectEnd</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelFailoverSwitchToPromotedSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><ternary><condition><expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr> ?</condition><then>
<expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr> </then><else>: <expr><name>master</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+switch-master"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%s %s %d %s %d"</literal></expr></argument>,
<argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><call><name>announceSentinelAddr</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelResetMasterAndChangeAddress</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>,<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelFailoverStateMachine</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<switch>switch<condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_WAIT_START</name></expr>:</case>
<expr_stmt><expr><call><name>sentinelFailoverWaitStart</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_SELECT_SLAVE</name></expr>:</case>
<expr_stmt><expr><call><name>sentinelFailoverSelectSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE</name></expr>:</case>
<expr_stmt><expr><call><name>sentinelFailoverSendSlaveOfNoOne</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></expr>:</case>
<expr_stmt><expr><call><name>sentinelFailoverWaitPromotion</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></expr>:</case>
<expr_stmt><expr><call><name>sentinelFailoverReconfNextSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelAbortFailover</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>&lt;=</operator> <name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SRI_FAILOVER_IN_PROGRESS</name><operator>|</operator><name>SRI_FORCE_FAILOVER</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_PROMOTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelHandleRedisInstance</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelReconnectInstance</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelSendPeriodicCommands</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>sentinel</name><operator>.</operator><name>tilt_start_time</name></name> <operator>&lt;</operator> <name>sentinel_tilt_period</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-tilt"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"#tilt mode exited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelCheckSubjectivelyDown</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelCheckObjectivelyDown</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sentinelStartFailoverIfNeeded</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelAskMasterStateToOtherSentinels</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>SENTINEL_ASK_FORCED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sentinelFailoverStateMachine</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelAskMasterStateToOtherSentinels</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>SENTINEL_NO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelHandleDictOfRedisInstances</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>switch_to_promoted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sentinelHandleRedisInstance</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelHandleDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelHandleDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>==</operator> <name>SENTINEL_FAILOVER_STATE_UPDATE_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>switch_to_promoted</name> <operator>=</operator> <name>ri</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>switch_to_promoted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sentinelFailoverSwitchToPromotedSlave</name><argument_list>(<argument><expr><name>switch_to_promoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelCheckTiltCondition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>delta</name> <init>= <expr><name>now</name> <operator>-</operator> <name><name>sentinel</name><operator>.</operator><name>previous_time</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>delta</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>delta</name></expr></argument> &gt;</argument_list></name> <name>sentinel_tilt_trigger</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt_start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+tilt"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"#tilt mode entered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>previous_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sentinelTimer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelCheckTiltCondition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelHandleDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelRunPendingScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelCollectTerminatedScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelKillTimedoutScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_HZ</name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>CONFIG_DEFAULT_HZ</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
