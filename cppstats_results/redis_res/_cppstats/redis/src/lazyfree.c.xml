<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/lazyfree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomicvar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>redisAtomic</name> <name>size_t</name></type> <name>lazyfree_objects</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>redisAtomic</name> <name>size_t</name></type> <name>lazyfreed_objects</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>lazyfreeFreeObject</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>(</operator><name>robj</name> <operator>*</operator><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicDecr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfreed_objects</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>lazyfreeFreeDatabase</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht1</name> <init>= <expr><operator>(</operator><name>dict</name> <operator>*</operator><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht2</name> <init>= <expr><operator>(</operator><name>dict</name> <operator>*</operator><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>numkeys</name> <init>= <expr><call><name>dictSize</name><argument_list>(<argument><expr><name>ht1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>ht1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>ht2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicDecr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfreed_objects</name></expr></argument>,<argument><expr><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>lazyFreeTrackingTable</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>numele</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>freeTrackingRadixTree</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicDecr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfreed_objects</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>lazyFreeLuaScripts</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>lua_scripts</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>len</name> <init>= <expr><call><name>dictSize</name><argument_list>(<argument><expr><name>lua_scripts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>lua_scripts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicDecr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfreed_objects</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>lazyFreeFunctionsCtx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>functions_lib_ctx</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>functionsLibCtxfunctionsLen</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>functionsLibCtxFree</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicDecr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfreed_objects</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>lazyFreeReplicationBacklogRefMem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>blocks</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>len</name> <init>= <expr><call><name>listLength</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicDecr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfreed_objects</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>lazyfreeGetPendingObjectsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>aux</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>aux</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>lazyfreeGetFreedObjectsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>aux</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name>lazyfreed_objects</name></expr></argument>,<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>aux</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>lazyfreeResetStats</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name>lazyfreed_objects</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>lazyfreeGetFreeEffort</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ql</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name><operator>-&gt;</operator><name>length</name></name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>effort</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>effort</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name> <operator>&amp;&amp;</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cg</name> <operator>=</operator> <name><name>ri</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>effort</name> <operator>+=</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><call><name>raxSize</name><argument_list>(<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>effort</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_MODULE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>effort</name> <init>= <expr><call><name>moduleGetFreeEffort</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>effort</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ULONG_MAX</name></expr> </then><else>: <expr><name>effort</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAZYFREE_THRESHOLD</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>freeObjAsync</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>free_effort</name> <init>= <expr><call><name>lazyfreeGetFreeEffort</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>obj</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>free_effort</name> <operator>&gt;</operator> <name>LAZYFREE_THRESHOLD</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bioCreateLazyFreeJob</name><argument_list>(<argument><expr><name>lazyfreeFreeObject</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>emptyDbAsync</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>oldht1</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldht2</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbExpiresDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name>oldht1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bioCreateLazyFreeJob</name><argument_list>(<argument><expr><name>lazyfreeFreeDatabase</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>oldht1</name></expr></argument>,<argument><expr><name>oldht2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>freeTrackingRadixTreeAsync</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>tracking</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tracking</name><operator>-&gt;</operator><name>numnodes</name></name> <operator>&gt;</operator> <name>LAZYFREE_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><name><name>tracking</name><operator>-&gt;</operator><name>numele</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bioCreateLazyFreeJob</name><argument_list>(<argument><expr><name>lazyFreeTrackingTable</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>tracking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>freeTrackingRadixTree</name><argument_list>(<argument><expr><name>tracking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>freeLuaScriptsAsync</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>lua_scripts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>lua_scripts</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LAZYFREE_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name>lua_scripts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bioCreateLazyFreeJob</name><argument_list>(<argument><expr><name>lazyFreeLuaScripts</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>lua_scripts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>lua_scripts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>freeFunctionsAsync</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>functions_lib_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>functionsLibCtxfunctionsLen</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LAZYFREE_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><call><name>functionsLibCtxfunctionsLen</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bioCreateLazyFreeJob</name><argument_list>(<argument><expr><name>lazyFreeFunctionsCtx</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>functionsLibCtxFree</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>freeReplicationBacklogRefMemAsync</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LAZYFREE_THRESHOLD</name> <operator>||</operator>
<call><name>raxSize</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LAZYFREE_THRESHOLD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name>lazyfree_objects</name></expr></argument>,<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>raxSize</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bioCreateLazyFreeJob</name><argument_list>(<argument><expr><name>lazyFreeReplicationBacklogRefMem</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>blocks</name></expr></argument>,<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
