<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats/redis/src/modules/hellohook.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EXPERIMENTAL_API</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../redismodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>clientChangeCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleClientInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Client %s event for client #%llu %s:%d\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"connection"</literal></expr> </then><else>: <expr><literal type="string">"disconnection"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>ci</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>flushdbCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RedisModuleFlushInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>==</operator> <name>REDISMODULE_SUBEVENT_FLUSHDB_START</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>dbnum</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"DBSIZE"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>numkeys</name> <init>= <expr><call><name>RedisModule_CallReplyInteger</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FLUSHDB event of database %d started (%lld keys in DB)\n"</literal></expr></argument>,
<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>dbnum</name></name></expr></argument>, <argument><expr><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_FreeCallReply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FLUSHALL event started\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>dbnum</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FLUSHDB event of database %d ended\n"</literal></expr></argument>,<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FLUSHALL event ended\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>RedisModule_OnLoad</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RedisModule_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"hellohook"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>REDISMODULE_APIVER_1</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_ClientChange</name></expr></argument>, <argument><expr><name>clientChangeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedisModule_SubscribeToServerEvent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>RedisModuleEvent_FlushDB</name></expr></argument>, <argument><expr><name>flushdbCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
